 #freeze
 [[MaildirFormat]]/Specification
 
 http://cr.yp.to/proto/maildir.html の翻訳です。
 
 誤訳などを見付けたらコメントしてください。
 なお、このページは著作権表示などを消されないよう凍結してあります。
 
 ----
 
 [[D. J. Bernstein>http://cr.yp.to/djb.html]]
 
 translated to Japanese by mutt-j member(s), 2004-04-30~
 (http://cr.yp.to/mirrors.html に基づく表示)
 
 [[Internet mail>http://cr.yp.to/mail.html]]
 
 *Maildir フォーマットを使う
 
 **なぜ Maildir を使うべき?
 
 一言: ''ロックしない''からです。~
 新着メールが届いていても MUA がメッセージを読んだり消したりできる
 ということです。
 各メッセージが一意のファイル名で個別に保管されますので、
 他のメッセージへの作業から影響を受けません。~
 MUA はメールが配送途中で途切れてしまうことを心配せずに済みます。
 各メッセージは ''tmp'' サブディレクトリにしっかり書き込まれ、
 然る後に ''new'' へ移動されるからです。
 ですから Maildir は NFS 上でさえ信用できます。
 
 **一意のファイル名はいかに作成されるか?
 
 Maildir にメッセージを書き込まない限りは、
 一意のファイル名の形式がどうだろうと関係ありません。
 コロンやスラッシュを使ったり最初にドットを使ったりしてはいけない
 というだけで、どんな名前にでもなり得るのです。
 ファイル名から情報を取り出そうとしないでください。
 
 わかりました。メッセージを書き込みたいんですね。
 一意のファイル名は三つの部品からできており、それぞれドットで分かれています。
 左側の部分は time() の値か gettimeofday() の第二カウンタです。
 右側の部分は gethostname() の値です。
 (不正なホスト名に対処するため、/ は \057 に、: は \072 に置換します。)
 真ん中の部分は配送識別子です。これは以下で論じます。
 
 この用語が提案する通り、
 ''Maildir への配送はそれぞれ一意の名称を持たねばなりません''。
 Maildir が NFS を通して共有されているときには、
 その Maildir に配送するマシンがそれぞれ自分のホスト名を''持たねばなりません''。
 ひとつのマシン上では、
 同時に起こる配送がそれぞれ異なる配送識別子を''持たねばなりません''。
 
 現代的な配送識別子は、十分に以下の文字列を連結することによって
 一意性を保証します。
 -#'''n'''~
 ここで '''n''' の部分 (16 進数) はオペレーティングシステムの
 unix_sequencenumber() システムコールの出力です。
 これは呼び出されるたびに 1 ずつ増える数を返します。
 再起動後には 0 から始まります。
 -X'''n'''~
 この '''n''' の部分 (16 進数) はオペレーティングシステムの
 unix_bootnumber() システムコール出力です。
 これはシステムが起動した回数を報告します。
 これを # と共に使うことで一意性を保証するわけです。
 しかし残念ながら、ほとんどのオペレーティングシステムは
 unix_sequencenumber() と unix_bootnumber をサポートしていません。
 -R'''n'''~
 この '''n''' (16 進数) は、オペレーティングシステムの
 unix_cryptorandomnumber() システムコール、または /dev/urandom
 のような同等の乱数源からの出力です。
 残念なことに、
 暗号学的な乱数生成器を含んでいないオペレーティングシステムもあります。
 -I'''n'''~
 ここでは '''n''' (16 進数) は、このファイルの UNIX i-ノード番号です。
 残念ながら、NFS 越しでは常に i-ノードが得られるとは限りません。
 -V'''n'''~
 ここで '''n''' の部分 (16 進数) は、そのファイルの UNIX デバイス番号です。
 残念ながら、デバイス番号は NFS を通しても常に得られるとは限りません。
 (しかもデバイス番号は標準的な UNIX ファイルシステムでは役に立ちません。
 link() と rename() が使えるようにするため、
 Maildir は単一の UNIX デバイス内にある必要があるのです。)
 -M'''n'''~
 この '''n''' (10 進数) はマイクロ秒カウンタで、
 ファイル名の左側部分に使った gettimeofday() と同じ時点から数えたものです。
 -P'''n'''~
 この '''n''' (10 進数) はプロセス ID です。
 -Q'''n'''~
 ここの '''n''' (10 進数) は、このプロセスでなされた配送の数です。
 
 古典的な配送識別子は以下の形式を使います。
 -'''n'''~
 この '''n''' はプロセス ID で、
 このプロセスが配送を行なうために分岐した地点を表します。
 残念ながら、
 ある馬鹿なオペレーティングシステムはプロセス ID をすぐに再利用して、
 時刻+pid という標準的な組み合わせをだめにしてしまいます。
 -'''n'''_'''m'''~
 ここで、'''n''' はプロセス ID で、
 '''m''' はそのプロセスでなされた配送の数です。
 
 **info には何を入れられるか?
 
 ファイルを ''new'' から ''cur'' に移すときには、
 その名前を '''uniq''' から '''uniq:info''' に変えなくてはなりません。
 '''uniq''' 部分の文字列はそのままにしておいて、
 別々のメッセージがかち合わないようにしてください。
 
 '''info''' は事実上、mbox リーダで使われる Status フィールドと等価です。
 MUA 同士が '''info''' の意味について同意するなら便利でしょう。
 そうすれば '''info''' セマンティクスを変えないで済むからです。
 このようになっています。
 
 '''info''' が "1," で始まるとき: 実験的セマンティクス。
 
 '''info''' が "2," で始まるとき:
 コンマに続く各文字は独立したフラグを表します。
 -フラグ "P" (passed): ユーザがこのメッセージを誰か他の人へ
 再送/転送/バウンスした。
 -フラグ "R" (replied): ユーザがこのメッセージに返信した。
 -フラグ "S" (seen): ユーザはこのメッセージを閲覧した。とはいえ、
 最後まで読み通してはいないかもしれない。
 -フラグ "T" (trashed): ユーザはこのメッセージをゴミ箱に移した。
 ゴミ箱は後日、ユーザの手で空にされることになる。
 -フラグ "D" (draft): ユーザはこのメッセージを下書きとみなしている。
 これはユーザの裁量で切替えられる。
 -フラグ "F" (flagged): ユーザ定義フラグ。ユーザの裁量により切替えられる。
 
 今後、新しいフラグが定義されるかもしれません。
 なお、フラグは ASCII 順に付けられなくてはなりません。例 "2,FRS"
 
 **Maildir には tmp, new, cur 以外を含めることができるか?
 
 できます:
 -.qmail: qmail-local による直接配送をするために使う。
 -bulletintime: 空ファイル。システムワイドな告知プログラムによって使われる。
 -bulletinlock: 空ファイル。システムワイドな告知プログラムによって使われる。
 -seriallock: 空ファイル。AutoTURN を順に処理するために使われる。
 
 ----
 
 コメント:
 -最後のセクションからは『Maildir にはディレクトリを含められない』という結論が導かれます(驚 -- [[tamo]] &new{2004-05-02 (日) 19:12:26};
+-AutoTURN とは常時接続でないクライアントにバーチャルホストを割り当てて、SMTP 接続してきたときに配送する仕組みのこと、なのでしょうか... -- [[tamo]] &new{2004-05-02 (日) 19:18:17};
 
 #comment
