<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book>

<bookinfo>
<title>Mutt E-Mail クライアント</title>
<author>
<firstname>Michael</firstname><surname>Elkins</surname>
<email>me@cs.hmc.edu</email>
</author>
<releaseinfo>version @VERSION@</releaseinfo>

<abstract>
<para>
<quote>All mail clients suck.  This one just sucks less.</quote> &mdash;
me, circa 1995
</para>
</abstract>
</bookinfo>

<chapter id="intro">
<title>はじめに</title>

<para>
<emphasis role="bold">Mutt</emphasis> は小さいながらも非常にパワフルな
テキストベースの MIME メールクライアントです。Mutt は、その高い柔軟性に加えて、
キー割り当てや キーボードマクロ、メールのスレッド表示、正規表現検索、さらには
メッセージ選択用の強力なパターン言語といった高度な機能により、 まさしくメール
のパワーユーザにぴったりであると言えます。 
</para>

<sect1 id="homepage">
<title>Mutt ホームページ</title>

<para>
公式のホームページは以下の通りです。
<ulink url="http://www.mutt.org/">http://www.mutt.org/</ulink>.
</para>

</sect1>

<sect1 id="muttlists">
<title>メーリングリスト</title>

<para>
以下のメーリングリストを購読するには、メッセージ本文に
<emphasis>subscribe</emphasis> を書き、
<emphasis>リスト名</emphasis><literal>-request@mutt.org</literal>
に送信してください。
</para>

<itemizedlist>
<listitem>

<para>
<email>mutt-announce-request@mutt.org</email> &mdash; 流量の少ない、アナウンス
用のリスト
</para>
</listitem>
<listitem>

<para>
<email>mutt-users-request@mutt.org</email> &mdash; 質問、バグ報告、要望
</para>
</listitem>
<listitem>

<para>
<email>mutt-dev-request@mutt.org</email> &mdash; 開発メーリングリスト
</para>
</listitem>

</itemizedlist>

<para>
<emphasis>mutt-announce</emphasis> に投稿されたすべてのメッセージは
自動的に<emphasis>mutt-users</emphasis>に転送されるため、両方を購読
する必要はありません。
</para>

</sect1>

<sect1 id="distribution">
<title>Mutt の入手</title>

<para>
Mutt リリース版は <ulink
url="ftp://ftp.mutt.org/pub/mutt/">ftp://ftp.mutt.org/pub/mutt/</ulink>以下か
らダウンロードできます。
ミラーサイトのリストは <ulink
url="http://www.mutt.org/download.html">http://www.mutt.org/download.html</ulink>
を参照してください。
</para>

<para>
開発版は
<ulink url="https://gitlab.com/muttmua/mutt">Mutt development site</ulink> を
参照してください。
</para>

</sect1>

<sect1 id="irc">
<title>Mutt オンラインリソース</title>

<variablelist>

<varlistentry>
<term>バグ追跡システム</term>
<listitem>
<para>
公式の Mutt バグ追跡システムは
<ulink url="https://gitlab.com/muttmua/mutt/issues">https://gitlab.com/muttmua/mutt/issues</ulink>
です。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Wiki</term>
<listitem>
<para>
(非公式の) wiki は
at <ulink
url="https://gitlab.com/muttmua/mutt/wikis/home">https://gitlab.com/muttmua/mutt/wikis/home</ulink>
にあります。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>IRC</term>
<listitem>
<para>
IRC ユーザコミュニティは
<ulink url="http://www.freenode.net/">irc.freenode.net</ulink> のチャンネル
<emphasis>#mutt</emphasis> にあります。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>USENET</term>
<listitem>
<para>
USENET はニュースグループ <ulink
url="news:comp.mail.mutt">comp.mail.mutt</ulink>を参照してください。
</para>
</listitem>
</varlistentry>

</variablelist>

</sect1>

<sect1 id="contrib">
<title>Mutt への貢献</title>

<para>
Mutt プロジェクトに対する貢献方法はいくつもあります。
</para>

<para>
特に新しくユーザになられた人には、他の、新規および熟練ユーザにあって Mutt につ
いてチャットしたり、問題について話したり、解決方法を共有することは有用です。
</para>

<para>
Mutt の他の言語への翻訳は高く評価されているため、Mutt 開発者は、
翻訳の改善と維持を手助けしてくれる熟練の翻訳者を探しています。
</para>

<para>
新しい機能とバグ修正のためのパッチの寄贈についての詳細は、以下の開発ページを参照してください
<ulink url="https://gitlab.com/muttmua/mutt">https://gitlab.com/muttmua/mutt</ulink>。
</para>

</sect1>

<sect1 id="typo">
<title>表記について</title>

<para>
この節では、このマニュアル全体における表記方法について記しています。
特別の単語についての表記方法については、テーブル  
<xref linkend="tab-typo"/> を参照してください。
</para>

<table id="tab-typo">
<title>特別の単語についての表記方法</title>
<tgroup cols="2">
<thead>
<row><entry>項目</entry><entry>Refers to...</entry></row>
</thead>
<tbody>
<row><entry><literal>printf(3)</literal></entry><entry>UNIX マニュアルページ。
<literal>man 3 printf</literal> を実行。</entry></row>
<row><entry><literal>&lt;PageUp&gt;</literal></entry><entry>名前付きのキー</entry></row>
<row><entry><literal>&lt;create-alias&gt;</literal></entry><entry>名前付きの
Mutt のファンクション</entry></row>
<row><entry><literal>^G</literal></entry><entry>Control+G キー</entry></row>
<row><entry>$mail_check</entry><entry>Mutt 設定オプション</entry></row>
<row><entry><literal>$HOME</literal></entry><entry>環境変数</entry></row>
</tbody>
</tgroup>
</table>

<para>
例は以下の通りです:
</para>

<screen>
mutt -v
</screen>

<para>
コマンド概要の説明中で中括弧 (<quote>{}</quote>) は、オプションの組を表し、
of options of which one is mandatory, square brackets
(<quote>[]</quote>) で囲まれたものは必須のものです。また、3つのドットは引数が
任意の回数繰り返される可能性があることを意味します。
</para>

</sect1>

<sect1 id="copyright">
<title>著作権</title>

<para>
Mutt is Copyright &copy; 1996-2020 Michael R. Elkins
<email>me@mutt.org</email> and others.
</para>

<para>
このプログラムはフリーソフトウェアです。Free Software Foundation による GNU
General Public License のバージョン 2 もしくはそれ以降のバージョン (任意選択)
のいずれかに従う限り、自由に変更および再配布できます。
</para>

<para>
このプログラムは役に立つことを願って配布されていますが、「まったく無保証」です。
商品能力や特定の目的への適性について、暗黙の保証さえありません。詳細は GNU
General Public License を参照してください。
</para>

<para>
GNU General Public License の文面は、このプログラムに付いてきたはずです。そう
でなければ、Free Software Foudation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111, USA に手紙をください。
</para>

</sect1>

</chapter>

<chapter id="gettingstarted">
<title>最初のステップ</title>

<para>
この章の目的は Mutt の使い方を概観することです。 ほかにもマニュアルの別の場所
で説明されている機能はたくさんあります。 さらには Mutt FAQ や種々の Web ページ
で手に入る情報もあります。詳しくは
<ulink url="http://www.mutt.org/">Mutt ホームページ</ulink>を参照してください。
</para>

<para>
この章では、配布されているままの既定のキー割り当てで説明します。 自分のサイト
ではシステム管理者が既定値を変えてしまっている かもしれません。どのメニューでも
<quote>?</quote> を押して 現在のキー割り当てを表示できます。 
</para>

<para>
まず必要なのは Mutt を起動することです。これは、コマンドラインから
<literal>mutt</literal> と入力するだけです。起動時の種々のオプションについては
mutt のマニュアルページか、<link linkend="commandline">リファレンス</link> を
参照してください。
</para>

<sect1 id="core-concepts">
<title>基本的な考え方</title>

<para>
Mutt は、ほとんどの場合、行/エントリまたはページベースの、異なったメ
ニューを対話的に使って操作する、テキストベースのアプリケーションです。
行ベースのメニューは<quote>index</quote>メニュー(現在オープンしているフォルダ
のすべてのメッセージを表示)または<quote>alias</quote>メニュー(リストから受信者
を選択できる)のようなものです。ページベースのメニュー例は、
<quote>pager</quote>(一度に1つのメッセージを表示)または有効なキーバインディン
グを一覧表示する<quote>help</quote>メニューです。
</para>

<para>
ユーザインタフェースには、最上部に状況によって変化するヘルプ行、メニューの内容、
状況によって変化するステータス行、コマンド行という構成になっています。コマンド
行は、プロンプトのように情報やエラーメッセージを表示したり、対話的なコマンドを
入力するのに使われます。
</para>

<para>
Mutt は利用者が恒久的に既定値以外の値を使いたい場合に、設定ファイルに記述した
変数を使って構成されます。Mutt は読みやすく、コメントも書ける、やや複
雑な設定ファイルに、リッチな設定構文で記述できることをサポートしています。
</para>

<para>
Mutt はほとんどのキーバインディングを変更することができるので、いわゆる
<quote>ファンクション</quote>を(コマンド行を使って)手動で実行したり、マクロで実行させた
りできます。マクロは、一連の動作を繰り返す代わりに、1つのキーや短いキーシーケ
ンスにバインドすることもできます。
</para>

<para>
(他のフォルダにメッセージをセーブまたはコピーするような)多くのコマンドは、
単一のメッセージまたは(いわゆる<quote>タグ付けられた</quote>)ひとまとまりのメッ
セージに適用できます。メッセージ選択を手助けするため、Mutt は、否定と同様、論
理的な<emphasis>and</emphasis>と<emphasis>or</emphasis>操作を組み合わせること
ができる、たくさんのメッセージパターン(たとえば受信者、送信者、本体の内容、
送受信日付など)を提供しています。パターンは、一致したメッセージのみをインデッ
クスに表示させるため、(たとえば)メッセージの検索にも使う事ができます。
</para>

<para>
Mutt は、フォルダに入ったり、新規メッセージを作ったり、既存のメッセージに返信
するような特定の状況において、設定コマンドとファンクションをユーザが実行できる、
<quote>hook</quote>というコンセプトをサポートしています。hook は、複数のアイデ
ンティティの管理、フォルダ表示のカスタマイズフォルダ単位での自動アーカイブの実
装などやその他を含む、高度にカスタマイズされた Mutt の動作を行うのに使われます。
</para>

<para>
インタラクティブモードのほかに、Mutt はメッセージ送信を行うコマンド行ツールと
しても使えます。この場合、<literal>mailx(1)</literal> 互換のインタフェースをサ
ポートしています。コマンド行オプション一覧の詳細は<xref linkend="tab-commandline-options"/>
を参照してください。
</para>

</sect1>

<sect1 id="concept-screens-and-menus">
<title>画面とメニュー</title>

<sect2 id="intro-index">
<title>インデックス</title>

<para>
インデックスは、Mutt を起動した時に通常最初に見る画面のことです。ここには、現
在オープンしているメールボックス中にあるメールの概要が表示されます。既定値では、
これはシステムのメールボックスです。インデックス中に表示されている情報は、左側
に番号がついているメールの一覧、フラグ(新規メール、重要メール、転送または返信
されたメール、タグづけられたメールなど)、メール送信日付、送信者、メールサイズ
と題名です。さらに、メールに返信した場合や他の人がリプライした場合、インデック
スにはスレッド階層を表示することもできます。この場合、他者のメールを"サブツリー
"配下で見ることができます。この機能は、複数の人によるグループにおいての個人的なメー
ルや、メーリングリストを購読している場合には特に便利です。
</para>

</sect2>

<sect2 id="intro-pager">
<title>ページャ</title>

<para>
ページャはメールの内容を表示するのに使います。ページャの最上部には、たとえば送
信者、受信者、題名とその他の情報がある、最も重要なメールのヘッダがあります。ど
のような情報を実際に見ることができるかは、以下で詳細に記述がある、設定に依存し
ます。
</para>

<para>
ヘッダの下には、通常、メッセージを含むメールの本体が表示されます。メールに添付が
ある場合、その情報をメール本体のあとで見ることができます。添付がテキストの場合、
ページャ中で直接見ることができます。
</para>

<para>
概要を見やすく表示するため、ページャ中で異なったものを異なった色で表示するよう
にMutt を設定できます。URL、メールアドレス、スマイリーなど、正規表現で記述でき
るものは事実上すべてに色をつけることができます。
</para>

</sect2>

<sect2 id="intro-browser">
<title>ファイルブラウザ</title>

<para>
ファイルブラウザは、ローカルまたはリモートにあるファイルシステムへのインタフェース
です。オープンするためにメールボックスを選択する時、ブラウザは、項目整列順の変
更、正規表現による項目表示の制限、表示したいように表示形式を自由に変更できます。
また、メッセージに添付するため、(複数の)ファイルを選択する時や、複数のファイル
添付する時などにファイルシステム内を介した簡単な操作ができます。
</para>

<para>
いくつかのメールシステムは、他のメールフォルダ内にメールフォルダをネストできま
す。通常の、mutt 内にあるオープンエントリコマンドはメールフォルダをオープンす
るので、サブフォルダを見ることはできません。そのかわり、
<literal>&lt;descend-directory&gt;</literal>ファンクションを使うと、ディレクト
リ内に入ることが出来ますが、メールディレクトリとしてはオープンしません。
</para>

</sect2>

<sect2 id="intro-sidebar">
  <title>サイドバー</title>
  <para>
    サイドバーは、メールボックスの一覧を表示します。一覧表示はON/OFFでき、テー
    マを設定したり、一覧形式を設定したりできます。
  </para>
</sect2>

<sect2 id="intro-help">
<title>ヘルプ</title>

<para>
ヘルプ画面は利用者に簡単なヘルプを提供します。これには、現在のキーバインディン
グの設定状況と割り当てられているコマンド、簡単な説明、および、キーに割り当て慣
れなければならない現在未割り当てのファンクション付きでを一覧で表示します(代わ
りに Mutt のコマンドプロンプト経由で呼び出すこともができます)。
</para>

</sect2>

<sect2 id="intro-compose">
<title>編集メニュー</title>

<para>
編集メニューは、メッセージを実際にメールで送信する前に、重要な項目情報を含む分
割画面を提供します。これは、だれがどのようなメッセージを受け取るか(受信者がど
のようなコピーを受け取るか)が含まれています。さらに、メッセージに対してどのよ
うなキーを使って署名をするかどうか、暗号化するか、署名して暗号化するかというよ
うなセキュリティオプションを設定することもできます。そのほか、メッセージを添付
したり、メッセージそれ自身を含む任意の添付を再編集することにも使います。
</para>

</sect2>

<sect2 id="intro-alias">
<title>別名メニュー</title>

<para>
別名メニューは、メッセージの受信者を見つける手伝いをします。検索もできますので、
たくさんの人に連絡を取りたい場合、アドレスや名前を完全に覚えておく必要はありま
せん。別名メカニズムと別名メニューは、より短いニックネームや実際の別名を使う事で、いくつか
のアドレスをグルーピングする機能も提供します。そのため、個々の受信者を手動で選
択する必要はありません。
</para>

</sect2>

<sect2 id="intro-attach">
<title>添付メニュー</title>

<para>
あとで詳細は説明しますが、Mutt は 優れて安定した MIME の実装を備えているので、
任意の MIME タイプをつかうメッセージの送受信ができます。添付メニューはメッセー
ジの詳細構造を表示します:そこには、どのコンテンツパーツがどの親のパーツに添付
されているか(完全な木構造を表示)、どのタイプがどの種類で、どのくらいの大きさな
のかが表示されます。単一のパーツは保存、削除、変更でき、メッセージの内部に簡単
にアクセス出来ます。
</para>

</sect2>

</sect1>

<sect1 id="menus">
<title>メニュー内での移動</title>

<para>
もっとも重要な操作キーは、行又はエントリベースのメニューで共通で、
<xref linkend="tab-keys-nav-line"/>に記載してあり、ページベースのメニューについては
<xref linkend="tab-keys-nav-page"/> に記載してあります。
</para>

<table id="tab-keys-nav-line">
<title>エントリベースのメニューにおけるもっとも共通の操作キー</title>
<tgroup cols="3">
<thead>
<row><entry>キー</entry><entry>機能</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>j 又は&lt;Down&gt;</entry><entry><literal>&lt;next-entry&gt;</literal></entry><entry>次のエントリに移動</entry></row>
<row><entry>k 又は&lt;Up&gt;</entry><entry><literal>&lt;previous-entry&gt;</literal></entry><entry>前のエントリに移動</entry></row>
<row><entry>z 又は&lt;PageDn&gt;</entry><entry><literal>&lt;page-down&gt;</literal></entry><entry>次のページに移動</entry></row>
<row><entry>Z 又は&lt;PageUp&gt;</entry><entry><literal>&lt;page-up&gt;</literal></entry><entry>前のページに移動</entry></row>
<row><entry>= 又は&lt;Home&gt;</entry><entry><literal>&lt;first-entry&gt;</literal></entry><entry>最初のエントリに移動</entry></row>
<row><entry>* 又は&lt;End&gt;</entry><entry><literal>&lt;last-entry&gt;</literal></entry><entry>最後のエントリに移動</entry></row>
<row><entry>q</entry><entry><literal>&lt;quit&gt;</literal></entry><entry>現在のメニューを終了</entry></row>
<row><entry>?</entry><entry><literal>&lt;help&gt;</literal></entry><entry>現在のメニューにおけるキーバインド一覧を表示</entry></row>
</tbody>
</tgroup>
</table>

<table id="tab-keys-nav-page">
<title>ページベースのメニューにおけるもっとも共通の操作キー</title>
<tgroup cols="3">
<thead>
<row><entry>キー</entry><entry>機能</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>J 又は&lt;Return&gt;</entry><entry><literal>&lt;next-line&gt;</literal></entry><entry>1行スクロールダウン</entry></row>
<row><entry>&lt;Backspace&gt;</entry><entry><literal>&lt;previous-line&gt;</literal></entry><entry>1行スクロールアップ</entry></row>
<row><entry>K, &lt;Space&gt; 又は&lt;PageDn&gt;</entry><entry><literal>&lt;next-page&gt;</literal></entry><entry>次のページに移動</entry></row>
<row><entry>- 又は&lt;PageUp&gt;</entry><entry><literal>&lt;previous-page&gt;</literal></entry><entry>前のページに移動</entry></row>
<row><entry>&lt;Home&gt;</entry><entry><literal>&lt;top&gt;</literal></entry><entry>先頭に移動</entry></row>
<row><entry>&lt;End&gt;</entry><entry><literal>&lt;bottom&gt;</literal></entry><entry>末尾に移動</entry></row>
</tbody>
</tgroup>
</table>

</sect1>

<sect1 id="editing">
<title>入力フィールドの編集</title>

<sect2 id="editing-intro">
<title>イントロダクション</title>

<para>
Mutt はテキスト入力、たとえばメールアドレスやファイル名入力用に、ビルトイン行エディタを用意しています。
テキスト入力を操作するのに使われるキーは、Emacs のものと大変よく似ています。
有効な機能の完全一覧は<xref linkend="tab-keys-editor"/>を参照してください。そこには
規定のバインディングと簡単な説明が記載されています。
</para>

<table id="tab-keys-editor">
<title>もっとも共通の行エディタキー</title>
<tgroup cols="3">
<thead>
<row><entry>キー</entry><entry>機能</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>^A 又は &lt;Home&gt;</entry><entry><literal>&lt;bol&gt;</literal></entry><entry>行の先頭に移動</entry></row>
<row><entry>^B 又は &lt;Left&gt;</entry><entry><literal>&lt;backward-char&gt;</literal></entry><entry>1文字前に移動</entry></row>
<row><entry>Esc B</entry><entry><literal>&lt;backward-word&gt;</literal></entry><entry>1語前に移動</entry></row>
<row><entry>^D 又は &lt;Delete&gt;</entry><entry><literal>&lt;delete-char&gt;</literal></entry><entry>カーソル下の文字を削除</entry></row>
<row><entry>^E 又は &lt;End&gt;</entry><entry><literal>&lt;eol&gt;</literal></entry><entry>行末に移動</entry></row>
<row><entry>^F 又は &lt;Right&gt;</entry><entry><literal>&lt;forward-char&gt;</literal></entry><entry>1文字後ろに移動</entry></row>
<row><entry>Esc F</entry><entry><literal>&lt;forward-word&gt;</literal></entry><entry>1単語後ろに移動</entry></row>
<row><entry>&lt;Tab&gt;</entry><entry><literal>&lt;complete&gt;</literal></entry><entry>ファイル名、別名又はラベルを補完</entry></row>
<row><entry>^T</entry><entry><literal>&lt;complete-query&gt;</literal></entry><entry>問い合わせでアドレスを補完</entry></row>
<row><entry>^K</entry><entry><literal>&lt;kill-eol&gt;</literal></entry><entry>行末まで削除</entry></row>
<row><entry>Esc d</entry><entry><literal>&lt;kill-eow&gt;</literal></entry><entry>単語の終わりまで削除</entry></row>
<row><entry>^W</entry><entry><literal>&lt;kill-word&gt;</literal></entry><entry>カーソルの前の1語を消す</entry></row>
<row><entry>^U</entry><entry><literal>&lt;kill-line&gt;</literal></entry><entry>1行全体を削除</entry></row>
<row><entry>^V</entry><entry><literal>&lt;quote-char&gt;</literal></entry><entry>次に入力するキーに引用符をつける</entry></row>
<row><entry>&lt;Up&gt;</entry><entry><literal>&lt;history-up&gt;</literal></entry><entry>履歴から前の入力文字列を呼び出す</entry></row>
<row><entry>&lt;Down&gt;</entry><entry><literal>&lt;history-down&gt;</literal></entry><entry>履歴から次の入力文字列を呼び出す</entry></row>
<row><entry>^R</entry><entry><literal>&lt;history-search&gt;</literal></entry><entry>現在の入力を検索履歴に使う</entry></row>
<row><entry>&lt;BackSpace&gt;</entry><entry><literal>&lt;backspace&gt;</literal></entry><entry>カーソルの前の1文字を削除</entry></row>
<row><entry>Esc u</entry><entry><literal>&lt;upcase-word&gt;</literal></entry><entry>単語を大文字に変換</entry></row>
<row><entry>Esc l</entry><entry><literal>&lt;downcase-word&gt;</literal></entry><entry>単語を小文字に変換</entry></row>
<row><entry>Esc c</entry><entry><literal>&lt;capitalize-word&gt;</literal></entry><entry>単語の最初の文字を大文字に変換</entry></row>
<row><entry>^G</entry><entry>n/a</entry><entry>中止</entry></row>
<row><entry>&lt;Return&gt;</entry><entry>n/a</entry><entry>編集終了</entry></row>
</tbody>
</tgroup>
</table>

<para>
You can remap the <emphasis>editor</emphasis> 機能をリマップするためには
<link linkend="bind"><command>bind</command></link> コマンドを使います。たとえば、
&lt;Delete&gt; キーを押した時に、カーソル直下の文字ではなく、カーソルの前にある文字を削除するためには、
以下のように行います:
</para>

<screen>
bind editor &lt;delete&gt; backspace
</screen>

</sect2>

<sect2 id="editing-history">
<title>履歴</title>

<para>
Mutt はビルトインエディタ用に履歴を管理しています。項目の数は <link linkend="history">$history</link>
変数によって制御され、<link linkend="history-file">$history_file</link>と
<link linkend="save-history">$save_history</link>を使う事によって
指定された外部ファイルを使う事で恒久的にすることができます。
<literal>&lt;history-up&gt;</literal>または<literal>&lt;history-down&gt;</literal>
コマンドを使うことによって、エディタ中でそれらを循環させることができます。
Mutt は現在入力したテキストを循環ヒストリに記憶し、最初のエントリ行まで折り返します。
</para>

<para>
  Mutt はいくつかの異なる履歴リストを管理していて、それらは以下のカテゴリのようになっています:
</para>

<itemizedlist>
<listitem><para><literal>.muttrc</literal> コマンド</para></listitem>
<listitem><para>アドレスと別名</para></listitem>
<listitem><para>シェルコマンド</para></listitem>
<listitem><para>ファイル名</para></listitem>
<listitem><para>パターン</para></listitem>
<listitem><para>上記以外</para></listitem>
</itemizedlist>

<para>
Mutt は自動的に履歴から繰り返された項目を自動的にフィルタリングします。
<link linkend="history-remove-dups">$history_remove_dups</link> が設定されている場合、
すべての繰り返された項目はヒストリから削除されます。また、空白で始まる項目を無視する
ことで、いくつかのシェルの動作を模倣しています。後者の機能は、マクロで、履歴の貴重な
項目を不要なエントリで無駄にしないようにするために便利です。
</para>

</sect2>

</sect1>

<sect1 id="reading">
<title>メールを読む</title>

<para>
他の多くのメールクライアントと同様、Mutt ではメールを読むモードが二つあります。
第一のモードはメールボックス内のメッセージ一覧表示機能で、これは、Mutt では
<quote>インデックス</quote>メニューと呼びます。 第二のモードはメッセージの内容表示です。
これは<quote>ページャ</quote>と呼ばれています。
</para>

<para>
続く数節で、これらのモードそれぞれに提供されている機能を説明します。
</para>

<sect2 id="index-menu">
<title>メッセージインデックス</title>

<para>
インデックス内で、移動操作とメッセージの操作に使われる共通のキーは<xref linkend="tab-key-index"/>
にあります。インデックスメニュー中で、どのようにメッセージが表示されるかについては、
<link linkend="index-format">$index_format</link>変数を使う事でカスタマイズできます。
</para>

<table id="tab-key-index">
<title>もっとも共通的なメッセージインデックスキー</title>
<tgroup cols="2">
<thead>
<row><entry>キー</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>c</entry><entry>メールボックスを変更</entry></row>
<row><entry>Esc c</entry><entry>フォルダを読み出し専用モードに変更</entry></row>
<row><entry>C</entry><entry>現在のメッセージを他のメールボックスにコピー</entry></row>
<row><entry>Esc C</entry><entry>メッセージを復号化してフォルダにコピー</entry></row>
<row><entry>Esc s</entry><entry>メッセージを復号化してフォルダに保存</entry></row>
<row><entry>D</entry><entry>パターンに一致するメッセージを削除</entry></row>
<row><entry>d</entry><entry>現在のメッセージを削除</entry></row>
<row><entry>F</entry><entry>重要としてマーク</entry></row>
<row><entry>l</entry><entry>パターンに一致したメッセージを表示</entry></row>
<row><entry>N</entry><entry>メッセージを新規としてマーク</entry></row>
<row><entry>o</entry><entry>現在の整列方法を変更</entry></row>
<row><entry>O</entry><entry>メールボックスを逆順に整列</entry></row>
<row><entry>q</entry><entry>変更を保存して終了</entry></row>
<row><entry>s</entry><entry>メッセージを保存</entry></row>
<row><entry>T</entry><entry>パターンに一致するメッセージにタグ付け</entry></row>
<row><entry>t</entry><entry>メッセージのタグを反転</entry></row>
<row><entry>Esc t</entry><entry>全部のメッセージスレッド中のタグを反転</entry></row>
<row><entry>U</entry><entry>パターンに一致したメッセージをの削除状態を解除</entry></row>
<row><entry>u</entry><entry>メッセージの削除状態を解除</entry></row>
<row><entry>v</entry><entry>添付を表示</entry></row>
<row><entry>x</entry><entry>変更を中断して終了</entry></row>
<row><entry>&lt;Return&gt;</entry><entry>メッセージを表示</entry></row>
<row><entry>&lt;Tab&gt;</entry><entry>次の新規又は未読のメッセージに移動</entry></row>
<row><entry>@</entry><entry>差出人の完全なメールアドレスを表示</entry></row>
<row><entry>$</entry><entry>メールボックスに変更を保存</entry></row>
<row><entry>/</entry><entry>検索</entry></row>
<row><entry>Esc /</entry><entry>逆向き検索</entry></row>
<row><entry>^L</entry><entry>画面を消去して再描画</entry></row>
<row><entry>^T</entry><entry>パターンに一致したメッセージのタグを削除</entry></row>
</tbody>
</tgroup>
</table>

<para>
さらに、メッセージの送信者と題名に加えて、メッセージ番号の横には各メッセージに対する
処理の短い要約が表示されます。<xref linkend="tab-msg-status-flags"/> に説明がある、
0個以上の<quote>フラグ</quote>が表示され、そのうちのいくつかは、既定で
<quote>w</quote> と <quote>W</quote> にバインドされている、
<literal>&lt;set-flag&gt;</literal>と<literal>&lt;clear-flag&gt;</literal>
で、ON/OFFできます。
</para>

<para>
さらに、<xref linkend="tab-msg-recip-flags"/>中のフラグは、メッセージの宛先を反映しています。
</para>

<table id="tab-msg-status-flags">
<title>メッセージステータスフラグ</title>
<tgroup cols="2">
<thead>
<row><entry>フラグ</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>D</entry><entry>メッセージは削除された(削除マークがついている)</entry></row>
<row><entry>d</entry><entry>メッセージには削除予定の添付がある</entry></row>
<row><entry>K</entry><entry>PGP公開鍵を含んでいる</entry></row>
<row><entry>N</entry><entry>新規メッセージ</entry></row>
<row><entry>O</entry><entry>古いメッセージ</entry></row>
<row><entry>P</entry><entry>メッセージはPGPで暗号化されている</entry></row>
<row><entry>r</entry><entry>メッセージは返信済み</entry></row>
<row><entry>S</entry><entry>メッセージは署名されていて、署名は正しく検証された</entry></row>
<row><entry>s</entry><entry>メッセージは署名されている</entry></row>
<row><entry>!</entry><entry>メッセージにはフラグがついている</entry></row>
<row><entry>*</entry><entry>メッセージはタグづけられている</entry></row>
<row><entry>n</entry><entry>スレッドには新しいメッセージがある(折りたたまれている場合)</entry></row>
<row><entry>o</entry><entry>スレッドには古いメッセージがある(折りたたまれている場合)</entry></row>
</tbody>
</tgroup>
</table>

<table id="tab-msg-recip-flags">
<title>メッセージ受信フラグ</title>
<tgroup cols="2">
<thead>
<row><entry>フラグ</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>+</entry><entry>メッセージは自分宛だけに送られている</entry></row>
<row><entry>T</entry><entry>メッセージは自分宛だが、他の人にも Cc かその他で送られている</entry></row>
<row><entry>C</entry><entry>メッセージは Cc で自分に送られている</entry></row>
<row><entry>F</entry><entry>メッセージは自分からのものである</entry></row>
<row><entry>L</entry><entry>メッセージは購読されたメーリングリストに送られている</entry></row>
</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="pager-menu">
<title>ページャ</title>

<para>
既定値では、Mutt はメッセージの内容を表示するのに、内蔵のページャを使います(たとえば
<literal>less(1)</literal>のような外部のページャも設定することができます。詳しくは、
<link linkend="pager">$pager</link> 変数を参照してください。)ページャは あまり機能的では
ありませんが、Unix のプログラム<literal>less(1)</literal>と大変よく似ています。
</para>

<table id="tab-key-pager">
<title>もっとも共通的なページャのキー</title>
<tgroup cols="2">
<thead>
<row><entry>キー</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>&lt;Return&gt;</entry><entry>1行下に移動</entry></row>
<row><entry>&lt;Space&gt;</entry><entry>次のページを表示(又はメッセージの終端だった場合には次のメッセージ)</entry></row>
<row><entry>-</entry><entry>前のページに移動</entry></row>
<row><entry>n</entry><entry>次に一致する部分を検索</entry></row>
<row><entry>S</entry><entry>引用文を飛ばす</entry></row>
<row><entry>T</entry><entry>引用分の表示をON/OFF</entry></row>
<row><entry>?</entry><entry>キーバインディングを表示</entry></row>
<row><entry>/</entry><entry>正規表現による検索</entry></row>
<row><entry>Esc /</entry><entry>正規表現による逆方向の検索</entry></row>
<row><entry>\</entry><entry>検索結果のハイライトをON/OFF</entry></row>
<row><entry>^</entry><entry>メッセージの先頭に移動</entry></row>
</tbody>
</tgroup>
</table>

<para>
<xref linkend="tab-key-pager"/>中にあるキーバインディングに加え、インデックスメニュー
での多くの機能、たとえば<literal>&lt;delete-message&gt;</literal> や
<literal>&lt;copy-message&gt;</literal>(これはメッセージを外部ビューワで
表示するよりも優位な点の1つ)がページャでも有効です。
</para>

<para>
また、内部ページャはさらにいくつかの高度な機能をサポートしています。そのうちの1つは
太字と下線に対する<quote>標準</quote>シーケンスを処理できるということです。
シーケンスは連続で、文字、バックスペース(<quote>^H</quote>)、同じ文字なら太字、
文字、バックスペース、<quote>_</quote>ならば下線付き文字です。Mutt はターミナルがサポート
している場合、それぞれ太字と下線付き文字で表示しようとします。サポートされていない場合は
太字と下線は<link linkend="color">color</link> のオブジェクトを使って、<command>色</command>
か、白黒属性を指定できます。
</para>

<para>
さらに、内部ページャは ANSI エスケープシーケンスの文字属性をサポートしています。Mutt はそれを
正しい色と文字設定に解釈します。Mutt がサポートしているシーケンスは以下の通りです:
</para>

<screen>
\e[<emphasis>Ps</emphasis>;<emphasis>Ps</emphasis>;..<emphasis>Ps</emphasis>;m
</screen>

<para>
ここで<emphasis>Ps</emphasis>は以下の<xref linkend="tab-ansi-esc"/>に示されているコードのどれかです。
</para>

<table id="tab-ansi-esc">
<title>ANSI エスケープシーケンス</title>
<tgroup cols="2">
<thead>
<row><entry>エスケープコード</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>0</entry><entry>全属性削除</entry></row>
<row><entry>1</entry><entry>太字をON</entry></row>
<row><entry>4</entry><entry>下線をON</entry></row>
<row><entry>5</entry><entry>点滅をON</entry></row>
<row><entry>7</entry><entry>反転表示をON</entry></row>
<row><entry>3<emphasis>&lt;color&gt;</emphasis></entry><entry>前景色を<emphasis>&lt;color&gt;</emphasis> (<xref linkend="tab-color"/>を参照)</entry></row>
<row><entry>4<emphasis>&lt;color&gt;</emphasis></entry><entry>背景色を<emphasis>&lt;color&gt;</emphasis> (<xref linkend="tab-color"/>を参照)</entry></row>
</tbody>
</tgroup>
</table>

<table id="tab-color">
<title>カラーシーケンス</title>
<tgroup cols="2">
<thead>
<row><entry>カラーコード</entry><entry>色</entry></row>
</thead>
<tbody>
<row><entry>0</entry><entry>黒</entry></row>
<row><entry>1</entry><entry>赤</entry></row>
<row><entry>2</entry><entry>緑</entry></row>
<row><entry>3</entry><entry>黄色</entry></row>
<row><entry>4</entry><entry>青</entry></row>
<row><entry>5</entry><entry>マゼンタ</entry></row>
<row><entry>6</entry><entry>シアン</entry></row>
<row><entry>7</entry><entry>白</entry></row>
</tbody>
</tgroup>
</table>

<para>
Mutt はこれらの属性を<literal>text/enriched</literal>メッセージのハンドリングに使い、
外部の<link linkend="auto-view">autoview</link> スクリプトに、ハイライティングを
行う目的でも使う事もあります。
</para>

<note>
<para>
使用するディスプレイに合わせて色を変更した場合、たとえば、xterm で color2 に割り当てられている
色を変更した場合、緑色の代わりにその色が使われます。
</para>
</note>

<note>
<para>
ページャ中の検索コマンドは正規表現が使えますが、インデックス中で使われる検索コマンドで使われる
<link linkend="patterns">パターン</link>よりも少し複雑で、全く同じではないことに注意してください。
これは、ページャが選択されたメッセージをすでに表示されているのに対し、パターンは基準によって
メッセージを選択するために使われるからです。
</para>
</note>

</sect2>

<sect2 id="threads">
<title>スレッドモード</title>

<para>
いわゆる<quote>スレッド</quote>は、返信がその元メッセージにリンクされたメッセージの階層構造を
提供します。この組織化された形式は、議論の異なった部分が分岐しているメーリングリストでは特に
有用です。Mutt は木構造でスレッドを表示します。
</para>

<para>
Mutt では、メールボックスが<emphasis>スレッド</emphasis>によって<link linkend="sort">整列</link>
されている場合、<emphasis>インデックス</emphasis>と<emphasis>ページャ</emphasis>モードにおいて、
<xref linkend="tab-key-threads"/>に示すような形で、いくつか追加の機能が利用できます。
</para>

<table id="tab-key-threads">
<title>もっとも一般的なスレッドモードのキー</title>
<tgroup cols="3">
<thead>
<row><entry>Key</entry><entry>Function</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>^D</entry><entry><literal>&lt;delete-thread&gt;</literal></entry><entry>現在のスレッド中ですべてのメッセージを削除</entry></row>
<row><entry>^U</entry><entry><literal>&lt;undelete-thread&gt;</literal></entry><entry>現在のスレッド中ですべてのメッセージの削除を取り消し</entry></row>
<row><entry>^N</entry><entry><literal>&lt;next-thread&gt;</literal></entry><entry>次のスレッドの始点に飛ぶ</entry></row>
<row><entry>^P</entry><entry><literal>&lt;previous-thread&gt;</literal></entry><entry>前のスレッドの始点に飛ぶ</entry></row>
<row><entry>^R</entry><entry><literal>&lt;read-thread&gt;</literal></entry><entry>現在のスレッドを既読にする</entry></row>
<row><entry>Esc d</entry><entry><literal>&lt;delete-subthread&gt;</literal></entry><entry>現在のサブスレッド中のすべてのメッセージを削除する</entry></row>
<row><entry>Esc u</entry><entry><literal>&lt;undelete-subthread&gt;</literal></entry><entry>現在のサブスレッド中のすべてのメッセージの削除を取り消し</entry></row>
<row><entry>Esc n</entry><entry><literal>&lt;next-subthread&gt;</literal></entry><entry>次のサブスレッドの始点に移動</entry></row>
<row><entry>Esc p</entry><entry><literal>&lt;previous-subthread&gt;</literal></entry><entry>前のサブスレッドの始点に移動</entry></row>
<row><entry>Esc r</entry><entry><literal>&lt;read-subthread&gt;</literal></entry><entry>現在のサブスレッドを既読にする</entry></row>
<row><entry>Esc t</entry><entry><literal>&lt;tag-thread&gt;</literal></entry><entry>現在のスレッド上のタグをON/OFF</entry></row>
<row><entry>Esc v</entry><entry><literal>&lt;collapse-thread&gt;</literal></entry><entry>現在のスレッドの折りたたみをON/OFF</entry></row>
<row><entry>Esc V</entry><entry><literal>&lt;collapse-all&gt;</literal></entry><entry>すべてのスレッドの折りたたみをON/OFF</entry></row>
<row><entry>P</entry><entry><literal>&lt;parent-message&gt;</literal></entry><entry>スレッド中の親メッセージに移動</entry></row>
</tbody>
</tgroup>
</table>

<para>
<emphasis>インデックス</emphasis>中では、スレッドの子メッセージの題名には先頭にスレッドの
木構造を表す文字が付きます。既定値では、 <link linkend="hide-thread-subject">$hide_thread_subject</link>
が設定されていない限り、題名自身は複製されません。スレッドに付加される特別な文字の詳細は、
<xref linkend="tab-thread-chars"/>にあります。
</para>

<table id="tab-thread-chars">
  <title>特別なスレッド中の文字</title>
  <tgroup cols="3">
    <thead>
      <row>
        <entry>文字</entry>
        <entry>説明</entry>
        <entry>備考</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>&amp;</entry>
        <entry>メッセージを隠す</entry>
        <entry><link linkend="hide-limited">$hide_limited</link> と
        <link linkend="hide-top-limited">$hide_top_limited</link>を参照</entry>
      </row>
      <row>
        <entry>?</entry>
        <entry>missing message</entry>
        <entry><link linkend="hide-missing">$hide_missing</link> と
        <link linkend="hide-top-missing">$hide_top_missing</link>を参照</entry>
      </row>
      <row>
        <entry>*</entry>
        <entry>pseudo thread</entry>
        <entry><link linkend="strict-threads">$strict_threads</link>を参照;
        <link linkend="narrow-tree">$narrow_tree</link>が設定されている場合表示されない</entry>
      </row>
      <row>
        <entry>=</entry>
        <entry>スレッドの複製</entry>
        <entry><link linkend="duplicate-threads">$duplicate_threads</link>を参照;
        <link linkend="narrow-tree">$narrow_tree</link>が設定されている場合表示されない</entry>
      </row>
    </tbody>
  </tgroup>
</table>

<para>
折りたたまれているスレッドではスレッド中の最初のメッセージのみ表示し、その他は隠します。
これは、スレッドにたくさんのメッセージがあり、画面にはわずかなスレッドしか表示されない
場合に便利です。<link linkend="index-format">$index_format</link>の %M を参照してくださ
い。たとえば、スレッドが折りたたまれている時に、隠されているメッセージの数を表示するため
<link linkend="index-format">$index_format</link>に <quote>%?M?(#%03M)&amp;(%4l)?</quote>
という設定を使う事ができます。
<literal>%?&lt;char&gt;?&lt;if-part&gt;&amp;&lt;else-part&gt;?</literal>
という文法の詳細は、<link linkend="formatstrings-conditionals">format string conditionals</link>
に説明があります。
</para>

<para>
技術的には、すべての返信にはスレッドツリー中の親メッセージのリストが含まれているべき
ですが、必ずしもすべてがそうとは限りません。そのような場合、Mutt は
<link linkend="strict-threads">$strict_threads</link>変数を使って制御できる題名に
よってグループ化を行います。
</para>

</sect2>

<sect2 id="reading-misc">
<title>その他の機能</title>

<para>
さらに、<emphasis>インデックス</emphasis> と
<emphasis>ページャ</emphasis> メニューにはいくつかの興味深い機能があります:
</para>

<variablelist>

<varlistentry>
<term>
<literal>&lt;check-stats&gt;</literal><anchor id="check-stats"/>
</term>
<listitem>
<para>
<command>mailboxes</command> コマンドを使って宣言された、すべての監視対象
メールボックスに対する統計情報を計算します。これは、
<link linkend="mail-check-stats">$mail_check_stats</link>が未設定でも
統計情報を計算します。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;create-alias&gt;</literal><anchor id="create-alias"/>
(既定値: a)
</term>
<listitem>
<para>
現在のメッセージ(あるいうは新規プロンプト)をもとに、新しい別名を作成します。
編集を終えると、<link linkend="alias"><command>alias</command></link>
コマンドが<link linkend="alias-file">$alias_file</link>によって指定された
ファイルに、あとで使うために追加されます。
</para>

<note>
<para>
Mutt は開始時以降は<link linkend="alias-file">$alias_file</link> を読み込みません。
そのため、ファイルは<link linkend="source"><command>source</command></link>
を使って明示的に読み込む必要があります。
</para>
</note>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;check-traditional-pgp&gt;</literal><anchor
id="check-traditional-pgp"/> (既定値: Esc P)
</term>
<listitem>
<para>
この機能は、現在のメッセージを調べ、<quote>従来の</quote>方法で PGP による
署名または暗号化が行われている内容を検索します。すなわち、 MIME タグがない
場合のことです。技術的には、この機能は PGP データが含まれているボデイパートの
MIME content type を一時的に変更します。すなわち、
<link linkend="edit-type"><literal>&lt;edit-type&gt;</literal></link>
機能の効果と似ています。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;edit&gt;</literal><anchor id="edit"/> (既定値: e)
</term>
<listitem>
<para>
このコマンド(インデックスとページャで有効)は、現在のメッセージを、
メールフォルダ中にあるままの形で、そのまま編集します。編集を終えると、
変更されたメッセージは現在のフォルダに追加され、オリジナルのメッセージには
削除フラグがつけられます。メッセージが変更されなかった場合には置き換えは
行われません。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;edit-type&gt;</literal><anchor id="edit-type"/> (既定値:
添付メニュー、ページャ、インデックスメニューでは ^E ; 編集メニューでは ^T)
</term>
<listitem>
<para>
このコマンドは添付の content type を一時的に編集し、修正するのに使います。
たとえば、間違った文字セットパラメータなどを直す時などです。インデックスか
ページャから使うと、最上位の添付ファイルの content type を修正できます。
<link linkend="attach-menu">添付メニュー</link>から使う場合には、どの添付ファイルの
content type も修正できます。この変更は恒久的なものではなく、フォルダを変更すると
消えてしまいます。
</para>

<para>
このコマンドは<link linkend="compose-menu">編集メニュー</link>でも使えることに
注意してください。その場合、送信使用としている添付ファイルの属性を微調整するのに
使います。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;enter-command&gt;</literal><anchor id="enter-command"/>
(既定値: <quote>:</quote>)
</term>
<listitem>
<para>
このコマンドは通常設定ファイル中に記述するコマンドを実行するのに使います。
一般的な使い方としては、変数の設定を確認したり、<link linkend="macro">macros</link>
と組み合わせて、動作中に設定を変更するのに使います。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;extract-keys&gt;</literal><anchor id="extract-keys"/>
(既定値: ^K)
</term>
<listitem>
<para>
このコマンドは PGP 公開鍵を、現在またはタグづけられたメッセージから
抽出して自分の PGP 公開鍵キーリングに追加します。 
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;forget-passphrase&gt;</literal><anchor
id="forget-passphrase"/> (既定値: ^F)
</term>
<listitem>
<para>
このコマンドはパスフレーズをメモリから削除します。パスフレーズを間違って
入力した時に使います。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;list-reply&gt;</literal><anchor id="list-reply"/> (既定値:L)
</term>
<listitem>
<para>
<link linkend="lists"><command>lists</command> または
<command>subscribe</command></link> コマンドを使って得られた、
正規表現に一致するアドレスから抽出された、現在またはタグづけられたメッセージに
返信します。それだけではなく、もし、
<link linkend="honor-followup-to">$honor_followup_to</link> 変数が設定で
有効になっている場合、<literal>Mail-Followup-To</literal> ヘッダを信用します。
さらに、<literal>List-Post</literal> ヘッダフィールドが、
メーリングリストアドレスとして、<literal>mailto:</literal> URL が
指定された場合に検査されます。
メーリングリストに投稿されたメッセージに返信する時にこれを使うと、
返信する元メッセージの送信者とメーリングリストへ二重に送信するのを避ける助けになります。 
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;pipe-message&gt;</literal><anchor id="pipe-message"/>
(既定値: |)
</term>
<listitem>
<para>
外部 Unix コマンドの入力を要求し、現在又はタグづけられたメッセージをそこにパイプします。
変数
<link linkend="pipe-decode">$pipe_decode</link>,
<link linkend="pipe-split">$pipe_split</link>,
<link linkend="pipe-sep">$pipe_sep</link> と
<link linkend="wait-key">$wait_key</link> はこの機能の正確な動作を制御します。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;resend-message&gt;</literal><anchor id="resend-message"/>
(既定値: Esc e)
</term>
<listitem>
<para>
resend-message を使うと、Mutt は現在のメッセージを雛型として新しいメッセージを作成します。
この機能は "任意のフォルダの復元" と説明するのが最適でしょう。MIME メッセージを、
もともとのメール構造を保ったまま転送するのに便利です。このときに含まれるへッダは 
<link linkend="weed">$weed</link> 変数の値に依存していることに注意してください。
</para>

<para>
この機能は添付メニューからも利用できます。これを使えば<literal>message/rfc822</literal>
ボディパートとして転送されてきたメッセージを簡単に再送できます。 
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;shell-escape&gt;</literal><anchor id="shell-escape"/>
(既定値: !)
</term>
<listitem>
<para>
外部 Unix コマンドの入力を要求し、それを実行します。
<link linkend="wait-key">$wait_key</link> を使って、コマンドが終了したときに
(おそらくコマンドの出力をユーザが読めるようにするため)、Mutt が何か
キーが押されるまで 待つかどうかをコマンドの戻り値で制御するようにできます。
コマンドが指定されなかった場合は、シェルが起動します。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;toggle-quoted&gt;</literal><anchor id="toggle-quoted"/>
(既定値: T)
</term>
<listitem>
<para>
ページャは、メッセージの本文を表示する時に、
<link linkend="quote-regexp">$quote_regexp</link>変数を使って引用文を
検出します。この機能は、メッセージ中の引用部分を表示するかどうかを切り替えます。
特に、返事だけに興味があるのに大量の引用文があって邪魔だというようなときに役に立ちます。 
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;skip-quoted&gt;</literal><anchor id="skip-quoted"/>
(既定値: S)
</term>
<listitem>
<para>
この機能は内部ページャにおいて、引用文の行のあとの非引用文の行に移動します。
</para>
</listitem>
</varlistentry>

</variablelist>

</sect2>

</sect1>

<sect1 id="sending">
<title>メールの送信</title>

<sect2 id="sending-intro">
<title>イントロダクション</title>

<para>
<xref linkend="tab-key-send"/>に記載のあるバインディングは、<emphasis>インデックス</emphasis> と
<emphasis>ページャ</emphasis>で新しくメッセージを書き始める時に有効です。
</para>

<table id="tab-key-send">
<title>もっとも一般的なメール送信キー</title>
<tgroup cols="3">
<thead>
<row><entry>キー</entry><entry>機能</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>m</entry><entry><literal>&lt;compose&gt;</literal></entry><entry>新規メッセージを作成</entry></row>
<row><entry>r</entry><entry><literal>&lt;reply&gt;</literal></entry><entry>送信者に返信</entry></row>
<row><entry>g</entry><entry><literal>&lt;group-reply&gt;</literal></entry><entry>受信者全員に返信</entry></row>
<row><entry></entry><entry><literal>&lt;group-chat-reply&gt;</literal></entry><entry>To/Cc を保持して、すべての受信者に返信</entry></row>
<row><entry>L</entry><entry><literal>&lt;list-reply&gt;</literal></entry><entry>メーリングリストのアドレスに返信</entry></row>
<row><entry>f</entry><entry><literal>&lt;forward&gt;</literal></entry><entry>メッセージを転送</entry></row>
<row><entry>b</entry><entry><literal>&lt;bounce&gt;</literal></entry><entry>メッセージを中継(再送)</entry></row>
<row><entry>Esc k</entry><entry><literal>&lt;mail-key&gt;</literal></entry><entry>誰かに PGP 公開鍵を送信</entry></row>
</tbody>
</tgroup>
</table>

<para>
<emphasis>メッセージの中継(Bouncing)</emphasis> は、指定した受信者に、メッセージをそのまま送信します。
<emphasis>メッセージの転送(Forwarding)</emphasis>は、転送する時に、メッセージにコメントをつけたり、
編集したりできます。これらにつては、次の節
<quote><link linkend="forwarding-mail">メールの転送と中継</link>でより詳細に説明します。</quote>
</para>

<para>
上記のコマンドを使うと Mutt は<emphasis>compose</emphasis>メニューに入り、
<quote>To:</quote>ヘッダフィールドに入れる宛先の入力を促します。
<literal>m</literal>キーを押すと、新規メッセージの作成を開始します。
次に、メッセージの<quote>Subject:</quote>フィールドを聞いてきますが、
メッセージの返信や転送の際には既定値が入っています。送信者、題名とセキュリティ
設定を、実際にメッセージを送信する前に再度修正することはできます。
Mutt がどのように質問するかを変更するについては、
<link linkend="askcc">$askcc</link>, <link linkend="askbcc">$askbcc</link>,
<link linkend="autoedit">$autoedit</link>, <link linkend="bounce">$bounce</link>,
<link linkend="fast-reply">$fast_reply</link> と <link linkend="include">$include</link>
を参照してください。
</para>

<para>
返信する場合、Mutt は、返信するタイプによって、それらのフィールドに適切な値を入れます。
サポートしている返信のタイプは以下の通りです:
</para>

<variablelist>
<varlistentry>
<term>単純な返信</term>
<listitem>
<para>
送信者に直接返信。  
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>グループ返信</term>
<listitem>
<para>
送信者、cc に指定してあるすべての受信者に返信;
<link linkend="alternates"><command>alternates</command></link>を確認し、
自分自身を除外します。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>グループチャット返信</term>
<listitem>
<para>
To リスト中の、送信者と他の受信者に返信します。 Cc リスト中の受信者には
Cc で送信します。<link linkend="alternates"><command>alternates</command></link>
を考慮し、自分自身は除外します。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>リストへの返信</term>
<listitem>
<para>
設定で指定されたものあるいは自動検出した、見つかったメーリングリストアドレスすべてに返信します。
詳細は、<xref linkend="lists"/>を参照してください。
</para>
</listitem>
</varlistentry>
</variablelist>

<para>
新しいメッセージへ、転送または返信の受信者が決まったら、Mutt は自動的にメッセージ本文に
対して<link linkend="editor">$editor</link> を起動します。
<link linkend="edit-headers">$edit_headers</link>変数が設定されている場合には、メッセージ
本文の一番はじめの所にヘッダも含まれます。ヘッダの最後の行のあとに空白行と改行が来た
その後から始まる必要があります。返信するメッセージは整列順に追加され、適切な
<link linkend="attribution">$attribution</link>,
<link linkend="indent-string">$indent_string</link> と
<link linkend="post-indent-string">$post_indent_string</link> が付きます。
メッセージ転送の場合、<link linkend="mime-forward">$mime_forward</link>
変数が設定されていないと、転送するメッセージのコピーが本文に取り込まれます。
<link linkend="signature">$signature</link>が指定されていれば、メッセージに
そのファイルが追加されます。
</para>

<para>
メール本文の修正完了後は <emphasis>compose</emphasis>メニューに戻ります。
<xref linkend="tab-func-compose"/>にある選択肢で、再編集、送信または一時保存を選べます。
</para>

<table id="tab-func-compose">
<title>もっとも一般的な編集メニューキー</title>
<tgroup cols="3">
<thead>
<row><entry>キー</entry><entry>機能</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>a</entry><entry><literal>&lt;attach-file&gt;</literal></entry><entry>ファイルの添付</entry></row>
<row><entry>A</entry><entry><literal>&lt;attach-message&gt;</literal></entry><entry>メッセージにメッセージを添付</entry></row>
<row><entry>Esc k</entry><entry><literal>&lt;attach-key&gt;</literal></entry><entry>PGP 公開鍵を添付</entry></row>
<row><entry>d</entry><entry><literal>&lt;edit-description&gt;</literal></entry><entry>添付の説明を編集</entry></row>
<row><entry>D</entry><entry><literal>&lt;detach-file&gt;</literal></entry><entry>添付ファルを外す</entry></row>
<row><entry>t</entry><entry><literal>&lt;edit-to&gt;</literal></entry><entry>To フィールドを編集</entry></row>
<row><entry>Esc f</entry><entry><literal>&lt;edit-from&gt;</literal></entry><entry>From フィールドを編集</entry></row>
<row><entry>r</entry><entry><literal>&lt;edit-reply-to&gt;</literal></entry><entry>Reply-To フィールドを編集</entry></row>
<row><entry>c</entry><entry><literal>&lt;edit-cc&gt;</literal></entry><entry>Cc フィールドを編集</entry></row>
<row><entry>b</entry><entry><literal>&lt;edit-bcc&gt;</literal></entry><entry>フィールドを編集</entry></row>
<row><entry>y</entry><entry><literal>&lt;send-message&gt;</literal></entry><entry>メッセージを送信</entry></row>
<row><entry>s</entry><entry><literal>&lt;edit-subject&gt;</literal></entry><entry>題名を編集</entry></row>
<row><entry>S</entry><entry><literal>&lt;smime-menu&gt;</literal></entry><entry>S/MIME オプションを選択</entry></row>
<row><entry>f</entry><entry><literal>&lt;edit-fcc&gt;</literal></entry><entry><quote>Fcc</quote> メールボックスを指定</entry></row>
<row><entry>p</entry><entry><literal>&lt;pgp-menu&gt;</literal></entry><entry>PGP オプションを選択</entry></row>
<row><entry>P</entry><entry><literal>&lt;postpone-message&gt;</literal></entry><entry>あとで使うためメッセージを一時保存</entry></row>
<row><entry>q</entry><entry><literal>&lt;quit&gt;</literal></entry><entry>メッセージの送信を中断(中止)</entry></row>
<row><entry>w</entry><entry><literal>&lt;write-fcc&gt;</literal></entry><entry>フォルダにメッセージを書き込む</entry></row>
<row><entry>i</entry><entry><literal>&lt;ispell&gt;</literal></entry><entry>スペルチェック(システムで有効な場合)</entry></row>
<row><entry>^F</entry><entry><literal>&lt;forget-passphrase&gt;</literal></entry><entry>メモリからパスフレーズを削除</entry></row>
</tbody>
</tgroup>
</table>

<para>
編集メニューは、ファイルまたは他のメッセージからなる添付の編集にも使えます。
<literal>&lt;attach-message&gt;</literal>機能はを使うと、メッセージを添付するフォルダを指定するプロ
ンプトが表示されます。そのフォルダでメッセージにタグをつけると送信するメッセージにそれらが添付されま
す。
</para>

<note>
<para>
そのフォルダにいる場合には、新しいメールの作成、返信、転送などのようないくつかの操作ができないことに
注意してください。<link linkend="status-format">$status_format</link> 中の %r が <quote>A</quote>
になると、添付メッセージモードにいることを表示します。
</para>
</note>

<para>
<literal>&lt;send-message&gt;</literal>経由で編集メニューを終了したあと、メッセージが送信されます。
設定されてそれが有効な場合、
<link linkend="sending-mixmaster">mixmaster</link>または
<link linkend="smtp">$smtp_url</link> 経由で行うことができます。
それ以外では、<link linkend="sendmail">$sendmail</link> が起動されます。
バージョン 1.13 より前では、Mutt は既定値で<link linkend="write-bcc">$write_bcc</link>を
有効にしていて、MTA が自動的に<literal>Bcc:</literal>ヘッダを配信の一部として削除することを
仮定しています。1.13からは、オプションは既定値では設定されませんが、メッセージの fcc コピーにはもは
や何も影響しません。
</para>

</sect2>

<sect2 id="edit-header">
<title>メッセージヘッダの編集</title>

<para>
<link linkend="edit-headers">$edit_headers</link> が設定されているためヘッダを編集する場合、
送信メッセージには含まれませんが、特別な Mutt の動作を起動する、いくつかの疑似ヘッダが利用
可能です。  
</para>

<sect3 id="fcc-header">
<title>Fcc: 疑似ヘッダ</title>

<para>
<literal>Fcc:</literal> <emphasis>ファイル名</emphasis>
</para>

<para>
をヘッダとして指定すると、Mutt は<emphasis>compose</emphasis>メニュー中で
<literal>&lt;edit-fcc&gt;</literal>機能を使ったと同じように、
<emphasis>ファイル名</emphasis>を扱います。
</para>

</sect3>

<sect3 id="attach-header">
<title>Attach: 疑似ヘッダ</title>

<para>
以下のように指定することで、メッセージにファイルを添付できます。
</para>

<para>
<literal>Attach:</literal> <emphasis>ファイル名</emphasis>
[ <emphasis>説明</emphasis> ]
</para>

<para>
ここで、<emphasis>ファル名</emphasis>は添付されるファイルで、
<emphasis>説明</emphasis>は添付ファイルの説明として使う、オプションの文字列です。
ファイル名中の空白は、バックスラッシュ(<quote>\</quote>)を使う事でエスケープできます。
ファイルは編集メニューから追加するように削除できます。
</para>

</sect3>

<sect3 id="pgp-header">
<title>Pgp: 疑似ヘッダ</title>

<para>
PGP を使いたい場合、以下のように指定します。
</para>

<para>
<literal>Pgp:</literal> [ <literal>E</literal> | <literal>S</literal> | <literal>S</literal><emphasis>&lt;id&gt;</emphasis> ]

</para>

<para>
<quote>E</quote> は暗号化、<quote>S</quote> は署名、そして
<quote>S&lt;id&gt;</quote> は指定されたキーで署名します。
<link linkend="pgp-sign-as">$pgp_sign_as</link> を設定すれば、鍵は恒久的になります。
選択した項目は編集メニューであとで変更できます。
</para>

</sect3>

<sect3 id="in-reply-to-header">
<title>In-Reply-To: ヘッダ</title>

<para>
メッセージに返信する場合、<emphasis>In-Reply-To:</emphasis>ヘッダには
返信したいメールのメッセージ ID が含まれています。この値を削除したり変更した
場合は、Mutt は、たとえば、メーリングリストのアドレスを入力せずに、メーリング
リスト向けの新しいメッセージを作成するような、新しいメッセージスレッドを作成する、
<emphasis>References:</emphasis>フィールドを作成しません。
</para>

<para>
返信時に新しいスレッドを開始したい時には、エディタ中で<emphasis>In-Reply-To:</emphasis>
を確実に取り去ってください。そうでないと、技術的に有効な返信とは言え、
ネチケットに口うるさい誰かには、いわゆる<quote>thread hijacking</quote>
で迷惑を被るかもしれません。
</para>

</sect3>

</sect2>

<sect2 id="sending-crypto">
<title>暗号化機能を使った、署名/暗号化したメールの送信</title>

<para>
Mutt で PGP または S/MIME でメッセージの暗号化を行う場合、メッセージを
送ろうとする時には、Mutt は鍵選択プロセス中で処理のガイドを行います。
Mutt は メッセージ受信者のメールアドレスに一致する認証されたユーザ ID を
持つ鍵について、何ら問い合わせません。しかし、複数の鍵があったり、
認証されたユーザ ID フィールドが弱かったり、一致する鍵が見つからなかったり
する場合があります。
</para>

<para>
このような場合、鍵の一覧メニューに移行し、その中から鍵を選ぶことができます。
このメニューを終了するか、一致する鍵がなかった場合には、ユーザ ID の入力が
要求されます。通常と同じように、<literal>^G</literal>を使って、この入力待ち
状態を中止できます。そうすると、Mutt は編集画面に戻ります。
</para>

<para>
鍵の選択が正しく終了すると、メッセージは 選択した公開鍵を使って暗号化され
送信されます。
</para>

<para>
送信した暗号化メッセージを見られるようにするためには、PGP では
<link linkend="pgp-self-encrypt">$pgp_self_encrypt</link> と
<link linkend="pgp-default-key">$pgp_default_key</link>を、S/MIME では
<link linkend="smime-default-key">$smime_default_key</link>を
設定してください。
</para>

<para>
鍵選択メニュー(<link linkend="pgp-entry-format">$pgp_entry_format</link>
を参照)中の、エントリのほとんどのフィールドは、明確な意味を持っています。
しかし、ケーパビリティ、フラグと有効性のフィールドについては説明が必要でしょう。
</para>

<para>
フラグシーケンス(<quote>%f</quote>) は<xref linkend="tab-pgp-menuflags"/>中の
フラグのどれかに展開されます。
</para>

<table id="tab-pgp-menuflags">
<title>PGP 鍵メニューのフラグ</title>
<tgroup cols="2">
<thead>
<row><entry>フラグ</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>R</entry><entry>鍵は破棄されていて使えない。</entry></row>
<row><entry>X</entry><entry>鍵は期限切れになっており、使えない。</entry></row>
<row><entry>d</entry><entry>自分で鍵を使用不可に印付けた。</entry></row>
<row><entry>c</entry><entry>未知の重要な自己署名パケットがある。</entry></row>
</tbody>
</tgroup>
</table>

<para>
ケーパビリティフィールド(<quote>%c</quote>)は、鍵のケーパビリティを表す
2文字の並びに展開されます。最初の文字は鍵の暗号化ケーパビリティです。
マイナス記号(<quote>-</quote>)は、鍵が暗号化に使えないという意味です。
ドット(<quote>.</quote>)は、いずれかのユーザ ID の署名鍵としてマーク
されているけれど、暗号化にも使えるという意味です。文字<quote>e</quote>は、
このキーが暗号化に使えるという意味です。
</para>

<para>
2番目の文字は鍵の署名ケーパビリティを示しています。こちらもやはり、
<quote>-</quote>は<quote>署名用ではない</quote>ことを意味し、<quote>.</quote>
は鍵があるユーザ ID の暗号化鍵としてマークされていることを意味し、
<quote>s</quote>は署名用に使えるという意味です。

</para>

<para>
最後に、信用度フィールド(<quote>%t</quote>)は、ユーザID がどれほどしっかり
検証されているかを示します。疑問符(<quote>?</quote>)は信用度が未定義で、
マイナス文字(<quote>-</quote>)は、信頼されていない関係を示し、
空白は部分的に信頼できることを意味し、プラス文字(<quote>+</quote>)は、
完全な信用度を表しています。
</para>

</sect2>

<sect2 id="ff">
<title>Format=Flowed 形式のメッセージ送信</title>

<sect3 id="ff-concept">
<title>コンセプト</title>

<para>
<literal>format=flowed</literal>形式のメッセージ(又は短い形式では
<literal>f=f</literal>)は、ほとんどの場合、送信者が何を送ったかに
よらず、行の長さをカスタマイズできる、受信者のメールクライアントが
独自のニーズに合わせて再フォーマットすることができる段落から構成されています。
技術的には、これは、最後の行を除いて、<quote>flowable</quote>な段落
の最後を空白で終了することによって実現します。
</para>

<para>
Mutt のようなテキストモードのクライアントでは、標準の 80x25文字サイズの
ターミナルのみを仮定するのにもっともよい方法ですが、メッセージの受信者に
見方を完全に決めさせたい場合もあるでしょう。
</para>

</sect3>

<sect3 id="ff-support">
<title>Mutt のサポート</title>

<para>
Mutt は <link linkend="text-flowed">$text_flowed</link> 変数が設定されている
場合、特に、末尾の空白が追加されていない時に、送信メッセージで必要な
<literal>format=flowed</literal> MIME パラメータの設定のみをサポートします。
</para>

<para>
編集後、Mutt はメッセージに、適切な空白を埋め込みます。
<emphasis>適切な空白の埋め込み(Space-stuffing)</emphasis>は、
<literal>format=flowed</literal>を定義するRFC3676 で要求され、
次のように空白を埋め込むことを意味します:

</para>

<itemizedlist>
<listitem><para>空白で始まるすべての行</para></listitem>
<listitem><para><quote><literal>From</literal></quote>で始まる行で、
空白を伴うもの</para></listitem>
<listitem><para><quote><literal>&gt;</literal></quote>で始まるすべての行で、
引用文字を意図しないもの</para></listitem>
</itemizedlist>

<note>
<para>
Mutt は最初の2つのものについて空白の埋め込みをサポートしますが、3番目のものについては
対象外です。先頭の<literal>&gt;</literal>文字が引用の開始なのか否かを
安全に検出するのは不可能だからです。
</para>
</note>

<para>
後続の処理の前に、もとのメッセージを復元するため、
すべての先頭の空白は、受信したクライアントによって削除されます。
</para>

</sect3>

<sect3 id="ff-editor">
<title>エディタの考慮事項</title>

<para>
Mutt は<literal>f=f</literal>メッセージの編集時には、何ら追加の機能を提供しないので、
適切なメッセージを作成するのは、ユーザとエディタ次第です。
<literal>f=f</literal>メッセージを送信する場合はエディタのドキュメントを
よく見てください。
</para>

<para>
たとえば、<emphasis>vim</emphasis>は、<literal>f=f</literal>メッセージを作成する
ことを支援するために、<literal>formatoptions</literal>の設定のための
<literal>w</literal>フラグを提供します。
詳細は<literal>:help fo-table</literal>を参照してください。
</para>

</sect3>

<sect3 id="ff-pager">
<title>再フォーマット</title>

<para>
  Mutt は<literal>format=flowed</literal>メッセージの表示と返信時に
  いくつかの再フォーマット機能を提供しています。これらを活用するためには、
  <link linkend="reflow-text">$reflow_text</link>を設定しなければなりません。
</para>

<itemizedlist>
  <listitem>
  <para>
    段落は、<link linkend="reflow-wrap">$reflow_wrap</link>で指定された幅で、
    自動的にリフローされて折り返しされます。
  </para>
  </listitem>
  <listitem>
  <para>
    (i.e. with <link linkend="text-flowed">$text_flowed</link> unset).
    オリジナルのフォーマットでは、<literal>format=flowed</literal>メッセージの
    引用スタイルは、読解が困難で、フローされていない返信とうまく混ざりません。
    <link linkend="reflow-space-quotes">$reflow_space_quotes</link>を設定すると、
    ページャと非フロー形式での返信時に書くレベルの引用のあとに空白を追加します。
    (すなわち、<link linkend="text-flowed">$text_flowed</link> が未設定)。
  </para>
  </listitem>
  <listitem>
  <para>
    もしも<link linkend="reflow-space-quotes">$reflow_space_quotes</link>
    が未設定の場合、mutt はページャ中で(返信時ではなく)すべての引用のあとに
    1つの空白を付与します。
  </para>
  </listitem>
</itemizedlist>

</sect3>

</sect2>

</sect1>

<sect1 id="forwarding-mail">
<title>メールの転送と中継</title>

<para>
中継と転送は、既存のメッセージを自分で指定した宛先に送信できる機能です。
メッセージの中継とは、Bcc ヘッダで指定された、メッセージのオリジナルな
受信者に送られるように、メッセージの冗長コピーを送信します。一方
メッセージの転送では、再送する前に、メッセージの修正ができます(たとえば、
コメントを追加するなど)。中継は、<quote>b</quote>にバインドされている
<literal>&lt;bounce&gt;</literal>機能を使い、転送は<quote>f</quote>に
バインドされている<literal>&lt;forward&gt;</literal>機能を使います。
</para>

<para>
転送は(指示線に囲まれた)新しいメッセージの本体中にオリジナルのメッーセージを
取り込むか、<link linkend="mime-forward">$mime_forward</link>変数の値に
依存しますが、MIME添付を含むことで行われます。
ページャがやるような添付のデコードは、
<link linkend="forward-decode">$forward_decode</link> と
<link linkend="mime-forward-decode">$mime_forward_decode</link>変数を
使って行われます。転送の形式は内容に依存するので、quadoption パラメータ
<link linkend="mime-forward">$mime_forward</link> を、たとえば、
<quote>ask-no</quote>に設定することができます。
</para>

<para>
Mutt の既定値(
<link linkend="mime-forward">$mime_forward</link>=<quote>no</quote>と
<link linkend="forward-decode">$forward_decode</link>=<quote>yes</quote>)
は標準のインライン転送の時に使います。このモードではすべてのテキストに
デコード可能な部分は新しいメッセージ本体に含まれます。
quadoption <link linkend="forward-attachments">$forward_attachments</link>
の状態によって、オリジナルメールのその他の添付は新しいメッセージに添付する
ことができます。
</para>

<para>
ヘッダを含めるかは、
<link linkend="mime-forward">$mime_forward</link> が設定されていない限り、
<link linkend="weed">$weed</link>変数の現在の設定によって制御されます。
</para>

<para>
転送時におけるメッセージの編集はメッセージの送信または返信と同じ方法ですが、
<link linkend="forward-edit">$forward_edit</link> quadoption で無効に
することもできます。
</para>

</sect1>

<sect1 id="postponing-mail">
<title>メール送信の延期</title>

<para>
たまに、メッセージをすでに書き始めたものの、 送信は後にしたいということがあります。
<literal>&lt;postpone-message&gt;</literal>機能を<emphasis>compose</emphasis>メニューで
使うと、メールの本文と添付は
<link linkend="postponed">$postponed</link>変数で指定されたメールボックス中に
格納されます。これはつまり、Mutt を終了して次回また起動したとしても、
そのメッセージを呼び出せるということです。 

</para>

<para>
メッセージを延期したあとで再開するには、いくつかの方法があります。
コマンドラインからは<quote>-p</quote>オプションが使えますし、
<emphasis>インデックス</emphasis>か<emphasis>ページャ</emphasis>から
新しいメッセージを編集する場合は、延期したメッセージがあるときには
再開するかどうか聞かれます。 延期メッセージが複数あるときは、
<emphasis>postponed</emphasis>メニューが出てきて、 どのメッセージを再開
したいか選択できます。 
</para>

<note>
<para>
メッセージに対する返信を延期したならば、返信済みフラグが 更新されるのは
返信メッセージを実際に完成させて送信したときだけだということに注意してください。
しかも、その親メッセージと同じフォルダにいなければ状態がきちんと更新されません。
</para>
</note>

<para>
<link linkend="postpone">$postpone</link> quad-option も参照してください。
</para>

</sect1>

<sect1 id="encryption">
<title>暗号化と署名</title>

<para>
OpenPGP と S/MIME は、<quote>クラシックモード</quote>と GPGME という2つの
方法で有効になります。最初の方は、種々の操作を実行する外部プログラムを
起動します。この方がテストに便利で、より柔軟性が高いのですが、若干の
設定が必要です。後者は GnuPG プロジェクトの GPGME ライブラリを使います。
</para>

<para>
<quote>クラシックモード</quote>を有効にするには、mutt GPGME を確実に無効にし、
同梱の<literal>gpg.rc</literal> または <literal>smime.rc</literal> ファイルを
使います。これらは通常<literal>/usr/local/share/doc/mutt/samples/</literal>
配下にインストールされています。それらを直接、あるいは、直接かコピーして
.mutt directory に置き、 souce コマンドを使って内容を反映させてください。
<literal>/usr/local/share/doc/mutt/samples/</literal> から直接 source コマンドで
内容を反映させる場合、コマンドに対して自動的に修正の適用と、セキュリティの向上が
行えますので、これが推奨です。
</para>

<screen>
unset crypt_use_gpgme
source /usr/local/share/doc/mutt/samples/gpg.rc
source /usr/local/share/doc/mutt/samples/smime.rc
</screen>

<para>
代わりに GPGME を使う場合は、単に .muttrc の中で以下を有効にするだけです:
</para>

<screen>
set crypt_use_gpgme
</screen>

<sect2 id="enc-pgp">
<title>OpenPGP の構成</title>

<para>
<link linkend="pgp-default-key">$pgp_default_key</link> と
<link linkend="pgp-sign-as">$pgp_sign_as</link> という2つの重要な
設定があります。暗号化を実行するためには最初の変数を設定しなければなりません。
分割した署名鍵を使う場合か、署名鍵のみがある場合は、2番目を設定します。
ほとんどの場合は、<link linkend="pgp-default-key">$pgp_default_key</link>
のみ設定すればよいです。
</para>

<para>
バージョン 2.1.0 から GnuPG は自動的にパスフレーズの入力要求のために、
<literal>エージェント</literal>を使うようになりました。それより古いバージョン
を使っている場合は、エージェントが動作しているようにしておく必要があります
(かわりに <link linkend="pgp-use-gpg-agent">$pgp_use_gpg_agent</link>
を未設定にすると Mutt はパスフレーズを聞いてきます)。次に、エージェントは、
<literal>pinentry</literal>プログラムを使ってプロンプトを表示します。
たとえば、qt、gtk2、gnome3、fltk や curses というような、使用可能な、
数多くの異なった pinentry プログラムがあります。Mutt は tty pinentry
プログラムではうまく動作<emphasis>しません</emphasis>。そのかわりに、
GUI または curses ベースの pinentry プログラム をインストールし、
システムで既定のものとして設定してください。
</para>
</sect2>

<sect2 id="enc-smime">
<title>S/MIME の設定</title>

<para>
OpenPGP と同様、2つの重要な設定、
<link linkend="smime-default-key">$smime_default_key</link> と
<link linkend="smime-sign-as">$smime_sign_as</link> があります。
暗号化と復号化を行うためには、最初の変数の設定が必要です。分割された
署名鍵あるいは署名鍵のみの場合は、2番目の設定が必要です。
ほとんどの場合は、<link linkend="smime-default-key">$smime_default_key</link>
のみの設定が必要でしょう。
</para>

<para>
<quote>クラシックモード</quote>では、キーと証明書は、mutt に同梱されている
<literal>smime_keys</literal>プログラムによって管理されます。既定値では、
それらは<literal>~/.smime/</literal>配下に格納されます。(これは
<literal>smime.rc</literal>ファイルの
<link linkend="smime-certificates">$smime_certificates</link> と
<link linkend="smime-keys">$smime_keys</link> によって設定されます。)
このディレクトリを初期化したい場合は、シェルプロンプトから、
<quote><literal>smime_keys init</literal></quote>コマンドを使います。
プログラムは、証明書のステータスフラグを更新するために、
<quote><literal>smime_keys refresh</literal></quote>を定期的に実行するのに
使われます。
</para>
</sect2>

</sect1>

</chapter>

<chapter id="configuration">
<title>設定</title>

<sect1 id="configuration-files">
<title>初期設定ファイルの位置</title>

<para>
既定の設定(又は<quote>preferences</quote>)は、Mutt を箱から出してすぐに
使えるようにしますが、自分の好みに応じて Mutt を仕立て上げる方が好ましいと
言えます。Mutt が最初に起動された時は、<quote>-n</quote>
<link linkend="commandline">command line</link>オプションが指定されていない
限り、まず<quote>システムの</quote>
設定ファイル(既定値はローカルの管理者によって設定されています)を読もうとします。
このファイルは通常
<literal>/usr/local/share/mutt/Muttrc</literal>か
<literal>/etc/Muttrc</literal>にあります。Mutt は次にホームディレクトリ中の
<literal>.muttrc</literal>という名前のファイルを検索します。
このファイルが存在しなく、ホームディレクトリに<literal>.mutt</literal>という
サブディレクトリがある場合は、Mutt は<literal>.mutt/muttrc</literal>という
ファイルをロードしようとします。もしもなければ、Mutt は
<literal>$XDG_CONFIG_HOME/mutt/muttrc</literal> を読もうと試みます。
</para>

<para>
<literal>.muttrc</literal>は、通常、Mutt を設定するための
<link linkend="commands">commands</link>を配置するファイルです。
</para>

<para>
さらに、Mutt は、上記で説明した、既定のファイルの代わりに実行する、
特定バージョン用の設定ファイルをサポートしています。たとえば、システムの
システム設定ディレクトリに Muttrc-0.88 というファイルがあり、
Mutt のバージョン 0.88 を使っているときには、このファイルは
<literal>Muttrc</literal>ファイルの代わりに読み込まれます。ユーザの
設定ファイルでも同様で、ホームディレクトリ中に
<literal>.muttrc-0.88.6</literal>というファイルがあり、Mutt バージョン 0.88.6
を実行している場合は、既定の<literal>.muttrc</literal>ファイルの代わりに
このファイルが読み込まれます。バージョン番号は、
<quote>-v</quote> <link linkend="commandline">command line</link>
を使ったり、インデックスメニューから、<literal>show-version</literal>キー
(既定値では V) を使って表示されるものと 同じです。 
</para>

</sect1>

<sect1 id="quickconfig">
<title>Muttrc 設定の始め方</title>

<para>
Mutt は、ニーズと好みにに合わせて高度に設定が変更可能です。
しかし、高度にカスタマイズが可能ということは、設定を変更し始めるのが
難しいということでもあります。いくつか <literal>doc/mutt/samples/</literal>
に、mutt に同梱されているmuttrc のサンプルがあります。その中で、
<ulink url="https://gitlab.com/muttmua/mutt/tree/master/contrib/sample.muttrc-starter">
sample.muttrc-starter</ulink>は基本的な config の例で、
いくつか推奨の設定と便利なプログラムへの情報が含まれています。
</para>
</sect1>

<sect1 id="muttrc-syntax" xreflabel="Syntax of Initialization Files">
<title>初期化ファイルの構文</title>

<para>
初期化ファイルは一連の<link linkend="commands">commands</link>から成っています。
ファイルの各行には、ひとつでも複数でもコマンドを入れられます。 複数コマンドを
使うときはセミコロン(<quote>;</quote>)で区切らなければなりません。
</para>

<example id="ex-rc-multiple-cmds">
<title>複数の設定コマンドを1行中に記述する例</title>
<screen>
set realname='Mutt user' ; ignore x-
</screen>
</example>

<para>
ハッシュマーク、別名ポンド記号(<quote>#</quote>) は<quote>comment</quote>文字
として使われます。これは初期化ファイルへの注釈に使えます。 コメント文字以降の
文章はすべて無視されます。
</para>

<example id="ex-ec-comment">
<title>設定ファイルにおけるコメントの例</title>
<screen>
my_hdr X-Disclaimer: Why are you listening to me? <emphasis role="comment"># This is a comment</emphasis>
</screen>
</example>

<para>
シングルクォート(<quote>'</quote>) と引用符(<quote>"</quote>)は、
空白または他の特別文字を含む文字列をくくるのに使います。
この二種類の引用符の違いは、多くの一般的なシェルプログラムに似ています。
つまり、シングルクォートはその字面どおりの (シェル変数にも変換されず、
バックスラッシュでの文字指定 [次の段落を参照] も変換されないままの)
文字列を指定するために使う一方、ダブルクォートは、中の文字列を解釈すべきだ
いうことを示します。例えば、バックティック(訳注:バッククォート "`") は
引用符の中では解釈されますが、シングルクォートの中では解釈されません。 
</para>

<para>
<quote>\</quote>は、その次の文字をそのまま指定 (原語:quote)します。ちょうど
bash や zsh のようなシェルと同じです。例えば引用符<quote>"</quote>を文字列の
中に入れて使いたいときに <quote>\</quote>を使って、解釈しない文字どおりの
引用符にすることができます。 
</para>

<example id="ex-rc-quote">
<title>設定ファイル中における quotes の例</title>
<screen>
set realname="Michael \"MuttDude\" Elkins"
</screen>
</example>

<para>
<quote>\\</quote>は<quote>\</quote>文字そのものを行に挿入することを意味します。
<quote>\n</quote>と<quote>\r</quote>は、通常の C での意味合いと同じで、それぞ
れ改行 (LF = linefeed) と復帰 (CR = carriage-return) を意味します。
</para>

<para>
行末に<quote>\</quote>を使えば、行の終わりを<quote>エスケープ</quote>するよう
にコマンドを複数の行に分割できます。ただし分割地点がコマンド名の途中であっては
なりません。文の解釈の前に行は結合されるので、複数行は最初の行のみコメントアウト
することでコメントになります。
</para>

<example id="ex-rc-split">
<title>複数行に長い設定コマンドを分割</title>
<screen>
set status_format="some very \
long value split \
over several lines"
</screen>
</example>

<para>
初期化ファイル中で一部を Unix コマンドの出力に 置き換えることも可能です。
これはコマンドをバッククォート二つ (``) ではさむことによって行なえます。
<xref linkend="ex-rc-backtick"/>では、Unix コマンド<quote>uname -a</quote>
の出力を、行が解釈される前に置き換えます。初期化ファイルは行単位に処理され
ますので、Unix コマンドの出力の最初の行のみしか置換されないということです。
</para>

<example id="ex-rc-backtick">
<title>設定ファイル中において外部コマンド出力を使う</title>
<screen>
my_hdr X-Operating-System: `uname -a`
</screen>
</example>

<para>
バッククォートの出力が走査されないようにするためには、引用符の中に
入れてください。<xref linkend="ex-backtick-dblquotes"/>で、gpg の
復号化結果が、直接 $imap_pass に割り当てられています。その結果
パスワード中の特殊文字(たとえば、<quote>'</quote>、<quote>#</quote>、
<quote>$</quote>は走査されず、mutt によって特別に解釈されることはありません。
</para>

<example id="ex-backtick-dblquotes">
<title>バッククォートでくくられた部分の解釈を防ぐ</title>
<screen>
set imap_pass="`gpg --batch -q --decrypt ~/.mutt/account.gpg`"
</screen>
</example>

<para>
環境変数と Mutt の変数は共に、変数名の先頭に<quote>$</quote>をつけることで
アクセス出来ます。たとえば、
</para>

<example id="ex-rc-env">
<title>設定フィル中での環境変数の利用</title>
<screen>
set record=+sent_on_$HOSTNAME
</screen>
</example>

<para>
は、環境変数<literal>$HOSTNAME</literal>が、<quote>kremvax</quote>
に設定されていた場合、Mutt は<quote>sent_on_kremvax</quote>という
名前のフォルダに送信メッセージを保存します(詳細は、
<link linkend="record">$record</link>を参照)。
</para>

<para>
Mutt は変数が使われた時ではなく、割り当てられた時に展開します。
式の右辺にある変数の値を割り当て後に変更した場合、左辺の変数の内容は
変化しません。
</para>

<para>
Mutt が解釈できるコマンドについては、次節以降で説明していきます。
全コマンド一覧は<link linkend="commands">コマンドリファレンス</link>
を参照してください。
</para>

<para>
すべての設定ファイルは、<link linkend="charset">$charset</link>変数によって
決まる現在のロケールであることが想定されています。この変数は、起動時に
Mutt によって決まるため、変数の既定値はありません。
設定ファイルが同じ文字セットでエンコードされていない場合、
<link linkend="config-charset">$config_charset</link>変数を使う必要があります。
その次の行からすべての行は、
<link linkend="config-charset">$config_charset</link> から
<link linkend="charset">$charset</link>まで記録(訳注 recorded)されます。
</para>

<para>
この機構は、以下のような意味を持つため、可能であれば避けるべきです。
</para>

<itemizedlist>

<listitem><para>これらの変数は設定ファイルの先頭の方で
<link linkend="config-charset">$config_charset</link>より前に
<link linkend="charset">$charset</link> を定義すべきです。
そうすると、Mutt はどの文字セットに変換するかを知ることができます。
</para></listitem>

<listitem><para><link linkend="config-charset">$config_charset</link>
が設定されている場合、値はグローバルで、設定ファイル毎では
<emphasis>ないため</emphasis>、各設定ファイル毎に設定する必要があります。
</para></listitem>

<listitem><para>
Mutt は走査する前に行を最初に記録するので、疑問符やその他の文字をエラーの一部
として導入する変換(変換不能な文字、音訳)は、構文エラーを引き起こしたり、
特定のトークン(例えば、正規表現中への疑問符の埋め込み)を勝手に変換する
可能性があります。
</para></listitem>

</itemizedlist>

</sect1>

<sect1 id="addrgroup">
<title>アドレスグループ</title>

<para>使用法:</para>

<cmdsynopsis>
<command>group</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain" rep="repeat">
<option>-rx</option>
<replaceable class="parameter">expr</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-addr</option>
<replaceable class="parameter">expr</replaceable>
</arg>
</group>

<command>ungroup</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-rx</option>
<replaceable class="parameter">expr</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-addr</option>
<replaceable class="parameter">expr</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
<quote>auto-encryption</quote> can be achieved easily.
Mutt は名前をつけたグループ中に、論理的にアドレスをグルーピングする機能をサポート
しています。アドレスまたはアドレスパターンは同時に複数のグループで
利用できます。それらのグループは<link linkend="patterns">patterns</link>
(検索、制限やタグ付け)と、グループパターンを使うフックの中で
使う事ができます。これは、メールのクラス分けと、メッセージがどのようなグループ
なのかに依存した特定の動作を行わせる時に便利です。たとえば、mutt の
ユーザメーリングリストは<quote>mailing list</quote> と <quote>mutt-related</quote>
というカテゴリに一致します。<link linkend="send-hook"><literal>send-hook</literal></link>
を使う事で、送信者をメーリングリストあてのメッセージを書くための専用の
ものとして設定でき、mutt メーリングリストに書くための、mutt-related なものとして
署名を設定できます。&mdash;
他のリストに対しては、リストへの送信者の設定は引き続き適用されますが、
異なった署名が選択されます。あるいは、暗号化メールを受け取れることが分かっている
受信者のみを含むグループについて、<quote>auto-encryption</quote>
を簡単に実現できます。
</para>

<para>
<command>group</command>コマンドはグループまたは複数のグループに、
アドレスまたは正規表現で直接追加するために使用されます。
<command>group</command>コマンドの異なったカテゴリの引数は、任意の順序で
指定できます。<literal>-rx</literal>と<literal>-addr</literal>フラグは、
その後の(ハイフンでは始まらない)文字列がそれぞれ正規表現か、単なるメールアドレス
として解釈されるべきかを指定します。
</para>

<para>
これらのアドレスグループはオプションの<literal>-group</literal>
オプションを指定することで、
<link linkend="alias"><command>alias</command></link>,
<link linkend="lists"><command>lists</command></link>,
<link linkend="lists"><command>subscribe</command></link> と
<link linkend="alternates"><command>alternates</command></link>
コマンドによって暗黙的に作成することもできます。たとえば、
</para>

<screen>
alternates -group me address1 address2
alternates -group me -group work address3
</screen>

<para>
は、すべての自分のアドレスと、作業用アドレス<emphasis>address3</emphasis>のみを
含む<quote>work</quote>という名前のグループを含む<quote>me</quote>
と言う名前のグループを作ります。他にも多くの可能性がありますが、
これを使って、読むために、メーリングリストフォルダ中の自分のメッセージに
自動的にマークを付けるのに使ったり、仕事に関連したメッセージに特別な署名を
使ったりすることができます。
</para>

<para>
<command>ungroup</command>コマンドは、指定されたグループまたは複数のグループ
から、アドレスまたは正規表現を指定されたものを取り除くのに使います。
文法は<command>group</command>とよく似ていますが、特別な文字<literal>*</literal>
をグループのすべての内容を空にするのに使えます。すべてのアドレスと正規表現が
削除されたため、グループが空になるとすぐに、それは内部的にも削除されます
(すなわち、空のグループは存在しません)。グループから正規表現を削除するときは、
<command>group</command> コマンドまたは <literal>-group</literal> 引数で
正確に指定しなければなりません。
</para>

</sect1>

<sect1 id="alias">
<title>エイリアスの定義と使用</title>

<para>使用法:</para>

<cmdsynopsis>
<command>alias</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">address</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">address</replaceable>
</arg>

<command>unalias</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">key</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
通信相手のアドレスを覚たり、入力したりするのは、普段はとても面倒です。
Mutt は完全なアドレスにマップする短い文字列 <quote>aliases</quote>を
作成できます。
</para>

<note>
<para>
一つ以上のアドレスのエイリアスを作成したい場合、アドレスは
カンマ(<quote>,</quote>)で<emphasis>くくらなければなりません</emphasis>。
</para>
</note>

<para>
<command>alias</command>のオプション<literal>-group</literal>引数は
別名アドレスを、<emphasis>group</emphasis>という名前に追加します。
</para>

<para>
別名を追加するには以下のように行います。
</para>

<screen>
alias muttdude me@cs.hmc.edu (Michael Elkins)
alias theguys manny, moe, jack
</screen>

<para>
別名あるいは複数の別名(<quote>*</quote>はすべてを意味します)を削除するには
以下のように行います。
</para>

<screen>
unalias muttdude
unalias *
</screen>

<para>
他のメーラとは違い、Mutt は 別名を特別のファイルに定義する必要がありません。
<command>alias</command>コマンドは、
<link linkend="source"><command>source</command>d</link> などで読み込まれるファイル
と同じように、設定ファイル中であればどこにでも書けます。 したがって、
複数の別名ファイルを使うこともできますし、<literal>.muttrc</literal>の中にすべて
定義してしまうこともできます。
</para>

<para>
その一方、<link linkend="create-alias"><literal>&lt;create-alias&gt;</literal></link>
機能は、
<link linkend="alias-file">$alias_file</link>変数(<literal>~/.muttrc</literal>が
既定値)によって指定される一つのファイルしか使えません。
しかし、このファイルは特別扱いされるわけではありません。 というのも、Mutt はどの
ファイルにでも別名を追加できますし、 このファイルもきちんと
<link linkend="source"><command>source</command></link>しなければ
新規エイリアスが有効にならないのです。 
</para>

<example id="ex-alias-external">
<title>外部別名ファイルの設定例</title>
<screen>
source /usr/local/share/Mutt.aliases
source ~/.mail_aliases
set alias_file=~/.mail_aliases
</screen>
</example>

<para>
別名を使うためには、単に、<emphasis>To:</emphasis> や <emphasis>Cc:</emphasis>の
プロンプトでアドレスを入力するときに、 エイリアスを入力するだけです。
また、<link linkend="edit-headers">$edit_headers</link>変数を設定しておけば、
エディタでも適切なヘッダに別名をを入力できます。
</para>

<para>

さらに、種々のアドレス入力プロンプトにおいて、Tab 文字を使えば、一部だけ入力
した別名ら完全な別名に展開させることができます。合致するものが複数あると、
Mutt は合致した別名のメニューを出します。 別名の完全な一覧を表示させるには、
書きかけの別名がない状態で Tab を入力しなくてはなりません。例えばプロンプトの
最初や、アドレスが複数あることを示すカンマの後です。  
</para>

<para>
別名メニューでは、<literal>select-entry</literal> キー(既定値では
default: &lt;Return&gt;)で好きなだけ別名を選択してから、
<emphasis>exit</emphasis>キー(既定値は q)を使ってアドレスのプロンプトに戻れます。 
</para>

</sect1>

<sect1 id="bind">
<title>既定のキー割り当ての変更</title>

<para>使用法:</para>

<cmdsynopsis>
<command>bind</command>
<arg choice="plain">
<replaceable class="parameter">map</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">function</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドで既定のキー割り当て (キーを押したときに起動する処理)を
変更することができます。 
</para>

<para>
<emphasis>map</emphasis> specifies in which menu the binding belongs.
Multiple maps may be specified by separating them with commas (no
additional whitespace is allowed). The currently defined maps are:
<emphasis>map</emphasis>は、その割り当てがどのメニューのものなのかを指定します。
複数のマップをカンマで区切って指定することもできます(ただし空白を入れてはいけません)。
現状で定義されているマップは以下の通りです。
</para>

<anchor id="maps"/>
<variablelist>

<varlistentry>
<term>generic</term>
<listitem>
<para>
これは実際のメニューではなく、ページャとエディタ以外の全メニューにおける
最終候補となるものです。Mutt は、キーが実際のメニューで定義されていないとき、
この割り当てを使います。これによって、関数を複数のメニューのキーに 割り当てる
ことができますので、同じ効果を得るためにいくつも <command>bind</command> を
書かなくて済みます。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>alias</term>
<listitem>
<para>
別名メニューは、<literal>.muttrc</literal>に定義されている個人的な別名の一覧で
す。短い別名から完全なメールアドレスへの割り当て一覧です。 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>attach</term>
<listitem>
<para>
この添付ファイルメニューは、受信したメッセージの添付ファイルにアクセス
するのに使います。 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>browser</term>
<listitem>
<para>
browserは、ローカルのディレクトリ構造を閲覧するためにも使いますし、 受信メール
ボックスを一覧表示するためにも使います。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>editor</term>
<listitem>
<para>
editor はユーザがテキストデータを入力する一行エディタで、<literal>compose</literal>
メニューでの<emphasis>To</emphasis> 又は <emphasis>Subject</emphasis> プロンプトで
使います。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>index</term>
<listitem>
<para>
インデックスとは、メールボックスに含まれているメッセージの一覧です。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>compose</term>
<listitem>
<para>
compose メニューは、新規メッセージを送信するときに使われる画面のことです。 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>pager</term>
<listitem>
<para>
pager は、メッセージおよび添付ファイルのデータや ヘルプ一覧を表示するために
使われるモードのことです。 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>pgp</term>
<listitem>
<para>
PGP メニューは、送信メッセージの暗号化に使う OpenPGP 鍵を選択します。 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>smime</term>
<listitem>
<para>
smime メニューは、送信メッセージの暗号化に使う OpenSSL の証明書を
選択します。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>postpone</term>
<listitem>
<para>
延期メニューはインデックスメニューに似ていますが、作成して送信せず
次回まで保存しておいたようなメッセージを復元するときに使うものです。 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>query</term>
<listitem>
<para>
query メニューは<link linkend="query-command">$query_command</link>
から返された結果を表示するための browser です。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>mix</term>
<listitem>
<para>
mixmaster 画面は、送信メッセージの再送信オプションを選択するのに使います
(Mutt が Mixmaster をサポートするようにコンパイルされている場合)。
</para>
</listitem>
</varlistentry>
</variablelist>

<para>
<emphasis>key</emphasis>は割り当てたいキー(またはキーシーケンス)です。
制御文字を指定したい際は、<emphasis>\Cx</emphasis>と記述します。ここで、
<emphasis>x</emphasis>は制御文字に対応する英字です(たとえば、
control-A を指定したい場合は、<quote>\Ca</quote>とします)。
<emphasis>x</emphasis>の大文字小文字状態は<emphasis>\C</emphasis>と
同じように無視されるため、
<emphasis>\CA</emphasis>, <emphasis>\Ca</emphasis>,
<emphasis>\cA</emphasis> と<emphasis>\ca</emphasis>は皆同じです。
別の書き方としては、キーに割り当てるのに、<quote>\</quote>を先頭につけた
3桁の8進数字を指定する方法があります(たとえば、
<emphasis>\177</emphasis>は<emphasis>\c?</emphasis>と同じです)。
さらに、<emphasis>key</emphasis>は<xref linkend="tab-key-names"/>で
示されているシンボル名でもかまいません。
</para>

<table id="tab-key-names">
<title>キーのシンボル名</title>
<tgroup cols="2">
<thead>
<row><entry>シンボル名</entry><entry>意味</entry></row>
</thead>
<tbody>
<row><entry>\t</entry><entry>tab</entry></row>
<row><entry>&lt;tab&gt;</entry><entry>tab</entry></row>
<row><entry>&lt;backtab&gt;</entry><entry>backtab / shift-tab</entry></row>
<row><entry>\r</entry><entry>carriage return</entry></row>
<row><entry>\n</entry><entry>newline</entry></row>
<row><entry>\e</entry><entry>escape</entry></row>
<row><entry>&lt;esc&gt;</entry><entry>escape</entry></row>
<row><entry>&lt;up&gt;</entry><entry>上矢印</entry></row>
<row><entry>&lt;down&gt;</entry><entry>下矢印</entry></row>
<row><entry>&lt;left&gt;</entry><entry>左矢印</entry></row>
<row><entry>&lt;right&gt;</entry><entry>右矢印</entry></row>
<row><entry>&lt;pageup&gt;</entry><entry>Page Up</entry></row>
<row><entry>&lt;pagedown&gt;</entry><entry>Page Down</entry></row>
<row><entry>&lt;backspace&gt;</entry><entry>Backspace</entry></row>
<row><entry>&lt;delete&gt;</entry><entry>Delete</entry></row>
<row><entry>&lt;insert&gt;</entry><entry>Insert</entry></row>
<row><entry>&lt;enter&gt;</entry><entry>Enter</entry></row>
<row><entry>&lt;return&gt;</entry><entry>Return</entry></row>
<row><entry>&lt;home&gt;</entry><entry>Home</entry></row>
<row><entry>&lt;end&gt;</entry><entry>End</entry></row>
<row><entry>&lt;space&gt;</entry><entry>スペース</entry></row>
<row><entry>&lt;f1&gt;</entry><entry>ファンクションキー 1</entry></row>
<row><entry>&lt;f10&gt;</entry><entry>ファンクションキー 10</entry></row>
</tbody>
</tgroup>
</table>

<para>
<literal>&lt;what-key&gt;</literal>機能はキーボード上の他のキーのキーコードと
シンボル名を調べるのに使えます。この機能を実行すると、<literal>^G</literal>
が押されるまで、押されたキーの情報を表示します。
</para>

<para>
<emphasis>key</emphasis>は空白(<quote>&nbsp;</quote>)またはセミコロン
(<quote>;</quote>)がない限り引用符でくくる必要はありません。
</para>

<para>
<emphasis>function</emphasis>は、<emphasis>key</emphasis>が押された時の
動作を指定します。 関数すべての一覧は<link linkend="functions">reference</link>を
参照してください。<command>bind</command>は<emphasis>function</emphasis>が
大括弧なしで指定されていることを前提としていることに注意してください。
</para>

<para>
特別な機能<literal>&lt;noop&gt;</literal>は、そのキーシーケンスへの
割り当てをなくします。
</para>

</sect1>

<sect1 id="charset-hook">
<title>文字セットの別名定義</title>

<para>使用法:</para>

<cmdsynopsis>
<command>charset-hook</command>
<arg choice="plain">
<replaceable class="parameter">alias</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">charset</replaceable>
</arg>

<command>iconv-hook</command>
<arg choice="plain">
<replaceable class="parameter">charset</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">local-charset</replaceable>
</arg>
</cmdsynopsis>

<para>
<command>charset-hook</command>コマンドは文字セット用の別名を定義します。
これは、Mutt の知らない文字セット名が付いたメッセージを 正しく表示するために使えます。 
</para>

<para>
The <command>iconv-hook</command> command defines a system-specific name
for a character set.  This is helpful when your systems character
conversion library insists on using strange, system-specific names for
character sets.
<command>iconv-hook</command>コマンドは文字セットに対してシステム固有の名前を
定義します。これは、システムの文字変換ライブラリが、文字セットに、システム固有の
おかしな名前を使うよう主張するときの助けになります。 
</para>

</sect1>

<sect1 id="folder-hook">
<title>メールボックスに基づく変数の設定</title>

<para>使用法:</para>

<cmdsynopsis>
<command>folder-hook</command>
<arg choice="plain">
<replaceable class="parameter">[!]regexp</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>

<para>
多くの場合、どのメールボックスを読んでいるかに合わせて 設定を変更できれば
便利です。<command>folder-hook</command>コマンドは、どんな設定コマンドでも
実行できる手法を提供します。<emphasis>regexp</emphasis>は、メールボックス中で、
読み出す前に<emphasis>command</emphasis>を実行するものを指定する正規表現です。
メールボックスが複数の<command>folder-hook</command>に一致する場合は、
<literal>.muttrc</literal>中で出て来る順番に実行されます。 
</para>

<para>
正規表現のパラメータは、
<link linkend="shortcuts">mailbox shortcut</link>展開が
最初の文字に対して行われます。
詳細は<xref linkend="mailbox-hook"/>を参照してください。
</para>

<note>
<para>
パターンの最初に、<link linkend="spoolfile">$spoolfile</link>への
ショートカットとして<quote>!</quote>を使うならば、 正規表現の否定演算子
<emphasis>not</emphasis>と区別するために、シングルかダブルの引用符で
くくらなければなりません。
</para>
</note>

<note>
<para>
Settings are <emphasis>not</emphasis> restored when you leave the
mailbox.  For example, a command action to perform is to change the
sorting method based upon the mailbox being read:
設定はメールボックスを出るときに復帰<emphasis>しません</emphasis>。
たとえば、実行したいコマンド動作が、読み出すメールボックスに合わせて
整列方法を変更することだとします。 
</para>

<screen>
folder-hook mutt "set sort=threads"</screen>

<para>
しかし、異なったメールボックスを読み出す時に、整列方法が以前の値に復帰する
わけではありません。<emphasis>既定の</emphasis>コマンドを指定するには、
<command>folder-hook</command>が設定ファイル中での順に評価されるので、
フォルダ毎に値を調節する前に、パターン<quote>.</quote>を使います。
</para>
</note>

<note>
<para>
キーボードバッファはすべてのホックが実行されたあとまで処理されません。
複数の<link linkend="push">push</link> 又は
<link linkend="exec">exec</link>コマンドは逆順で実行されることになります。
</para>
</note>

<para>
以下の例は、すべてのフォルダに対して<literal>date-sent</literal>
を行うように<link linkend="sort">sort</link>変数を設定しますが、
名前に <quote>mutt</quote> を含むすべてのフォルダの
<literal>threads</literal>を設定します。
</para>

<example id="ex-folder-sorting">
<title>メールボックス名ベースでの整列方式の設定</title>
<screen>
folder-hook . "set sort=date-sent"
folder-hook mutt "set sort=threads"
</screen>
</example>

</sect1>

<sect1 id="macro">
<title>キーボードマクロ</title>

<para>使用例:</para>

<cmdsynopsis>
<command>macro</command>
<arg choice="plain">
<replaceable class="parameter">menu</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">sequence</replaceable>
</arg>
<arg choice="opt">
<replaceable class="parameter">description</replaceable>
</arg>
</cmdsynopsis>

<para>
マクロは、キーひとつで連続作業を実行したいときに便利です。<emphasis>menu</emphasis>で
<emphasis>key</emphasis>を押すと、Mutt はキーを<emphasis>順番に</emphasis>
押したのと同じ動作をします。ですから、よく連続して入力するコマンドがあれば、
マクロを作成してキーひとつ又はごく少ないキー入力で、そのコマンドを実行する
ようにできます。
</para>

<para>
<emphasis>menu</emphasis>はマクロを割り当てる<link linkend="maps">map</link>です。
複数のマップは、カンマによって複数のメニューマップに分割して指定できます。
ただし、メニューとカンマの間に空白を使うことはできません。 
</para>

<para>
<emphasis>key</emphasis>と<emphasis>sequence</emphasis>は、いくつか追加が
ありますが、<link linkend="bind">key bindings</link>と同じルールで展開されます。
第一点は、<emphasis>sequence</emphasis>における制御文字を<emphasis>^x</emphasis>
とも指定できることです。サーカムフレックス(<quote>^</quote>)を使うためには
<emphasis>^^</emphasis>とする必要があります。 第二に、<emphasis>up</emphasis>や
機能を直接呼び出すような特定のキーを指定するためには、
<emphasis>&lt;key name&gt;</emphasis>と<emphasis>&lt;function name&gt;</emphasis>
というフォーマットを使います。キー名の一覧は、
<link linkend="bind">key bindings</link>を参照してください。
機能の一覧は<link linkend="functions">reference</link>にあります。
</para>

<para>
マクロに関数名を直接使う利点は、それによって 動作時のキー割り当てと関係なく
マクロが動くので、特定のキー定義をしてあるユーザでなくとも使えるということです。
これでマクロは堅固かつ(ポータブルになり、何人かで使うファイル (例えばシステムの
Muttrc) の中でマクロを定義するのも容易になります。
</para>

<para>
必須ではありませんが、説明文を<emphasis>sequence</emphasis>の後ろに指定できます。
これはヘルプ画面に表示されます。 
</para>

<note>
<para>
ヘルプ画面に表示されるマクロ定義 (定義されていればですが) は
自動的に画面の幅に切り取られてしまい、折り返し表示はされないことに
注意してください。
</para>
</note>

</sect1>

<sect1 id="color">
<title>色と白黒の画面属性の使用</title>

<para>使用法:</para>

<cmdsynopsis>
<command>color</command>
<arg choice="plain">
<replaceable class="parameter">object</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>

<command>color</command>
<group choice="req">
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>

<command>color</command>
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>

<command>color</command>
<arg choice="plain">
<option>compose</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">composeobject</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>

<command>uncolor</command>
<group choice="req">
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
端末がカラー表示をサポートしていれば、独自の色構成を創作して 一味ちがう
Mutt にすることができます。ある対象 (情報の型) の色を定義するには 前景色と
背景色の<emphasis>両方を</emphasis>指定しなければなりません (前景だけや
背景だけを指定することは不可能です)。 
</para>

<para>
<emphasis>header</emphasis>と<emphasis>body</emphasis>は
メッセージのヘッダ/本文で<emphasis><link linkend="regexp">regexp</link></emphasis>
に一致し、<emphasis>index</emphasis>は、メッセージインデックス中の
<emphasis><link linkend="patterns">pattern</link></emphasis>と一致します。
IMAP サーバサイドの検索(=b, =B, =h)はカラーインデックスパターン用には
サポートされていないことに注意してください。
</para>

<para>
<link linkend="header-color-partial">$header_color_partial</link>が未設定の
場合(既定値)、<emphasis>regexp</emphasis>に一致する<emphasis>header</emphasis>は、
すべてのヘッダに適用される色となります。設定されている場合は、
<emphasis>regexp</emphasis>に正確に一致するテキストのみに、色が適用されます。
</para>

<para>
<emphasis>object</emphasis> は以下のうちのどれかです:
</para>

<itemizedlist>
<listitem><para>attachment</para></listitem>
<listitem><para>bold (メッセージの本文の太字強調部分)</para></listitem>
<listitem><para>error (Mutt が出力するエラーメッセージ)</para></listitem>
<listitem><para>hdrdefault (ペイジャにおけるメッセージヘッダの既定の色)</para></listitem>
<listitem><para>indicator (メニューで現在の項目を指し示す矢印もしくはバー)</para></listitem>
<listitem><para>markers (ページャで折り返された行の行頭にある <quote>+</quote> マーカ)</para></listitem>
<listitem><para>message (informational messages)</para></listitem>
<listitem><para>normal</para></listitem>
<listitem><para>prompt</para></listitem>
<listitem><para>quoted (メッセージの本文で<link linkend="quote-regexp">$quote_regexp</link>に一致す
る文)</para></listitem>
<listitem><para>quoted1, quoted2, ..., quoted<emphasis>N</emphasis> (引用の階層レベル)</para></listitem>
<listitem><para>search (ページャでの検索語句の強調)</para></listitem>
<listitem><para>signature</para></listitem>
<listitem><para>status (メールボックスやメッセージに関する情報を表示するモード行)</para></listitem>
<listitem><para>tilde (ページャの空行を埋める <quote>~</quote>の部分)</para></listitem>
<listitem><para>tree (メッセージインデックスと添付ファイルメニューで描かれるスレッドツリー)</para></listitem>
<listitem><para>下線(メッセージ本文の下線つきパターンを強調)</para></listitem>
</itemizedlist>

<para>
<emphasis>composeobject</emphasis> は以下のうちのどれかです:
</para>

<itemizedlist>
<listitem><para>header</para></listitem>
<listitem><para>security_encrypt</para></listitem>
<listitem><para>security_sign</para></listitem>
<listitem><para>security_both</para></listitem>
<listitem><para>security_none</para></listitem>
</itemizedlist>

<para>
<emphasis>attribute</emphasis> には以下のうちどれかが後に付きます:
</para>

<itemizedlist>
<listitem><para>none</para></listitem>
<listitem><para>bold</para></listitem>
<listitem><para>underline</para></listitem>
<listitem><para>reverse</para></listitem>
<listitem><para>standout</para></listitem>
</itemizedlist>

<para>
<emphasis>foreground</emphasis> and <emphasis>background</emphasis> には
以下のうちどれかが後に付きます:
</para>

<itemizedlist>
<listitem><para>white</para></listitem>
<listitem><para>black</para></listitem>
<listitem><para>green</para></listitem>
<listitem><para>magenta</para></listitem>
<listitem><para>blue</para></listitem>
<listitem><para>cyan</para></listitem>
<listitem><para>yellow</para></listitem>
<listitem><para>red</para></listitem>
<listitem><para>default</para></listitem>
<listitem><para>color<emphasis>x</emphasis></para>
</listitem>
</itemizedlist>

<para>
色を太字又は細字(ライト)にするため、色の名前にオプションで
<literal>bright</literal>または<literal>light</literal>
(たとえば<literal>brightred</literal>)を付けることができます。
正確な動作は端末とその設定によって異なります。特に、太字/細字の違いと
そのような背景色は、環境変数<literal>$TERM</literal>で指定された、
少なくとも、16&nbsp;色に設定された端末でのみ有効です。
</para>

<para>
端末がそれらをサポートする場合、特別なキーワード<emphasis>default</emphasis>を、
透明色として使えます。また、<emphasis>brightdefault</emphasis>と言う値も有効です。
Mutt が<emphasis>S-Lang</emphasis>ライブラリにリンクされていれば、透明色が
正しく動作するように<literal>$COLORFGBG</literal>環境変数を端末の既定色として
設定しておく必要もあります。たとえば、(Bourne 系シェルの場合)以下のようになります。
</para>

<screen>
set COLORFGBG="green;black"
export COLORFGBG
</screen>

<note>
<para>
<emphasis>S-Lang</emphasis>では、この値を設定する時に、
<emphasis>white</emphasis> と <emphasis>yellow</emphasis> の代わりに
<emphasis>lightgray</emphasis> と <emphasis>brown</emphasis>という
キーワードを使う必要があります。 
</para>
</note>

<note>
<para>
<command>uncolor</command>コマンドは、index、ヘッダと本文のみに適用できます。
これは項目をリストから消去します。消去するには<emphasis>必ず</emphasis>
<command>color</command>コマンドで指定したのと同じパターンを指定しなければ
なりません。<quote>*</quote>特別な印で、 color index のリストを全項目消去
することを意味します。 
</para>
</note>

<para>
Mutt は<emphasis>color0</emphasis>,<emphasis>color1</emphasis>, ...,
<emphasis>color</emphasis><emphasis>N-1</emphasis>
(<emphasis>N</emphasis>は端末でサポートされている色の数) といったキーワードも
認識できます。これは、画面の色を (例えばxterm の<emphasis>color2</emphasis>に
関連付けてある色を変更したりして) 割り当て直したときに有用です。
色名が通常の意味を失ってしまうからです。
</para>

<anchor id="mono"/>
<para>
端末がカラー表示をサポートしていなくとも、画面属性を<quote>mono</quote>コマンドを
使う事で変更することが可能です。使用法は以下の通りです:
</para>

<cmdsynopsis>
<command>mono</command>
<arg choice="plain">
<replaceable class="parameter">object</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>

<command>mono</command>
<group choice="req">
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>

<command>mono</command>
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>

<command>mono</command>
<arg choice="plain">
<option>compose</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">composeobject</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>

<command>unmono</command>
<group choice="req">
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
<emphasis>object</emphasis>, <emphasis>composeobject</emphasis>と
<emphasis>attribute</emphasis>, see the <command>color</command>コマンド用です。
</para>
</sect1>

<sect1 id="msg-hdr-display">
<title>メッセージヘッダの表示</title>

<sect2 id="hdr-folding">
<title>ヘッダ表示</title>

<para>
ページャ中でメッセージを表示する時、Mutt は<link linkend="wrap">$wrap</link>カラムで、
長いヘッダを折り返します。どこでどのように折りたたむかについての厳密な
ルールはありますが、Mutt は常時可読性をよくするために、タブを使って
ヘッダを折りたたみます(送信時にはこれは適用されず、Mutt は標準に準拠した
折りたたみを実装しようとします)。
</para>

</sect2>

<sect2 id="ignore">
<title>ヘッダの選択</title>

<para>使用法:</para>

<cmdsynopsis>
<command>ignore</command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>

<command>unignore</command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
多くのメッセージには、自動処理システムによって付加された、すなわち、
画面に表示させても役に立つとは思えないようなヘッダフィールドがたくさん付いています。
このコマンドで、普段は見ないでいたいヘッダフィールドを指定することができます。 
</para>

<para>
ヘッダフィールド名全体を指定する必要はありません。 例えば
<quote>ignore content-</quote>は、<quote>content-</quote>で始まるすべてのヘッダを
無視します。
</para>

<para>
以前に追加した項目をリストから外すには、<quote>unignore</quote>コマンドを使用します。
Mutt は指定されたパターンでヘッダを表示します。たとえば、<quote>ignore x-</quote>を
指定すると、 <quote>unignore x-mailer</quote>とすることができます。
</para>

<para>
<quote>unignore *</quote>は、無視リストから全項目を消去します。
</para>

<example id="ex-header-weeding">
<title>ヘッダの間引き</title>
<screen>
<emphasis role="comment"># Sven's draconian header weeding</emphasis>
ignore *
unignore from date subject to cc
unignore organization organisation x-mailer: x-newsreader: x-mailing-list:
unignore posted-to:
</screen>
</example>

</sect2>

<sect2 id="hdr-order">
<title>表示されるヘッダの順番</title>

<para>使用法:</para>

<cmdsynopsis>
<command>hdr_order</command>
<arg choice="plain">
<replaceable class="parameter">header</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">header</replaceable>
</arg>

<command>unhdr_order</command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>header</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
<command>hdr_order</command>コマンドを使うと、メッセージを表示する時、
Mutt がヘッダを表示する時の順番を指定することができます。
</para>

<para>
<quote><command>unhdr_order</command> *</quote>は、順番リストから以前に定義した
すべてのヘッダを削除しますので、システム全体のスタートアップファイルで
設定したヘッダ順序効果がなくなります。
</para>

<example id="ex-hdr-order">
<title>ヘッダ表示順の設定</title>
<screen>
hdr_order From Date: From: To: Cc: Subject:
</screen>
</example>

</sect2>
</sect1>

<sect1 id="alternates">
<title>代替アドレス</title>

<para>使用法:</para>

<cmdsynopsis>
<command>alternates</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<arg choice="plain">
<replaceable>regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>regexp</replaceable>
</arg>

<command>unalternates</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>regexp</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
種々の機能において、Mutt は自分で送信したメッセージか、他人から受信した
メッセージかに応じて違う扱い方をします。たとえば、自分が別の相手へ送信した
メッセージに返信を書くとき、 Mutt は自動的にその元メッセージの宛先へ返事を
送るよう提案します。 多くの場合、自分に返事を書くなどということは意味をなさ
ないからです(<link linkend="reply-to">$reply_to</link>を参照)。
</para>

<para>
多くのユーザは複数の異なるアドレスでメールを受信します。Mutt の機能をフル
活用するには、どのアドレスで自分がメールを 受信するのかを Mutt が理解できる
ようにしなくてはなりません。このことが、<command>alternates</command>コマンドを
使う目的です。このコマンドは正規表現のリストを受け取り、それらを使って、 自分が
メールを受信するアドレスを識別します。 
</para>

<para>
厳密な比較ではなく、アドレスは正規表現を使って照合されるので、ミスマッチを
防ぐため、アドレスはできるだけ正確に指定する必要があります。
</para>

<screen>
alternates user@example
</screen>

<para>
Mutt は<quote><literal>some-user@example</literal></quote>が使うアドレスと
想定しますが、これは望ましくないかもしれません。解決方法として、そのような
場合には、以下のように指定します:
</para>

<screen>
alternates '^user@example$'
</screen>

<para>
<literal>-group</literal>フラグは、名前付きのグループに、すべての後続の正規表現を
追加します。
</para>

<para>
<command>unalternates</command>コマンドを使うと、<command>alternates</command>の
パターンに例外を作ることができます。あるアドレスが<command>alternates</command>
に一致していて、それを自分からのではないことにしたい場合には、
<command>unalternates</command>コマンド配下で、より正確なパターンをリストアップ
できます。
</para>

<para>
<command>alternates</command>リストから正規表現を削除するには、完全に同一の
<emphasis>regexp</emphasis>を<command>unalternates</command>で指定します。
同様に、ある<command>alternates</command>コマンドの<emphasis>regexp</emphasis>が
<command>unalternates</command>リストのエントリに一致したならば、
<command>unalternates</command>エントリは削除されます。
<command>unalternates</command>の<emphasis>regexp</emphasis>が<quote>*</quote>で
あれば、<command>alternates</command>の<emphasis>すべてのエントリ</emphasis>が
削除されます。
</para>

</sect1>

<sect1 id="lists">
<title>メーリングリスト</title>

<anchor id="subscribe"/>
<para>使用法:</para>

<cmdsynopsis>
<command>lists</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>

<command>unlists</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</group>

<command>subscribe</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>

<command>unsubscribe</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
Mutt は <link linkend="using-lists">メーリングリストを扱う</link>
ための、便利な機能がいくつかあります。その益にあずかるには、 どのアドレス
がメーリングリストに属するのか、 そして自分がどのメーリングリストを講読
しているのかを指定しなければなりません。Mutt はまた、自動的に検出した
への限定的なサポートもしています。これは、<command>lists</command>
コマンド(グループ機能を除く)で、メーリングリストのアドレスを指定するのと
同じ効果がある、共通の<literal>List-Post:</literal>ヘッダ中の
<literal>mailto:</literal>リンクを走査することで、サポートします。
一度これを行うと、
<link linkend="list-reply"><literal>&lt;list-reply&gt;</literal></link>
機能はすべての既知メーリングリストに対して動作するようになります。
そのうえ、購読しているメーリングリストにメッセージを送るときで、
<link linkend="followup-to">$followup_to</link>が設定されている場合は、
Mutt は Mail-Followup-To ヘッダを付与します。メーリングリストの購読を
中止する場合、これには自分のアドレスが含まれるので、返信のコピーを確実に受け取れる
ことができます。購読済みのメーリングリストでは、返信を自分のアドレスにも送ること
のないよう、他の人のメールユーザエージェントに伝えます。 
</para>

<note>
<para>
Mail-Followup-To header は、すべてのメールユーザエージェントでサポートされて
いない、非標準の拡張です。これを追加しても、メーリングリストのメッセージが
自分宛てに Cc: で来るのを防ぐ 防弾チョッキにはなりません。Mail-Followup-To の
生成は、設定ファイル中の<link linkend="followup-to">$followup_to</link> 変数に
よって制御されるのですが、一部のメーリングリストでは、返信時にCcを送るのが
一般的だからです(これは、メーリングリストへの返信と言うよりは、グループ
へ、だからです)。
</para>
</note>

<para>
さらに正確に言うと、Mutt が管理しているのは、 既知および購読中のメーリングリストの
アドレスを表すパターンのリストです。購読しているメーリングリストはすべて
既知になります。あるメーリングリストを既知にするには、<command>list</command>
コマンドを使います。購読中にするには、<command>subscribe</command>
コマンドを使います。
</para>

<para>
どちらのコマンドにも正規表現を使えます。例えば、Debian のバグトラッキング
システムにおけるバグレポートのアドレスに送信されたすべてのメッセージを、
メーリングリストのメールであるということにするには、たとえば、
</para>

<screen>
subscribe [0-9]+.*@bugs.debian.org</screen>

<para>
とします。くの場合は、単にリストのメールアドレスの一部分を指定するだけで十分です。
</para>

<para>
十分な長さでアドレスを指定して、あいまいさをなくしてください。 たとえば、
Mutt のメーリングリストを購読していれば、<literal>mutt-users@mutt.org</literal>
へのメールを受信することになります。 それで、このアドレスがメーリングリスト
だということを Mutt に教えるには、 初期化ファイルに
<literal>lists mutt-users@</literal>を追加します。これを購読していることを
Mutt に教えるには、代わりに
<literal><command>subscribe</command>mutt-users</literal>を追加します。
もし、<literal>mutt-users@example.com</literal>というアドレスの人からメールを
受診することがあるならば、
<literal><command>lists</command> ^mutt-users@mutt\\.org$</literal> か
<literal><command>subscribe</command> ^mutt-users@mutt\\.org$</literal>
を使って、実際にリストから来たメールにだけ一致させることができます。 
</para>

<para>
<literal>-group</literal>フラグは、指定されたアドレスリストに追加する
のに加えて、後続のすべての正規表現を
名前付き<link linkend="addrgroup">address group</link>に追加します。
</para>

<para>
<quote>unlists</quote>コマンドは、既知と購読中のメーリングリストのリストから
項目を消去するために使います。項目をすべて消去するには
<quote>unlists *</quote>を使ってください。
</para>

<para>
メーリングリストを、購読中のメーリングリストのリストからは消去しつつ、既知の
メーリングリストのリストに残しておくためには、<command>unsubscribe</command>
を使ってください。
</para>

</sect1>

<sect1 id="mbox-hook">
<title>複数のスプールメールボックスの使用</title>

<para>使用法:</para>

<cmdsynopsis>
<command>mbox-hook</command>
<arg choice="plain">
<replaceable class="parameter">[!]regexp</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドは、終了時やフォルダ変更時に、既読メッセージを、特定のメールボックス
から違うメールボックスへと、自動で移動させるのに使います。<emphasis>regexp</emphasis>は
<quote>spool</quote>メールボックスとして扱うメールボックスを指定する正規表現で、
<emphasis>mailbox</emphasis>は、既読時にメールをどこにセーブすべきかを指定します。 
</para>

<para>
regexp パラメータは、最初の文字上で展開が実行される
<link linkend="shortcuts">mailbox shortcut</link>機能があります。
詳しくは、<xref linkend="mailbox-hook"/>を参照してください。
</para>

<para>
mbox-hooks の実行は、<link linkend="move">$move</link> 変数に依存する
ことに注意してください。<quote>no</quote>(既定値)に設定すると、
mbox-hooks は実行されません。
</para>

<para>
一部の<emphasis>hook</emphasis>コマンドと異なり、<emphasis>最初に</emphasis>
パターンだけが 使われます (既読メールを一度に複数のメールボックスへセーブすることは
できません)。 
</para>

</sect1>

<sect1 id="mailboxes">
<title>受信メールのモニタ</title>

<para>使用法:</para>

<cmdsynopsis>
<command>mailboxes</command>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>

<command>unmailboxes</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
このコマンドは、メールを受信し、定期的に新しいメールが来ているかをチェックする
フォルダを指定します。
</para>

<para>
<emphasis>folder</emphasis>はローカルファイルかディレクトリのどちらかです
(Mbox/Mmdf 又は Maildir/Mh)。Mutt が POP 又は IMAP をサポートするように
コンパイルされている場合、<emphasis>folder</emphasis>には POP/IMAP フォルダ URLも
使えます。URL の文法は、<xref linkend="url-syntax"/> にあり、POP と
IMAP はそれぞれ <xref linkend="pop"/>と<xref linkend="imap"/> に説明があります。
</para>

<para>
Mutt は(おそらく多くの)フォルダとその中の新しいメールを扱うための、多くの
高度な機能を提供しています。詳細は<xref linkend="new-mail"/>を参照してください
(どのような状況でどのくらいの頻度で Mutt が新しいメールをチェックするかを
含みます)。
</para>

<para>
<quote>unmailboxes</quote>はメールを受信したフォルダリストからトークンを
削除するのに使います。<quote>unmailboxes *</quote>を使うと、すべてのトークンを
削除します。
</para>

<note>
<para>
<command>mailboxes</command>コマンド中のフォルダは、コマンドが実行される時に
解決されるので、<link linkend="shortcuts">shortcut characters</link>
(例えば<quote>=</quote>文字と<quote>!</quote>のようなもの)が名前に含まれている
場合、それらの文字(like <link linkend="folder">$folder</link>と
<link linkend="spoolfile">$spoolfile</link> のようなもの)に影響する
変数定義は、<command>mailboxes</command>コマンドの前で定義する必要があります。
それらのショートカットが使われていない場合、そうしないと Mutt は Mutt が起動した
ディレクトリからの相対パスを探そうとするので、ローカルパスは絶対パスにする
必要があります。
</para>
</note>

</sect1>

<sect1 id="my-hdr">
<title>ユーザ定義のヘッダ</title>

<para>使用法:</para>

<cmdsynopsis>
<command>my_hdr</command>
<arg choice="plain">
<replaceable class="parameter">string</replaceable>
</arg>

<command>unmy_hdr</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">field</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
<command>my_hdr</command>コマンドで、すべてのメールに付加され、
<link linkend="edit-headers">$edit_headers</link> が設定されている場合、
エディタ中に表示される自分独自のヘッダフィールドを定義できます。

</para>

<para>
たとえば、<quote>Organization:</quote>ヘッダを送信メッセージすべてに付与したい
場合は、<literal>.muttrc</literal>に、<xref linkend="ex-my-hdr"/> で
示されるようなコマンドを記述できます。
</para>

<example id="ex-my-hdr">
<title>カスタムヘッダの定義</title>
<screen>
my_hdr Organization: A Really Big Company, Anytown, USA
</screen>
</example>

<note>
<para>
空白文字は、キーワードとコロン(<quote>:</quote>)の間には
<emphasis>置けません</emphasis>。電子メールの標準(RFC2822)では
空白をそこに置くのは不正であり、Mutt もこのルールを強制します。
</para>
</note>

<para>
もしも単一のメッセージにヘッダフィールドを追加したいならば、
<link linkend="edit-headers">$edit_headers</link>変数を定義するか、
<literal>&lt;edit-headers&gt;</literal>機能(既定値: <quote>E</quote>)
を編集メニューで使う事のどちらかで、メッセージの本文と一緒にヘッダを編集できます。
</para>

<para>
ユーザ定義のヘッダフィールドを消去するには、<command>unmy_hdr</command>を
使ってください。アスタリスク(<quote>*</quote>)を指定してすべてのヘッダ
フィールドを消去することもできますし、 消去するフィールドを指定することも
できます。例えば、<quote>To</quote> と <quote>Cc</quote> ヘッダフィールドを
すべて削除するには、以下のようにします。
</para>

<screen>
unmy_hdr to cc
</screen>

</sect1>

<sect1 id="save-hook">
<title>既定のセーブ用メールボックスの指定</title>

<para>使用法:</para>

<cmdsynopsis>
<command>save-hook</command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドは、メッセージをセーブするときに使うファイル名の既定値を上書き
するのに使います。<emphasis>mailbox</emphasis>は<emphasis>pattern</emphasis>に
メッセージが一致する時に使われます。正確なフォーマットの情報については、
<xref linkend="pattern-hook"/> を参照してください。
</para>

<para>
<emphasis>mailbox</emphasis> after it was expanded.
より柔軟性が高くて、よい既定値を提供するため、Mutt は、
<link linkend="index-format">$index_format</link>の展開結果を
展開したあとの<emphasis>mailbox</emphasis> に適用します。
</para>

<example id="ex-save-hook-exando">
<title><command>save-hook</command>中で %-expandos を使う</title>
<screen>
<emphasis role="comment"># default: save all to ~/Mail/&lt;author name&gt;</emphasis>
save-hook . ~/Mail/%F

<emphasis role="comment"># save from me@turing.cs.hmc.edu and me@cs.hmc.edu to $folder/elkins</emphasis>
save-hook me@(turing\\.)?cs\\.hmc\\.edu$ +elkins

<emphasis role="comment"># save from aol.com to $folder/spam</emphasis>
save-hook aol\\.com$ +spam
</screen>
</example>

<para>
<link linkend="fcc-save-hook"><command>fcc-save-hook</command></link>
コマンドも参照してください。
</para>

</sect1>

<sect1 id="fcc-hook">
<title>編集時に既定の Fcc: Mailbox を指定</title>

<para>使用法:</para>

<cmdsynopsis>
<command>fcc-hook</command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドは送信メッセージを<link linkend="record">$record</link>以外の
メールボックスに保存するために使います。Mutt はまず、メッセージ宛先リストの中で
<emphasis>pattern</emphasis>を検索して、最初に合致したものの
<emphasis>mailbox</emphasis>を 既定の Fcc: メールボックスとして使います。
一致するものが見付からなければ、メッセージは<link linkend="record">$record</link> 
メールボックスにセーブされます。
</para>

<para>
より柔軟性が高くて、よい既定値を提供するため、Mutt は、
<link linkend="index-format">$index_format</link>の展開結果を
展開したあとの<emphasis>mailbox</emphasis> に適用します。
</para>

<para>
正確なフォーマットの情報については、
<xref linkend="pattern-hook"/> を参照してください。
</para>

<screen>fcc-hook [@.]aol\\.com$ +spammers</screen>

<para>
これは、既定で aol.com ドメインに送られるすべてのメッセージのコピーを
`+spammers' メールボックスにセーブします。
<link linkend="fcc-save-hook"><command>fcc-save-hook</command></link>
コマンドも参照してください。
</para>

</sect1>

<sect1 id="fcc-save-hook">
<title>既定のセーブファイル名と既定の Fcc: メールボックスを同時に指定</title>

<para>Usage:</para>

<cmdsynopsis>
<command>fcc-save-hook</command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドはショートカットであり、同じ引数で
<link linkend="fcc-hook"><command>fcc-hook</command></link> と
<link linkend="save-hook"><command>save-hook</command></link>
を両方とも実行するのと等価です。また、
<link linkend="index-format">$index_format</link>による
<emphasis>mailbox</emphasis>の %-expansion を含みます。
</para>

</sect1>

<sect1 id="send-hook">
<title>メッセージの宛先による設定の変更</title>

<anchor id="reply-hook"/>
<anchor id="send2-hook"/>

<para>使用法:</para>

<cmdsynopsis>
<command>reply-hook</command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>

<command>send-hook</command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>

<command>send2-hook</command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>

<para>
これらのコマンドは、メッセージの宛先に基づいて任意のコマンドを実行するのに
使います。<emphasis>pattern</emphasis>はメッセージに一致するのに使われます。
<emphasis>pattern</emphasis>が一致した時のコマンドの実行についての詳細は
<xref linkend="pattern-hook"/> を参照してください。
</para>

<para>
<command>reply-hook</command>は<emphasis>送信する</emphasis>メッセージの
代わりに、<emphasis>返信する</emphasis>メッセージに対して一致します。
<command>send-hook</command>は<emphasis>新規</emphasis>と<emphasis>返信</emphasis>
両方のすべてのメッセージに対して一致します。
</para>

<note>
<para>
<command>reply-hook</command>は、ユーザの設定ファイル中の順番には
<emphasis>関係なく</emphasis>、<command>send-hook</command>の<emphasis>前に</emphasis>
一致します。しかし、返信時に、<command>reply-hook</command>がいつ実行されたを
<command>send-hook</command>中でパターン <literal>'! ~Q'</literal>
(<emphasis>返信しない</emphasis>、<xref linkend="pattern-hook"/>を参照)を
使う事によって<command>send-hook</command>を抑制することができます。
</para>
</note>

<para>
<command>send2-hook</command>はメッセージが変更されるたびに実行されます。
すなわち、編集したか、編集メニューで宛先や題名を変更したときです。
<command>send2-hook</command>は<command>send-hook</command>のあとに実行されるので、
たとえば、<link linkend="sendmail">$sendmail</link>変数のようなパラメータを、
メッセージの送信アドレスに応じたものとするように設定するのに使えます。
</para>

<para>
<command>send-hook</command>または<command>reply-hook</command> の各タイプとも、
複数の一致が発生した場合、コマンドは<literal>.muttrc</literal>(のそのタイプの
hook)に記載されている順で実行されます。
</para>

<para>
例: <literal><command>send-hook</command> mutt
"<command>set</command> mime_forward signature=''"</literal>
</para>

<para>
このコマンドの別の典型的な使い方は、<link linkend="attribution">$attribution</link>、
<link linkend="attribution-locale">$attribution_locale</link>と
<link linkend="signature">$signature</link>変数を、
宛先に応じて属性と署名の言語を変更するために使うということがあります。

</para>

<note>
<para>
<command>send-hook</command>は初期受信者リストを取得したあとに1回だけ実行されます。
これは、保存された(訳注:postponed)ドラフトを復帰した時には実行されません。
返信またはメッセージの編集後に追加された受信者は、
<command>send-hook</command>では何も実行されません。これは、
<link linkend="autoedit">$autoedit</link>が設定された時と似ています
(受信者リストが空のように)。さらに、受信者ヘッダやメッセージの題名を修正する
<link linkend="my-hdr"><command>my_hdr</command></link>コマンドは、
<command>send-hook</command>から実行された時には、現在のメッセージには何の影響も
与えないことに注意してください。
</para>
</note>

</sect1>

<sect1 id="message-hook">
<title>メッセージ整形前に設定を変更する</title>

<para>使用法:</para>

<cmdsynopsis>
<command>message-hook</command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドを使って、メッセージの閲覧や整形の前に、そのメッセージに関する情報に
基づいて任意の設定コマンドを実行できます。 表示しようとしているメッセージに
<emphasis>pattern</emphasis>が一致していれば<emphasis>command</emphasis>が実行されます。
複数一致した場合は、<literal>.muttrc</literal>に記載されている順に
コマンドが実行されます。
</para>

<para>
<emphasis>pattern</emphasis>の正確なフォーマットについては<xref linkend="pattern-hook"/>
を参照してください。
</para>

<para>
例:
</para>

<screen>
message-hook ~A 'set pager=builtin'
message-hook '~f freshmeat-news' 'set pager="less \"+/^  subject: .*\""'
</screen>

</sect1>

<sect1 id="crypt-hook">
<title>受信者の暗号鍵の選択</title>

<para>Usage:</para>

<cmdsynopsis>
<command>crypt-hook</command>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">keyid</replaceable>
</arg>
</cmdsynopsis>

<para>
PGP/GnuPG 又は OpenSSL でメッセージを暗号化する時、
送信先のアドレスから受信者の公開鍵が推測できない場合や、何らかの理由で、
Mutt が通常使う鍵をオーバライドする必要がある場合には、指定された電子メール
アドレスに特定のキーを結び付けたいでしょう。<command>crypt-hook</command>
コマンドは、特定の宛先へのメッセージを暗号化するときに使う公開鍵の ID を指定する
手段を提供するものです。同じ regexp を 複数の crypt-hooks で使う事ができます。
複数の crypt-hooks に一致する場合は、受信者に対して複数の keyid を使用することに
なります。キーの選択中、Mutt は、どの crypt-hook で使うかを確認してきます
(<link linkend="crypt-confirmhook">$crypt_confirmhook</link> が設定されていない限り)。
受信者に対するすべての crypt-hooks が指定されない場合、Mutt は鍵選択の代わりに、
もとの受信者アドレスを使います。
</para>

<para>
ここでは、広い意味で<emphasis>keyid</emphasis>と言っています。数字の鍵 ID や
フィンガープリントを入れることもできますし、メールアドレスも使えます。本名でも
構いません。
</para>

</sect1>

<sect1 id="index-format-hook">
<title>パターンを使った $index_format の動的変更</title>

<para>使用法:</para>

<cmdsynopsis>
<command>index-format-hook</command>
<arg choice="plain">
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">format-string</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドは、現在のメッセージに対するパターンマッチングを基にして、
動的に、<link  linkend="index-format">$index_format</link>にフォーマット
文字列を挟み込むのに使います。
</para>

<para>
<link linkend="index-format">$index_format</link>は、
プレースフォルダとして指定した<emphasis>%@name@</emphasis>に
展開されます。同じ<emphasis>name</emphasis>を持つ Index-format-hooks は、
現在のメッセージに対して
<link linkend="patterns"><emphasis>pattern</emphasis></link>を使う事で、
一致します。比較は .muttrc 中で指定された順に一致し、最初に一致したものが
使われます。hook の<emphasis>format-string</emphasis>が次に置換されて評価されます。
</para>

<para>
最初に一致したものが使われるので、最後の hook として、すべてに一致する
<emphasis>~A</emphasis>というパターンを配置するのはよい方法です。
以下は、どのようにして動的な日付フォーマットを実装するかの例です。
</para>

<screen>
set index_format="%4C %-6@date@ %-15.15F %Z (%4c) %s"

index-format-hook  date  "~d&lt;1d"    "%[%H:%M]"
index-format-hook  date  "~d&lt;1m"    "%[%a %d]"
index-format-hook  date  "~d&lt;1y"    "%[%b %d]"
index-format-hook  date  "~A"       "%[%m/%y]"
</screen>

<para>
もう一つの例としては、題名に付加する例を示します。すべてに一致する ~A
パターンがない場合、何も一致しないと、展開処理では空白文字列で置き換わ
る事に注意してください。
</para>

<screen>
set index_format="%4C %@subj_flags@%s"

index-format-hook  subj_flags  "~f boss@example.com"    "** BOSS ** "
index-format-hook  subj_flags  "~f spouse@example.com"  ":-) "
</screen>
</sect1>

<sect1 id="push">
<title>キーボードバッファへのキーシーケンスの追加</title>

<para>使用法:</para>

<cmdsynopsis>
<command>push</command>
<arg choice="plain">
<replaceable class="parameter">string</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドは、指名した文字列をキーボードバッファに入れます。この文字列には、
<link linkend="macro">macro</link>コマンドのシーケンスのように、制御文字、
キーの名前、関数名を含められます。これを使って、起動時や特定のフォルダへの
移動時に、 複数のコマンドを連続実行することもできます。たとえば、
<xref linkend="ex-folder-hook-push"/>では、フォルダに入った時に、自動的に
すべてのスレッドをたたむかを示しています。
</para>

<example id="ex-folder-hook-push">
<title><command>folder-hook</command> 中での<command>push</command>の組み込み</title>
<screen>
folder-hook . 'push &lt;collapse-all&gt;'
</screen>
</example>

<para>
例で示したような機能の利用では、機能名としてMutt が入力を理解するために、
波括弧(<quote>&lt;</quote> and <quote>&gt;</quote>)を使う事が重要です。
それ以外は、独立したキーストロークをシミュレートします。すなわち、
<quote><literal>push collapse-all</literal></quote> は、
<quote>c</quote>、<quote>o</quote>、<quote>l</quote> .... とタイプしたように
解釈されるので、望ましくない、非常に予想外の動作に繋がる可能性があります。
</para>

<para>
キーストロークも使う事ができますが、キーバインディングが変更になる可能性があるため、
ポータビリティがあまりありません。既定のバインディングでは、これは上記の例と
同じです。
</para>

<screen>
folder-hook . 'push \eV'
</screen>

<para>
これは、Esc+V が押されたのをシミュレートします(これは
<literal>&lt;collapse-all&gt;</literal> の既定のバインディングです)。
</para>

</sect1>

<sect1 id="exec">
<title>機能の実行</title>

<para>使用法:</para>

<cmdsynopsis>
<command>exec</command>
<arg choice="plain">
<replaceable class="parameter">function</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">function</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドは、あらゆる機能の実行に使えます。 機能の一覧は
<link linkend="functions">function reference</link>にあります。
<quote><command>exec</command> <literal>function</literal></quote>は
<quote><literal>push &lt;function&gt;</literal></quote>と等価です。
</para>

</sect1>

<sect1 id="score-command">
<title>メッセージのスコア付け</title>

<para>使用法:</para>

<cmdsynopsis>
<command>score</command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">value</replaceable>
</arg>

<command>unscore</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
<command>score</command>コマンドは、<emphasis>pattern</emphasis>に
一致したならば、<emphasis>value</emphasis>をメッセージに追加します。
<emphasis>pattern</emphasis>は、<link linkend="patterns">patterns</link>節で
説明したようなフォーマットの文字列です(効率上の理由から、インデックスで扱えない
情報を走査するパターン、 例えば<literal>~b</literal>, <literal>~B</literal>,
<literal>~h</literal>, <literal>~M</literal>, 又は <literal>~X</literal>
などは使えません)。<emphasis>value</emphasis>は正又は負の整数です。
メッセージの最終的なスコアは、<command>score</command>エントリに一致した
すべての合計値です。しかしながら、<emphasis>value</emphasis>の前に等号
(<quote>=</quote>)を付けることで、特定のエントリに一致した時点で評価を終了
させることができます。負の最終スコアは 0 に丸められます。
</para>

<para>
<command>unscore</command>コマンドは、リストからスコアエントリを削除します。
削除するには、<command>score</command>コマンドで指定したのと同じパターンを
指定<emphasis>しなければなりません</emphasis>。パターン<quote>*</quote>は、
特別なトークンで、リスト中のすべてのスコアエントリを削除します。
</para>

<para>
スコアリングは、メールボックスが整列される前、メールが読み出される前に行われます。
この理由により、
<emphasis>~=</emphasis>, <emphasis>~$</emphasis>,と <emphasis>~()</emphasis>のような、
スレッドに依存したパターン、は既定値では動きません。回避策は、 folder hook で
スコアリングコマンドを push することです。これで、メールボックスが開かれ、入力が
処理されたあとに、メールボックスが再スコアリングされます。
</para>

<screen>
folder-hook . 'push "&lt;enter-command&gt;score ~= 10&lt;enter&gt;"'
</screen>

</sect1>

<sect1 id="spam">
<title>スパムの検出</title>

<para>使用法:</para>

<cmdsynopsis>
<command>spam</command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">format</replaceable>
</arg>

<command>nospam</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
Mutt には、外部のスパム得点フィルタに対する一般化されたサポートがあります。
<command>spam</command>と<literal>nospam</literal>を使って、固有の
スパムパターンを定義でき、外部フィルタによって定義されたスパム属性に基づいて
メールを<emphasis>制限</emphasis>,<emphasis>検索</emphasis>,
<emphasis>整列</emphasis>できます。さらに、
<link linkend="index-format">$index_format</link>変数中で、
<literal>%H</literal>セレクタを使う事により、
スパム属性をインデックス画面に 表示することもできます
(便利ワザ:<literal>%?H?[%H] ?</literal>としてみると、スパムタグが、メッセージに
定義されている場合のみ表示されます)。
</para>

<para>
<literal>%H</literal>によって表示され、<literal>~H</literal>によって
注意: 検索された値は<link linkend="caching">header cache</link>に格納されます。
Mutt は<literal>spam</literal>ルールの変更に基づいてヘッダキャッシュエントリを
無効にするほど賢くはないので、正しい<literal>%H</literal>の値が表示されない
場合は、ヘッダキャッシュを一時的に OFF にしてみてください。これで問題が解決
すれば、スパムルールを好みに設定後、古いヘッダキャッシュファイルを削除して、
再度キャッシュを ON に戻してください。
</para>

<para>
最初のステップとして、<command>spam</command>コマンドを使い、外部フィルタの
スパムパターンを定義することです。<emphasis>pattern</emphasis>は正規表現で、
メールメッセージのヘッダに 一致させます。メールボックス中のメッセージは、この
正規表現に一致すると、<quote>spam tag</quote> 又は <quote>spam attribute</quote>
を受け取ります(<command>nospam</command>パターンに一致しない限り&mdash;
以下を参照)。この属性の表示方法は、自分で完全に制御することができ、
その制御を行うのは<emphasis>format</emphasis>パラメータです。
<emphasis>format</emphasis>パラメータは任意の静的なテキストが使えますが、
<emphasis>pattern</emphasis>正規表現からの後方参照を含めることもできます
(正規表現<quote>back-reference</quote>は、括弧の中に含まれた部分式(訳注:
sub-expression)を参照します)。<literal>%1</literal>は正規表現中の
後方参照に置換され、<literal>%2</literal>は、二番目の後方参照に置換され
ます。あとは同様です。
</para>

<para>
スパムタグに一致するため、 mutt は、ローカルと POP フォルダの場合は常時
対応するヘッダ情報を必要としますが、既定の設定では IMAP では必要としません。
解析されるスパムヘッダに依存しますが、
<link linkend="imap-headers">$imap_headers</link> を調整する必要が
あるかもしれません。
</para>

<para>
複数のスパムフィルタを利用していると、メッセージに複数のスパム関連ヘッダが付く
ことがあります。そこで、<command>spam</command>パターンを、おのおのに対して
設定することができます。メッセージが二つ以上のパターンに一致した場合で、
<link linkend="spam-separator">$spam_separator</link>変数が文字列に
設定されていれば、メッセージのスパムタグは、
<link linkend="spam-separator">$spam_separator</link>変数の値で項目を分割した、
すべての<emphasis>format</emphasis>文字列を連結したものとなります。
</para>

<para>
例えば、DCC, SpamAssassin と PureMessage を使っている場合は、
設定は<xref linkend="ex-spam"/>のようになるかもしれません。
</para>

<example id="ex-spam">
<title>スパム検出のための設定</title>
<screen>
spam "X-DCC-.*-Metrics:.*(....)=many"         "90+/DCC-%1"
spam "X-Spam-Status: Yes"                     "90+/SA"
spam "X-PerlMX-Spam: .*Probability=([0-9]+)%" "%1/PM"
set spam_separator=", "
</screen>
</example>

<para>
この場合、<quote>Fuz2</quote>チェックサムで<quote>たくさん</quote>
一致した事をDCCに登録したことと、PureMessage が 97% スパムであるという
事を登録したことと、メッセージのスパムタグが
<literal>90+/DCC-Fuz2,97/PM</literal>であるメッセージを受信します。
(DCC レポートの<quote>=many</quote>の4文字は、&mdash; を使ってチェックサムを
表示しています。この場合は<quote>Fuz2</quote>です。)
</para>

<para>
<link linkend="spam-separator">$spam_separator</link>変数が設定されていない場合、
各スパムパターンは前のパターンに優先します。結局、結合された
<emphasis>format</emphasis>文字列の代わりに、最後のものに一致した結果が
得られます。
</para>

<para>
<link linkend="index-format">$index_format</link>変数で、<literal>%H</literal>
を使用した時に、インデックスへ表示される文字列です。また、
<literal>&lt;search&gt;</literal>と<literal>&lt;limit&gt;</literal>機能に対して、
<literal>~H</literal>パターンマッチング式が一致した文字列でもあります。さらに、
整列キーとしてスパム属性を整列させるものでもあります。
</para>

<para>
これは非常に混み入った例で、ほとんどの人が実際に利用している環境では、
スパムフィルタはひとつだけでしょう。設定が単純であればあるほど、 Mutt の
動作を効果的にすることができます。特に整列に関してそう言えます。
</para>

<para>
一般的に言って、スパムタグで整列する際に Mutt は<emphasis>辞書的に</emphasis>&mdash;
すなわち、文字列を一文字ずつ英数字順に評価して整列します。しかし、もしも
パムタグが数字で始まっているならば、Mutt はまず数値順に整列して、2つの数値が同じ
場合にのみ辞書的に整列します(これは UNIX の<literal>sort -n</literal>と
似ています)。スパム属性が何もないメッセージ、すなわち、<emphasis>どの</emphasis>
<command>spam</command>パターンにも一致しない場合は、最低の順位で整列されます。
数値がそれに続いて、0 から順に高い順位で整列されます。 最後に数字以外の文字列が、
<quote>a</quote>が<quote>z</quote>より低い順位で整列されます。明らかに一般的には
スパムタグの整列は、フィルタで強制的に数値を返させることができれば、概して最も
効果的になると言えます。しかし それができない場合でも、Mutt はまずまず有用な動作
をするわけです。 
</para>

<para>
<command>nospam</command>は<command>spam</command>パターンの例外を書くのに
使います。<command>spam</command>コマンドの何かにヘッダパターンが一致しても、
スパムタグを付けたくない 条件があるなら、そうしたより詳細なパターンを
<command>nospam</command>コマンド配下で、より正確なパターンを列挙することが
できます。
</para>

<para>
<command>nospam</command>に与えられた<emphasis>pattern</emphasis>が、
既存の<command>spam</command>リストエントリ中にある<emphasis>pattern</emphasis>と
正確に同じ場合、例外を追加する代わりに、スパムリストからエントリを削除する
効果があります。同様に、<command>spam</command>コマンドでの
<emphasis>pattern</emphasis>が<command>nospam</command>リスト中のエントリに
一致するならば、nospam エントリが削除されます。<command>nospam</command>の
<emphasis>pattern</emphasis>が<quote>*</quote>ならば、
<emphasis>両方のリストのすべてのパターン</emphasis>が削除されます。これは、
<command>folder-hook</command>といっしょに、<command>spam</command>と
<command>nospam</command>を使う場合は、これを既定動作にすることでしょう。
</para>

<para>
たくさんの<command>spam</command>または<command>nospam</command>コマンドを、
お好みに応じて使う事ができます。Mutt だけで初歩的な<command>spam</command>
検出をすることも可能です。たとえば、<command>spam</command>コマンドを
以下のように使います。
</para>

<screen>
spam "^From: .*MAILER-DAEMON"       "999"
</screen>

</sect1>

<sect1 id="set">
<title>変数の設定と問合せ</title>

<sect2 id="var-types">
<title>変数のタイプ</title>

<para>
Mutt は設定変数で以下のタイプをサポートします:
</para>

<variablelist>
<varlistentry>
<term>boolean</term>
<listitem>
<para>
論理式で <quote>yes</quote> または <quote>no</quote> のどちらか。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>number</term>
<listitem>
<para>
範囲が  -32768 から 32767 までの符号付き整数。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>number (long)</term>
<listitem>
<para>
範囲が -2147483648 から 2147483647 までの符号付き整数。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>string</term>
<listitem>
<para>
任意のテキスト。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>path</term>
<listitem>
<para>
利用者のホームディレクトリなどのためのチルダ(<quote>~</quote>)と同じように、
メールボックスショートカットサポートを含む、パスを表現するための特別な
文字列(<xref linkend="shortcuts"/>を参照)。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>quadoption</term>
<listitem>
<para>
論理値と似ていますが、<quote>ask-yes</quote>や<quote>ask-no</quote>が
<quote>yes</quote> と <quote>no</quote> に事前に選択されている時に
プロンプトをON/OFFします。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>sort order</term>
<listitem>
<para>
変数に依存して、特定の単語だけを値として指定できる特別な文字列。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>regular expression</term>
<listitem>
<para>
正規表現。詳しくは<xref linkend="regexp"/>を参照してください。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>folder magic</term>
<listitem>
<para>
<emphasis>mbox</emphasis>,<emphasis>mmdf</emphasis>, <emphasis>mh</emphasis>又は
<emphasis>maildir</emphasis>として使うためのフォルダタイプを指定します。
現在は、新しく作成したフォルダのタイプを決定するためにのみ使われます。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>e-mail address</term>
<listitem>
<para>
電子メールアドレスで、実際に使う名前の付与は問いません。昔の
<quote><literal>user@example.org (Joe User)</literal></quote>形式はサポートされていますが
非推奨ですので可能な限り使わないでください。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>user-defined</term>
<listitem>
<para>
任意のテキストです。詳細は<xref linkend="set-myvar"/>を参照してください。
</para>
</listitem>
</varlistentry>
</variablelist>

</sect2>

<sect2 id="set-commands">
<title>コマンド</title>

<para>
以下のコマンドは変数の操作と問合せに使えます:
</para>

<para>使用法:</para>

<cmdsynopsis>
<command>set</command>
<group choice="req">
<arg choice="plain">
<group choice="opt">
<arg choice="plain"><option>no</option></arg>
<arg choice="plain"><option>inv</option></arg>
</group>
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">variable=value</replaceable>
</arg>
</group>
<arg choice="opt" rep="repeat"></arg>

<command>toggle</command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>

<command>unset</command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>

<command>reset</command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドは<link linkend="variables">設定変数</link>を設定(または設定解除)するのに
使います。これらは4つの基本的な変数のタイプ、論理値、数値、文字列とquadoption
というがあります。<emphasis>boolean</emphasis>タイプは<emphasis>設定</emphasis>
(true) または <emphasis>非設定</emphasis> (false)にできます。
<emphasis>number</emphasis>変数は正の数値に設定できます。
<emphasis>string</emphasis>変数は表示可能な任意長の文字列で、スペース又は
タブが含まれる場合には引用符でくくる必要があります。また、エスケープシーケンス
<quote>\n</quote>と<quote>\t</quote>を、それぞれ改行とタブとして使えます。
<emphasis>quadoption</emphasis>変数は特定の動作時に、プロンプトの表示をするか
しないかを制御するのに使うか、既定の動作を指定するのに使います。
<emphasis>yes</emphasis>は、質問に対して yes と答えたように、自動的にアクションが
実行されます。同じように、<emphasis>no</emphasis>は、<quote>no</quote>と答えたのと
同じように、自動的にアクションが実行されます。<emphasis>ask-yes</emphasis>は、
既定の答が<quote>yes</quote>で、<emphasis>ask-no</emphasis>は既定の答が
<quote>no</quote>というプロンプトを表示します。
</para>

<para>
先頭に<quote>no</quote>を付けた変数は設定を解除します。たとえば、
<literal><command>set</command> noaskbcc</literal> です。
</para>

<para>
<emphasis>boolean</emphasis>では、先頭に<literal>inv</literal>を付けることができます。
そうすると、変数の値を反転します(ONまたはOFF)。これはマクロを書く時に便利です。
例えば<literal><command>set</command> invsmart_wrap</literal> です。
</para>

<para>
<command>toggle</command>は、自動的にすべての指定した変数に<literal>inv</literal>
プレフィックスを前置します。
</para>

<para>
<command>unset</command>コマンドは、指定した変数すべての先頭に自動的に
<literal>no</literal>を付けます。
</para>

<para>
<literal>&lt;enter-command&gt;</literal>機能を<emphasis>index</emphasis>メニューで
使うと、変数の名前の前に疑問符を付けることによって、変数の値を問い合わせられます。
</para>

<screen>
set ?allow_8bit
</screen>

<para>
疑問符は実際には boolean 変数と quadoption 変数にしか必要ありません。
</para>

<para>
<command>reset</command>コマンドは、与えられた変数すべてをコンパイル時の既定値
(おそらく、このマニュアルに書いてある値) に戻します。 <command>set</command>
コマンドで変数の前に<quote>&amp;</quote>を付けると <command>reset</command>コマンドと
同じ挙動となります。
</para>

<para>
<command>reset</command>コマンドには特別な変数<quote>all</quote>が存在し、
これですべての変数をシステムの既定値に戻すことができます。
</para>

</sect2>

<sect2 id="set-myvar">
<title>ユーザ定義の変数</title>

<sect3 id="set-myvar-intro">
<title>概要</title>

<para>
<literal>my_</literal> as in, for example, <literal>my_cfgdir</literal>.
<link linkend="variables">設定変数</link>セクション中にリストされている変数と共に、
Mutt は名前が<literal>my_</literal>で始まるユーザ定義の変数をサポートします。
例えば、<literal>my_cfgdir</literal>です。
</para>

<para>
<command>set</command>コマンドは固有の<literal>my_</literal>変数を作成するか、
すでに存在していれば、その値を変更します。<command>unset</command>と
<command>reset</command>コマンドは、完全に変数を削除します。
</para>

<para>
ユーザ定義の変数は環境変数と同じように展開されますので(
<link linkend="shell-escape">shell-escape</link>コマンドとバッククォートを
使った展開を除く)、この機能は設定ファイルをより読みやすくするのに使えます。
</para>

</sect3>

<sect3 id="set-myvar-examples">
<title>例</title>

<para>
以下の例は変数<literal>my_cfgdir</literal>に、
<link linkend="source"><command>source</command></link> コマンドの
呼び出しを短くすることを定義し、使用します:
</para>

<example id="ex-myvar1">
<title>設定ファイルの可読性向上のための、ユーザ定義変数の使用</title>
<screen>
set my_cfgdir = $HOME/mutt/config

source $my_cfgdir/hooks
source $my_cfgdir/macros
<emphasis role="comment"># more source commands...</emphasis>
</screen>
</example>

<para>
カスタム変数は現在の変数を他の変数にバックアップするため、マクロ中で使う事もできます。
以下の例では、変数<link linkend="delete">$delete</link> の値を
<literal>my_delete</literal>として、もとの値をセーブしておいて、一時的に変更します。
マクロがすべてのコマンドを実行したあと、<link linkend="delete">$delete</link>の
もとの値をリストアします。
</para>

<example id="ex-myvar2">
<title>他の設定オプション値のバックアップ用にユーザ定義変数を使用</title>
<screen>
macro pager ,x '\
&lt;enter-command&gt;set my_delete=$delete&lt;enter&gt;\
&lt;enter-command&gt;set delete=yes&lt;enter&gt;\
...\
&lt;enter-command&gt;set delete=$my_delete&lt;enter&gt;'
</screen>
</example>

<para>
Mutt は設定ファイルを走査している時には、その値をすでに展開しているので、
最後の例での<literal>$my_delete</literal>の値は、設定ファイルを走査中の時点では、
正確に<link linkend="delete">$delete</link>の値になります。
同じ、又は他のファイルで、他の文が<link linkend="delete">$delete</link>の値を
変更した場合でも、<literal>$my_delete</literal>の値に影響はありません。しかし、
以下で示す例では、ドル記号をエスケープする時、展開は実行時まで遅延します。
</para>

<example id="ex-myvar3">
<title>実行時まで、ユーザ定義の変数の展開は遅延する</title>
<screen>
macro pager &lt;PageDown&gt; "\
&lt;enter-command&gt; set my_old_pager_stop=\$pager_stop pager_stop&lt;Enter&gt;\
&lt;next-page&gt;\
&lt;enter-command&gt; set pager_stop=\$my_old_pager_stop&lt;Enter&gt;\
&lt;enter-command&gt; unset my_old_pager_stop&lt;Enter&gt;"
</screen>
</example>

<para>
<literal>&lt;enter-command&gt;</literal>と<command>set</command>設定コマンドの間に
スペースがあることに注意してください。これは、Mutt が<command>macro</command>のコマンドが
その履歴に記録されることを防ぎます。
</para>

</sect3>

</sect2>

<sect2 id="set-conversions">
<title>タイプの変換</title>

<para>
変数は常時、Mutt が値のタイプに対応する内部表現に解析する文字列の値が割り当てられて
います。たとえば、数値タイプには整数値です。すべての問い合わせ($-拡張を含みます)
において、値は内部タイプから文字列に変換されます。その結果、どの変数も、
ターゲットに対してその内容が有効であれば、任意の値を割り当てることができます。
これは、文字列型のカスタム変数にもカウントされます。解析が失敗した場合、
Mutt はエラーメッセージを表示します。<xref linkend="ex-myvar4"/>には変換の例を
示しています。
</para>

<example id="ex-myvar4">
<title>Type conversions using variables</title>
<screen>
set my_lines = "5"                <emphasis role="comment"># value is string "5"</emphasis>
set pager_index_lines = $my_lines <emphasis role="comment"># value is integer 5</emphasis>

set my_sort = "date-received"     <emphasis role="comment"># value is string "date-received"</emphasis>
set sort = "last-$my_sort"        <emphasis role="comment"># value is sort last-date-received</emphasis>

set my_inc = $read_inc            <emphasis role="comment"># value is string "10" (default of $read_inc)</emphasis>
set my_foo = $my_inc              <emphasis role="comment"># value is string "10"</emphasis>
</screen>
</example>

<para>
これらの割り当てはすべて有効です。しかし、<literal>$my_lines</literal>の値は
<quote>5</quote>(または数字と認識できない何か)で、
<literal>$pager_index_lines</literal>への割り当てはエラーメッセージを生成します。
</para>

<para>
型の変換は、引数を伴うすべての設定コマンドに適用されます。しかし、展開されたすべての
変数の値は単一のトークンとして見なされる事に注意してください。動作する例は
以下の通りです。
</para>

<screen>
set my_pattern = "~A"
set my_number = "10"

<emphasis role="comment"># same as: score ~A +10</emphasis>
score $my_pattern +$my_number</screen>

<para>
<emphasis>動かない</emphasis>例は以下の通りです。
</para>

<screen>
set my_mx = "+mailbox1 +mailbox2"
mailboxes $my_mx +mailbox3</screen>

<para>
<literal>$my_mx</literal>の値が<quote>+mailbox1 +mailbox2</quote>と言う名前の、単一の
メールボックスとして解釈され、2つの異なったメールボックスではありません。
</para>

</sect2>

</sect1>

<sect1 id="source">
<title>他のファイルからの初期かコマンドの読み込み</title>

<para>使用法:</para>

<cmdsynopsis>
<command>source</command>
<arg choice="plain">
<replaceable class="parameter">filename</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドで、初期化コマンドを他のファイルから取り込めます。 例えばエイリアスファイルを
<literal>~/.mail_aliases</literal>に配置すれば、<literal>~/.muttrc</literal>を
読めるようにしても、 エイリアスは秘密にしておけます。
</para>

<para>
ファイル名がチルダ(<quote>~</quote>)で始まっている場合は、
自分のホームディレクトリのパスに展開されます。 
</para>

<para>
ファイル名が縦線(<quote>|</quote>)で終わっていれば、<emphasis>ファイル名</emphasis>は
実行プログラムとみなされ、そこから入力を読み出します(たとえば、
<literal><command>source</command> ~/bin/myscript|</literal>)。
</para>

</sect1>

<sect1 id="unhook">
<title>フックの削除</title>

<para>使用法:</para>

<cmdsynopsis>
<command>unhook</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">hook-type</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
このコマンドで、それまでに設定してきたフックを流し去ることができます。
あらゆるフックを消すのも<quote>*</quote>を引数として与えることによってできますし、
<literal><command>unhook</command> send-hook</literal>のようにして特定のタイプの
フックを すべて消すということもできます。
</para>

</sect1>

<sect1 id="formatstrings">
<title>文字列のフォーマット</title>

<sect2 id="formatstrings-basics">
<title>基本的な使い方</title>

<para>
文字列のフォーマットとは一般的な概念で、特に、
<link linkend="index-format">$index_format</link>,
<link linkend="pager-format">$pager_format</link>,
<link linkend="status-format">$status_format</link> やその他関連する
変数において、Mutt の設定中で存在しています。これらは、とてもわかりやすいので、
すでにどのように使うかを知っている可能性も十分にあります。
</para>

<para>
もっとも基本的なフォーマット文字列の要素は、他の文字が後ろに付くパーセント文字です。
たとえば、<literal>%s</literal>は、<link linkend="index-format">$index_format</link>
変数中でメッセージの Subject: ヘッダを意味します。各フォーマット変数において
<quote>expandos</quote>が有効であることはドキュメントにありますが、
すべてのフォーマットされたexpandosは一般的なモディファイアとしても有効です。
これは懸念事項です。
</para>

<para>
いくつかのモディファイアはC言語のものを持ってきています(あるいは、Perl,Python,
shellやその他の言語で知っているかもしれませんが)。<literal>%-12.12s</literal>
と言う形になる<literal>[-]m.n</literal>というモディファイアもあります。
そのようなプログラム言語では、これらのモディファイアは、位置揃えのために、
結果文字列の最小と最大長を指定するのに使えます。パーセント文字のあとに、
<quote>-</quote>記号がある場合、文字列は右揃えではなく左揃えとなります。
直後に数字がある場合、それはフォーマット文字列が占める最小のスペースです。
それよりも自然に小さい場合は、スペースが埋め込まれます。
小数点と他の数字が後に付く場合は、最大の範囲となります。本来のサイズに関係なく、
文字列はその幅よりも長くできません。各3要素はオプションなので、
<literal>%-12s</literal>,<literal>%4c</literal>, <literal>%.15F</literal> と
<literal>%-12.15L</literal> はすべて正しいフォーマットです。
</para>

<para>
Mutt はフォーマット文字列にいくつかのモディファイアを追加しています。等号
(<literal>=</literal>)を数字の前に使った場合(前述のマイナスのように)、
その最小幅いないで文字列を中央揃えにします。たとえば、<literal>%=14y</literal>は、
%y 拡張用に14文字を反転します。これは、
<link linkend="index-format">$index_format</link>中のX-Label: ヘッダです。
展開の結果の文字列が14文字よりも少ない場合、14文字の中で中央揃えになります。
メッセージのX-Label が<quote>test</quote>だった場合、展開後は以下のようになります。
<quote>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</quote>
</para>

<para>
expando が置き換わる場合に影響のあるあまり知られていないモディファイアが
2つあります。下線(<quote>_</quote>)文字が任意のフォーマットモディファイアの
と expando 文字の間に位置する場合(上記のように)、すべて小文字に置き換わります。
コロン(<quote>:</quote>)を使った場合、すべての小数点は下線付きになります。
</para>

</sect2>

<sect2 id="formatstrings-conditionals">
<title>条件式</title>

<para>
フォーマット文字列変数に依存しますが、いくつかのシーケンスは、値が0以外の場合に
文字列を表示するために使用できます。たとえば、フラグ付きのメッセージが
存在するような場合にのみ、その数を表示したい場合です。この場合 0 は特に意味が
ありません。オプションで、上記のシーケンスのいずれかに基づいて、文字列を表示
するには、以下の構文を使用します。
</para>

<screen>
%?&lt;sequence_char&gt;?&lt;optional_string&gt;?</screen>

<para>
ここで、<emphasis>sequence_char</emphasis> はexpando で、
<emphasis>optional_string</emphasis>は、<emphasis>sequence_char</emphasis>が
ゼロ以外の時に表示したい文字列です。<emphasis>optional_string</emphasis>は
通常のテキストと同じように、その他のシーケンスを含んでいてもかまいません。
しかし、オプションの文字列をネストしてはいけません。
</para>

<para>
<link linkend="status-format">$status_format</link>中のメールボックス中の
新規メッセージの数をオプションで表示するための例は下記の通りです。
</para>

<screen>
%?n?%n new messages.?</screen>

<para>
以下の構文を使って、二つの文字列を切り換えることもできます。
</para>

<screen>
%?&lt;sequence_char&gt;?&lt;if_string&gt;&amp;&lt;else_string&gt;?</screen>

<para>
<emphasis>sequence_char</emphasis>がゼロでない場合、<emphasis>if_string</emphasis>は
展開され、その他の場合は、<emphasis>else_string</emphasis>が展開されます。
</para>

</sect2>

<sect2 id="formatstrings-filters">
<title>フィルタ</title>

<para>
縦棒(<quote>|</quote>)で終わっているフォーマット文字列は、空白文字をセパレータ
として使って、文字列中の最初の単語を展開してパイプします。返される文字列は
表示のために使われます。返された文字列が % で終わっている場合、次の時に
フォーマッタを通ります。これで、フィルタが、% expandos を含む置換フォーマット文字列を
生成できるようになります。
</para>

<para>
フォーマット文字列中の、すべての % expandos は、スクリプトが呼ばれる前に展開されるので、
</para>

<example id="ex-fmtpipe">
<title>フォーマット文字列中の外部フィルタの使用</title>
<screen>
set status_format="script.sh '%r %f (%L)'|"
</screen>
</example>

<para>
は、Mutt が<literal>%r</literal>, <literal>%f</literal>と<literal>%L</literal>を、
スクリプトが呼ばれる前に展開するようにさせます。例では、さらに、
引数が引用符で囲まれています。スクリプトは単一引用符の間の文字列を唯一の引数として
展開された文字列を受け取ります。
</para>

<para>
実際の例は、Mutt のドキュメントの<literal>samples</literal>サブディレクトリ
中にインストールされている<literal>mutt_xtitle</literal>スクリプトです。
これは、もしもサポートされていれば、現在のターミナルのタイトルを設定するための、
<link linkend="status-format">$status_format</link>に対するフィルタとして使われます。
</para>

</sect2>

<sect2 id="formatstrings-padding">
<title>パディング</title>

<para>
多くのフォーマット文字列中では、Mutt は特別な %-expandos を使う事で、異なったタイプの
パディングをサポートします。
</para>

<variablelist>
<varlistentry>
<term><literal>%|X</literal></term>
<listitem>
<para>
これが発生した時、Mutt は文字<literal>X</literal>で、行の残りを埋めます。
たとえば、以下のようにすると、行の残りをダッシュで埋めます。
</para>
<screen>
set status_format = "%v on %h: %B: %?n?%n&amp;no? new messages %|-"</screen>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>%&gt;X</literal>
</term>
<listitem>
<para>
以前の expando が行の終わりで停止するため、<literal>%&gt;X</literal> expando 経由で
二つの項目の間のギャップを埋める方法が存在する必要があります。二つのアイテムの間で
たくさんの文字<literal>X</literal>を埋めるので、行の残りは右詰になります。例えば
バージョン文字列を置かず、上記の例でのホスト名を左に配置しますが、その右は空白で
埋める場合は(<literal>%&gt;</literal>のあとの空白に注意)以下のようにします。
</para>
<screen>
set status_format = "%B: %?n?%n&amp;no? new messages %&gt; (%v on %h)"</screen>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>%*X</literal>
</term>
<listitem>
<para>
通常の右揃えは<literal>%&gt;</literal>の左側にすべて表示し、余裕がある場合にのみ、
埋め込み文字や右にあるものを表示します。それと対照的に、<quote>soft-fill</quote>は
右側を優先し、表示するスペースを保障し、まだスペースが余っている場合にのみ
埋め込み文字を表示します。必要であれば、soft-fill は右側のテキストために場所を
空けるため、左側のテキストをカットします。たとえば、可能な限り画面に収まるように、
題名を右揃えするためには、以下のようにします(<literal>%* </literal>のあとの二つの
空白に注意:2つ目は題名と切り取られた右側との間にスペースがある事を確認します)。
</para>
<screen>
set index_format="%4C %Z %{%b %d} %-15.15L (%?l?%4l&amp;%4c?)%*  %s"</screen>
</listitem>
</varlistentry>
</variablelist>

</sect2>

<sect2 id="formatstrings-size">
<title>バイト長の表示</title>

<para>
メッセージのサイズをバイト単位で表示する expandos を含む種々のフォーマット文字列があります。
これには、
<literal>%s</literal> in <link linkend="attach-format">$attach_format</link>,
<literal>%l</literal> in <link linkend="compose-format">$compose_format</link>,
<literal>%s</literal> in <link linkend="folder-format">$folder_format</link>,
<literal>%c</literal> in <link linkend="index-format">$index_format</link>と
<link linkend="status-format">$status_format</link>中の%l と %Lがあります。
どのように数字が表示されるかをカスタマイズするために使う四つの設定変数があります。
</para>

<para>
  <link linkend="size-show-bytes">$size_show_bytes</link>はサイズが
  1キロバイトよりも小さい場合にバイト長を表示するのに使います。
  設定されていない場合、代わりにキロバイト単位で表示されます。
</para>

<para>
  <link linkend="size-show-mb">$size_show_mb</link>はサイズが1メガバイト
  以上の時にメガバイト単位で表示します。設定されていない場合、代わりに
  キロバイト単位で表示されます(おそらくかなり大きな値になります)。
</para>

<para>
  <link linkend="size-show-fractions">$size_show_fractions</link>は、
  0 から 10 キロバイトと、 1 から 10 メガバイトで、単一の10進領域に
  数字を表示します。
</para>

<para>
  <link linkend="size-units-on-left">$size_units_on_left</link>は、
  単位(<quote>K</quote> 又は <quote>M</quote>)を、  設定されていない場合、
  右側に表示される代わりに、左側に表示します。
</para>

<para>
  これらの変数は、いくつか他の場所でのサイズ表示にも影響します。たとえば、
  ページャ内での添付デリミタや処理の進行表示などです。
</para>
</sect2>

</sect1>

<sect1 id="mailto-allow">
<title>mailto: URL 中でのヘッダフィールドの許可制御</title>

<para>使用法:</para>

<cmdsynopsis>
<command>mailto_allow</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">header-field</replaceable>
</arg>
</group>

<command>unmailto_allow</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">header-field</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
セキュリティ対策として、Mutt はユーザが承認したヘッダフィールドのみを
<literal>mailto:</literal> URLから追加します。これは、Mutt が特定のヘッダ、
たとえば、<literal>Attach:</literal>のようなものを特別な方法で扱うので必要です。
<literal>mailto_allow</literal> と <literal>unmailto_allow</literal>コマンドは、
承認されたヘッダのリストを修正するのに使います。
</para>
<para>
Mutt は、RFC2368 中の<literal>mailto:</literal>定義によって、規定されている唯一の
条件である、<literal>Subject</literal>と<literal>Body</literal>ヘッダフィールドのみを
含むように既定のリストを初期化します。
</para>
</sect1>

</chapter>

<chapter id="advancedusage">
<title>高度な使用方法</title>

<sect1 id="charset-handling">
<title>文字セットのハンドリング</title>

<para>
<quote>文字セット</quote>は、基本的な、バイトとグリフのマッピングで、特定の
文字エンコーディングスキームを意味します。たとえば、ISO 8859 文字セットファミリ
では、8ビット単位のエンコーディングが使用されます。Unicode 文字セットでは、
異なった文字エンコーディングが使われます。UTF-8 がもっとも一般的です。
UTF-8 では1 バイトから 4 バイトまでの間の可変長で文字が表現されます。
</para>

<para>
Mutt はシェルから動かすコマンドラインツールで、特外部ツールへ特定のタスクを
委任するので(たとえばメッセージの作成/編集に使うエディタなど)、
それらのツールはすべて文字セットとエンコーディングを認識できる必要があります。
平文ファイルの文字セットを確実に認識できる方法はありません。相互運用性は
明確に定義された環境変数を使用することで得られます。完全なセットは
コマンドライン上で、<literal>locale</literal> を実行することにより表示
できます。
</para>

<para>
開始時点で、Mutt はローカルで定義された環境変数を調べる固有の処理で、
文字セットを決定します。そのため、一般的には、Mutt 中で<literal>$charset</literal>
変数を設定する必要はありません。Mutt はシステムやライブラリの機能を使って、
文字セットを決め、Mutt に影響を及ぼさないようにしているので、逆効果になる
場合もあります。Muttにロケールの設定自体を実行させるのがもっとも安全です。
</para>

<para>
定期的に複数の文字セットで仕事をしている場合は、Unicode とUTF-8 ロケールを
使う事を強く推奨します。Unicode は同じ時にメッセージ中でほぼすべての文字を
表現できます。Unicode ロケールを使わない場合、使用しているロケールでは
表現できない文字を含むめっーセージを受け取ることがあるかもしれません。
そのようなメッセージを表示、返信、転送する場合、情報が失われ、メッセージが
使用できなくなる可能性があります(あなただけではなく、受信者にも、おかしく
なった部分は、情報を推測することができないため元に戻すことができません)。
</para>

<para>
Unicode ロケールはすべての変換を不要にし、変換エラーのリスクをなくします。
また、Mutt と外部プログラムとの間での、文字セットに関する間違った期待を
なくします。
</para>

<para>
ターミナルエミュレータも現在のロケールに対して適切に設定されねばなりません。
ターミナルエミュレータは通常、環境変数のロケールを<emphasis>使いません</emphasis>
ので、個別に設定する必要があります。ターミナルが正しく設定されていないと、
Mutt はランダムで期待されない文字(疑問符、8進コード、あるいはランダムなグリフ)
を表示するかもしれず、期待したとおりにフォーマット文字列が動かないかもしれず、
非ASCII文字を入力できないかもしれず、さらにそのほかの不具合があるかもしれません。
データは常時バイトで表示されるので、正しい設定はマシンにとってとても重要で、
すべての文字セットは同じに<quote>見えるようにします</quote>。
</para>

<para>
注意: システムとライブラリ機能のロケールに期待しているものと、
Mutt に指定されたロケールとの間に何らかのミスマッチがあると、
非ASCIIでの入力動作に不具合が生じる可能性があります。この場合、一見すると
ランダムな場所で失敗します。ローカルのメール処理だけが影響を受けるわけでは
ないので、この警告は真摯に受け止める必要があります。送信メッセージは不正な文字
セット情報を伝搬するかもしれないので、<emphasis>受信者</emphasis>も同じように
扱うことになってしまいます。多くの場合、<literal>$charset</literal>を直接設定
する必要性は、Mutt の問題ではなく、ターミナルと環境変数の設定の問題です。
</para>

<para>
公式に割り当てられ、知られている文字セットの一覧は、
<ulink url="http://www.iana.org/assignments/character-sets">IANA</ulink>にあり、
ローカルでサポートされているロケールは
<literal>locale -a</literal>を実行することで分かります。
</para>

</sect1>

<sect1 id="regexp">
<title>正規表現</title>

<para>
Mutt におけるすべての文字列パターンは、より複雑な<link linkend="patterns">patterns</link>
における文字列パターンも含めて、すべて<quote>POSIX 拡張の</quote>正規表現(regexp)
(egrep や GNU awk で使われている文法とほぼ同じ)を使って指定しなくてはなりません。
便宜のため、以下にこの文法の簡単な説明を含めました。 
</para>

<para>
検索は、パターンに一つでも大文字があれば文字の大小を意識し、それ以外は大小
を意識しません。
</para>

<note>
<para>
<quote>\</quote>は、初期化コマンドの中で使う場合には、<quote>\\</quote>のように
くくらなければなりません。
</para>
</note>

<para>
正規表現は一つのパターンで何種類かの文字列を表します。 正規表現は代数表現と
同じように、より小さな式を色々な演算子で組み合わせて構築されます。
</para>

<note>
<para>
正規表現は、「"」や「'」で囲んだり区切ったりできます。これは正規表現が
空白文字を含む場合に便利です。区切り記号「"」と「'」の 処理に関するさらに
詳細な情報は、<xref linkend="muttrc-syntax"/>を参照してください。
そのままの記号として「"」や「'」に合致させるには、 記号の前に「\」(バックスラッシュ)
をつけてください。
</para>
</note>

<para>
文字ひとつに一致する正規表現が、基本となる単位です。すべての英字と数字を含む
ほとんどの文字は、自分自身に一致する正規表現です。特殊な意味を持つメタ文字記号は、
前にバックスラッシュを付けることによって 本来の記号に一致します。
</para>

<para>
ピリオド <quote>.</quote> は任意の文字に一致します。サーカムフレックス
<quote>^</quote>とドル記号<quote>$</quote>はそれぞれ、行の最初と最後という、
文字ではない部分に合致するメタ文字です。 
</para>

<para>
<quote>[</quote> と <quote>]</quote> で囲われた文字のリストは、その中のどの
1文字にも一致します。そのリストの先頭の文字がサーカムフレックス<quote>^</quote>
の場合は、そのリストに<emphasis>ない</emphasis>文字に一致します。たとえば、
正規表現 <emphasis>[0123456789]</emphasis> は任意の十進数の1文字に一致します。
ハイフン <quote>-</quote>を、ある範囲内における最初と最後の文字の間に置けば、
その範囲の ASCII 文字全体を指定できます。リストの中ではほとんどのメタ文字から
特別な意味がなくなります。文字<quote>]</quote>そのものをリストに含めるには、
リストの最初に置きます。 同様に、文字<quote>^</quote>そのものを含めたい場合には、
最初以外のどこかに置きます。そして、ハイフン <quote>-</quote> そのものを含めたい
場合にはリストの最後に置きます。
</para>

<para>
特定の名前付き文字クラスがあらかじめ定義されています。文字クラスは、
<quote>[:</quote>、クラスを表すキーワード、<quote>:]</quote> という形になっています。
以下 <xref linkend="posix-regex-char-classes"/> のクラスは POSIX 標準で
定義されているものです。
</para>

<table id="posix-regex-char-classes">
<title>POSIX 正規表現文字クラス</title>
<tgroup cols="2">
<thead>
<row><entry>文字クラス</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>[:alnum:]</entry><entry>アルファベットと数字</entry></row>
<row><entry>[:alpha:]</entry><entry>アルファベット</entry></row>
<row><entry>[:blank:]</entry><entry>空白も他はタブ文字</entry></row>
<row><entry>[:cntrl:]</entry><entry>制御文字</entry></row>
<row><entry>[:digit:]</entry><entry>数字</entry></row>
<row><entry>[:graph:]</entry><entry>印刷かつ表示可能な文字(空白は印刷可能だが不可視、<quote>a</quote>は両方とも可)</entry></row>
<row><entry>[:lower:]</entry><entry>アルファベット小文字</entry></row>
<row><entry>[:print:]</entry><entry>印刷可能文字(制御文字以外)</entry></row>
<row><entry>[:punct:]</entry><entry>記号(英字、数字、制御文字、空白以外の文字)</entry></row>
<row><entry>[:space:]</entry><entry>スペース(空白文字、タブと改ページなど)</entry></row>
<row><entry>[:upper:]</entry><entry>アルファベット大文字</entry></row>
<row><entry>[:xdigit:]</entry><entry>16進数</entry></row>
</tbody>
</tgroup>
</table>

<para>
文字クラスは、文字リストの括弧内の正規表現でのみ有効です。
</para>

<note>
<para>
このクラス名に付いている角括弧はシンボル名の一部であり、リストを囲む角括弧に
加えて、さらに必要になるということに注意してください。たとえば、
<emphasis>[[:digit:]]</emphasis>は<emphasis>[0-9]</emphasis>と同じです。
</para>
</note>

<para>
さらに二つの特殊シーケンスが文字リスト中で使えます。それらは非ASCII文字セットに
適用されるもので、以下のように、複数の文字で表現される単一の記号(照合要素と
呼びます)、および照合や整列の目的で、同等のいくつかの文字を含めることができます。
</para>

<variablelist>

<varlistentry>
<term>照合記号</term>
<listitem>
<para>
照合記号は複数文字の照合要素を <quote>[.</quote> と <quote>.]</quote>で括ったものです。
たとえば、<quote>ch</quote> が照合要素だとすると、<emphasis>[[.ch.]]</emphasis>が
の照合要素に一致する正規表現となります。しかし、<emphasis>[ch]</emphasis>というように
記述すると、<quote>c</quote> 又は <quote>h</quote> のどちらかに一致する正規表現に
なってしまいます。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>等価クラス</term>
<listitem>
<para>
等価クラスは、ロケール個別にに定義した、文字リストと等価なものの名前です。
名前は<quote>[=</quote>と<quote>=]</quote>で囲みます。たとえば、名前<quote>e</quote>は
grave (<quote>&egrave;</quote>)付きの<quote>e</quote>,
acute (<quote>&eacute;</quote>)付きの<quote>e</quote>と
ただの<quote>e</quote>すべてを表すのに使えます。この場合、
<emphasis>[[=e=]]</emphasis>は、任意の、grave 付きの<quote>e</quote>
(<quote>&egrave;</quote>)、acute 付きの<quote>e</quote>
(<quote>&eacute;</quote>)と<quote>e</quote>に一致する正規表現になります。
</para>
</listitem>
</varlistentry>
</variablelist>

<para>
一文字に一致する正規表現は、<xref linkend="regex-repeat"/>で説明されている、
いくつかある繰り返し演算子のうちのいずれかを後置することができます。
</para>

<table id="regex-repeat">
<title>正規表現の繰り返し演算子</title>
<tgroup cols="2">
<thead>
<row><entry>オペレータ</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>?</entry><entry>この記号の前にあるアイテムは、あってもなくても良く、あっても一回しか一致しない</entry></row>
<row><entry>*</entry><entry>この記号の前のアイテムは 0 回でもそれ以上でも一致する</entry></row>
<row><entry>+</entry><entry>この記号の前のアイテムは一回以上あれば一致する</entry></row>
<row><entry>{n}</entry><entry>この前のアイテムは、きっちり<emphasis>n</emphasis>回なら一致する</entry></row>
<row><entry>{n,}</entry><entry>この前のアイテムは<emphasis>n</emphasis>回以上で一致する</entry></row>
<row><entry>{,m}</entry><entry>この前のアイテムは<emphasis>m</emphasis>回まで一致する</entry></row>
<row><entry>{n,m}</entry><entry>この前のアイテムは<emphasis>n</emphasis>回以上<emphasis>m</emphasis> 回までなら一致する</entry></row>
</tbody>
</tgroup>
</table>

<para>
二つの正規表現を連結することができます。その結果できた正規表現が一致するのは、それぞれに一致する
文字列をその順番に並べたものです。
</para>

<para>
二つの正規表現は中間演算子<quote>|</quote>で連結することもでき、二つをこのように
連結してできる正規表現は、いずれかの部分式に一致する文字列に一致します。
</para>

<para>
繰り返し演算子は連結演算子より優先します。連結演算子は、代替表現より優先します。
</para>

<note>
<para>
in <xref linkend="regex-gnu-ext"/>.
Mutt を内蔵された正規表現エンジンを含む形でコンパイルしていれば、
<xref linkend="regex-gnu-ext"/>で示されている演算子を正規表現の中で使うことができます。
</para>
</note>

<table id="regex-gnu-ext">
<title>GNU 拡張正規表現</title>
<tgroup cols="2">
<thead>
<row><entry>正規表現</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>\\y</entry><entry>単語が開始または終了する部分に一致</entry></row>
<row><entry>\\B</entry><entry>単語の中にある空文字列に一致</entry></row>
<row><entry>\\&lt;</entry><entry>単語の開始部分に一致</entry></row>
<row><entry>\\&gt;</entry><entry>単語の終了部分に一致</entry></row>
<row><entry>\\w</entry><entry>単語を構成する文字(英文字、数字あるいは下線)に一致</entry></row>
<row><entry>\\W</entry><entry>単語を構成する文字以外に一致</entry></row>
<row><entry>\\`</entry><entry>バッファ(文字列)の先頭に一致</entry></row>
<row><entry>\\'</entry><entry>バッファの最後の空の文字列に一致</entry></row>
</tbody>
</tgroup>
</table>

<para>
これらの演算子は POSIX で定められていないため、これらを標準のライブラリとして
使えたり、使えなかったりするシステムがあることに注意してください。
</para>

</sect1>

<sect1 id="patterns">
<title>パターン: 検索、制限とタグ付け</title>

<sect2 id="patterns-modifier">
<title>パターンモディファイア</title>

<para>
Mutt の多くのコマンドでは、パターンマッチング機能使用できます
(<literal>limit</literal>, <literal>tag-pattern</literal>,<literal>delete-pattern</literal>
など)。<xref linkend="tab-patterns"/>で、メッセージを選択するためのいくつかの方法を
示します。
</para>

<table id="tab-patterns">
<title>パターンモディファイア</title>
<tgroup cols="2">
<thead>
<row><entry>パターンモディファイア</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>~A</entry><entry>すべてのメッセージ</entry></row>
<row><entry>~b <emphasis>EXPR</emphasis></entry><entry>メッセージ本文に<emphasis>EXPR</emphasis>を含むメッセージ ***)</entry></row>
<row><entry>=b <emphasis>STRING</emphasis></entry><entry>IMAPが有効な場合、~b と似ているが、各メッセージをダウンロードしてローカルに検索する代わりに、サーバ上で<emphasis>STRING</emphasis>を検索</entry></row>
<row><entry>~B <emphasis>EXPR</emphasis></entry><entry>メッセージ本文のどこかに<emphasis>EXPR</emphasis>を含むメッセージ ***)</entry></row>
<row><entry>=B <emphasis>STRING</emphasis></entry><entry>IMAPが有効な場合、~B と似ているが、各メッセージをダウンロードしてローカルに検索する代わりに、サーバ上で<emphasis>STRING</emphasis>を検索</entry></row>
<row><entry>~c <emphasis>EXPR</emphasis></entry><entry><emphasis>EXPR</emphasis>に Cc: で送られているメッセージ</entry></row>
<row><entry>%c <emphasis>GROUP</emphasis></entry><entry><emphasis>GROUP</emphasis>メンバの誰かに Cc: で送られているメッセージ</entry></row>
<row><entry>~C <emphasis>EXPR</emphasis></entry><entry><emphasis>EXPR</emphasis> が to: か cc: のメッセージ</entry></row>
<row><entry>%C <emphasis>GROUP</emphasis></entry><entry><emphasis>GROUP</emphasis>の誰かに to: か cc: で送られているメッセージ</entry></row>
<row><entry>~d [<emphasis>MIN</emphasis>]-[<emphasis>MAX</emphasis>]</entry><entry>日付の範囲内で <quote>date-sent</quote> になっているメッセージ</entry></row>
<row><entry>~D</entry><entry>削除されるメッセージ</entry></row>
<row><entry>~e <emphasis>EXPR</emphasis></entry><entry><quote>Sender</quote>フィールドに<emphasis>EXPR</emphasis>を含むメッセージ</entry></row>
<row><entry>%e <emphasis>GROUP</emphasis></entry><entry><quote>Sender</quote>フィールドに<emphasis>GROUP</emphasis>のメンバを含むメッセージ</entry></row>
<row><entry>~E</entry><entry>期限切れのメッセージ</entry></row>
<row><entry>~F</entry><entry>フラグ付きのメッセージ</entry></row>
<row><entry>~f <emphasis>EXPR</emphasis></entry><entry><emphasis>EXPR</emphasis>から送られたメッセージ</entry></row>
<row><entry>%f <emphasis>GROUP</emphasis></entry><entry><emphasis>GROUP</emphasis>の誰かから送られたメッセージ</entry></row>
<row><entry>~g</entry><entry>暗号で署名されているメッセージ</entry></row>
<row><entry>~G</entry><entry>暗号化されているメッセージ</entry></row>
<row><entry>~h <emphasis>EXPR</emphasis></entry><entry>メッセージヘッダに<emphasis>EXPR</emphasis>を含むメッセージ ***)</entry></row>
<row><entry>=h <emphasis>STRING</emphasis></entry><entry>IMAPが有効な場合、 ~h と似ているが、各メッセージをダウンロードしてローカルに検索する代わりに、サーバ上で<emphasis>STRING</emphasis>を検索;
<emphasis>STRING</emphasis> は<quote>header: substring</quote>の形でなければならない(以下参照)。</entry></row>
<row><entry>~H <emphasis>EXPR</emphasis></entry><entry><emphasis>EXPR</emphasis>に一致するスパム属性を持つメッセージ</entry></row>
<row><entry>~i <emphasis>EXPR</emphasis></entry><entry><quote>Message-ID</quote>フィールドが<emphasis>EXPR</emphasis>に一致するメッセージ</entry></row>
<row><entry>~k</entry><entry>PGPの鍵を持つメッセージ</entry></row>
<row><entry>~L <emphasis>EXPR</emphasis></entry><entry><emphasis>EXPR</emphasis>が出したか受け取ったか、いずれかのメッセージ</entry></row>
<row><entry>%L <emphasis>GROUP</emphasis></entry><entry><emphasis>GROUP</emphasis>のメンバの誰かが出したか受け取ったか、いずれかのメッセージ</entry></row>
<row><entry>~l</entry><entry>既知のメーリングリストへ宛てたメッセージ</entry></row>
<row><entry>~m [<emphasis>MIN</emphasis>]-[<emphasis>MAX</emphasis>]</entry><entry><emphasis>MIN</emphasis> to <emphasis>MAX</emphasis>範囲内のメッセージ *)</entry></row>
<row><entry>~M <emphasis>EXPR</emphasis></entry><entry>mime Content-Type が <emphasis>EXPR</emphasis>に一致するメッセージ ***)</entry></row>
<row><entry>~n [<emphasis>MIN</emphasis>]-[<emphasis>MAX</emphasis>]</entry><entry><emphasis>MIN</emphasis> to <emphasis>MAX</emphasis>の範囲のスコアを持つメッセージ *)</entry></row>
<row><entry>~N</entry><entry>新しいメッセージ</entry></row>
<row><entry>~O</entry><entry>古いメッセージ</entry></row>
<row>
<entry>~p</entry>
<entry>自分宛のメッセージ(<link linkend="from">$from</link>, <command>alternates</command>, とローカルの account/hostname 情報を参照する)</entry>
</row>
<row>
<entry>~P</entry>
<entry>自分が送信したメッセージ(<link linkend="from">$from</link>, <command>alternates</command>, とローカルの account/hostname 情報を参照する)</entry>
</row>
<row><entry>~Q</entry><entry>返信済みのメッセージ</entry></row>
<row><entry>~r [<emphasis>MIN</emphasis>]-[<emphasis>MAX</emphasis>]</entry><entry><quote>受信日付</quote>が日付の範囲内にあるメッセージ</entry></row>
<row><entry>~R</entry><entry>既読メッセージ</entry></row>
<row><entry>~s <emphasis>EXPR</emphasis></entry><entry><quote>Subject</quote>フィールド内に<emphasis>EXPR</emphasis>があるメッセージ</entry></row>
<row><entry>~S</entry><entry>置き換えられたメッセージ</entry></row>
<row><entry>~t <emphasis>EXPR</emphasis></entry><entry><emphasis>EXPR</emphasis>に宛てたメッセージ</entry></row>
<row><entry>~T</entry><entry>タグ付きのメッセージ</entry></row>
<row><entry>~u</entry><entry>購読しているメーリングリスト宛てのメッセージ</entry></row>
<row><entry>~U</entry><entry>未読のメッセージ</entry></row>
<row><entry>~v</entry><entry>折りたたんだスレッドにあるメッセージ</entry></row>
<row><entry>~V</entry><entry>暗号検証済みメッセージ</entry></row>
<row><entry>~x <emphasis>EXPR</emphasis></entry><entry><quote>References</quote> 又は <quote>In-Reply-To</quote>フィールド中に<emphasis>EXPR</emphasis>を含むメッセージ</entry></row>
<row><entry>~X [<emphasis>MIN</emphasis>]-[<emphasis>MAX</emphasis>]</entry><entry><emphasis>MIN</emphasis> から <emphasis>MAX</emphasis> の添付があるメッセージ *) ***)</entry></row>
<row><entry>~y <emphasis>EXPR</emphasis></entry><entry><quote>X-Label</quote>中に<emphasis>EXPR</emphasis>を含むメッセージ</entry></row>
<row><entry>~z [<emphasis>MIN</emphasis>]-[<emphasis>MAX</emphasis>]</entry><entry>サイズが<emphasis>MIN</emphasis> から <emphasis>MAX</emphasis>の範囲内のメッセージ *) **)</entry></row>
<row><entry>~=</entry><entry>重複しているメッセージ(<link linkend="duplicate-threads">$duplicate_threads</link>)を参照</entry></row>
<row><entry>~$</entry><entry>参照されていないメッセージ(スレッド表示が必要)</entry></row>
<row><entry>~(<emphasis>PATTERN</emphasis>)</entry><entry><emphasis>PATTERN</emphasis>に一致するメッセージを含むスレッド中のメッセージ
、例えば、~(~P) は、自分からのメッセージを含むすべてのスレッド</entry></row>
<row><entry>~&lt;(<emphasis>PATTERN</emphasis>)</entry><entry>直近の親が<emphasis>PATTERN</emphasis>に一致するメッセージ、
たとえば、~&lt;(~P) は、自分のメッセージに対する返信</entry></row>
<row><entry>~&gt;(<emphasis>PATTERN</emphasis>)</entry><entry>直近の子が<emphasis>PATTERN</emphasis>に一致するメッセージ、
たとえば、~&gt;(~P) は、自分が返信したメッセージ</entry></row>
</tbody>
</tgroup>
</table>

<para>
ここで、<emphasis>EXPR</emphasis> は <link linkend="regexp">正規表現</link>で、
<emphasis>GROUP</emphasis>は<link linkend="addrgroup">アドレスグループ</link>です。
</para>

<para>
*) <quote>&lt;[<emphasis>MAX</emphasis>]</quote>,
<quote>&gt;[<emphasis>MIN</emphasis>]</quote>,
<quote>[<emphasis>MIN</emphasis>]-</quote> と
<quote>-[<emphasis>MAX</emphasis>]</quote> という形式も使えます。
</para>

<para>
**) キロバイトとメガバイトを表すための
接尾辞 <quote>K</quote> と <quote>M</quote>も使えます。
</para>

<para>
***) これらのパターンは、各メッセージを読み込んでいるため、より遅くなることがあります。
IMAP を使う場合は、各メッセージをダウンロードする必要があります。
これらは<link linkend="score-command">message scoring</link>には使えず、
インデックスの色づけには使わないことを推奨します。
</para>

<para>
パターン中で正規表現を使う場合は、特別な注意が必要です。具体的には、これらの
パターンを Mutt が処理する場合、通常引用に使われるバックスラッシュ
(<quote>\</quote>)を1段階だけ取り除きます。正規表現でバックスラッシュを使う場合は、
代わりに二つのバックスラッシュ(<quote>\\</quote>)を使う必要があります。
</para>

<para>
パターン名中で、 ~ の代わりに = を使う事で、Mutt  に、<emphasis>EXPR</emphasis> を、
正規表現の代わりに単純な文字列として扱わせることができます。たとえば、
<literal>=b *.*</literal> は リテラル文字 <quote>*.*</quote> を含むすべての
メッセージを見つけます。単純な文字列の一致は、正規表現よりも強力ではありませんが、
より高速になる可能性があります。
</para>

<para>
IMAP フォルダでは、文字列の一致 <literal>=b</literal>,<literal>=B</literal>と
<literal>=h</literal> は、すべてのメッセージをフェッチするのではなく、
サーバ上で実行されます。IMAP は <literal>=h</literal> を特別扱いします。
これは、<quote>header: substring</quote>の形である必要があり、ヘッダ名と部分的に
一致はしません。substring 部分は、単に特定のヘッダを含むメッセージを、値に
関係なく検索する場合には、省略することができます。
</para>

<para>
アドレスリストに一致するパターン(特に c, C, p, P と t)は、リスト全体の中で、
少なくとも1つ一致するのであれば、一致します。そのリストのすべての要素が一致している
事を確認したい場合は、パターンの前に、<quote>^</quote>を付ける必要があります。
以下の例では、受信者がドイツからのもののみを持つメールすべてに一致します。
</para>

<example id="ex-recips">
<title>アドレスリスト中のすべてのアドレス一致の例</title>
<screen>
^~C \.de$
</screen>
</example>

<para>
"@" モディファイアを使って定義した別名へのアドレスパターンマッチングを制限する
ことができます。以下の例では、受信者がすべてドイツからで、別名リストに
あるメッセージに一致する例です。
</para>

<example id="ex-restrict-to-aliases">
<title>別名に限定されたマッチング</title>
<screen>
^@~C \.de$
</screen>
</example>

<para>
定義済みの任意の別名に一致するためには、任意の文字列に一致する正規表現を使います。
以下の例では、メッセージの送信者が別名として定義済みのものに一致する例です。
</para>

<example id="ex-match-alias">
<title>任意の定義済み別名に一致</title>
<screen>
@~f .
</screen>
</example>

</sect2>

<sect2 id="simple-searches">
<title>簡単な検索</title>

<para>
Mutt は<quote>simple searches</quote>と呼ばれるものの二つのバージョンをサポートします。
これらは検索、制限および同等の操作ののために入力された問合せが、有効な
パターンモディファイアを含んでいないように見えた場合に発行されます
(すなわち、<quote>~</quote>, <quote>=</quote> 又は <quote>%</quote>のどれも含んでいない)。
問い合わせに前述の特別文字を含んでいる場合、バックスラッシュ(<quote>\</quote>)を
前置してエスケープしなければなりません。
</para>

<para>
The first type is by checking whether the query string equals
a keyword case-insensitively from <xref linkend="tab-simplesearch-keywords"/>:
If that is the case, Mutt will use the shown pattern modifier instead.
If a keyword would conflict with your search keyword, you need to turn
it into a regular expression to avoid matching the keyword table. For
example, if you want to find all messages matching <quote>flag</quote>
(using <link linkend="simple-search">$simple_search</link>)
but don't want to match flagged messages, simply search for
<quote><literal>[f]lag</literal></quote>.
最初のタイプは、<xref linkend="tab-simplesearch-keywords"/>から、
問い合わせ文字列が、キーワードの大文字小文字を区別しないで等しいかどうかを
チェックするものです。もしそうならば、Mutt は示されたパターン修飾子を代わりに使います。
検索キーワードと競合するキーワードがある場合は、キーワードテーブルに一致するのを
防ぐために、正規表現にそれを変換する必要があります。
例えば、<quote>flag</quote>に一致するすべてのメッセージを検出したいが
(<link linkend="simple-search">$simple_search</link>を使って)、
フラグ付きのメッセージには一致したくない場合、<quote><literal>[f]lag</literal></quote>で
単純に検索します。
</para>

<table id="tab-simplesearch-keywords">
<title>単純なキーワード検索</title>
<tgroup cols="2">
<thead>
<row><entry>キーワード</entry><entry>パターンモディファイア</entry></row>
</thead>
<tbody>
<row><entry>all</entry><entry>~A</entry></row>
<row><entry>.</entry><entry>~A</entry></row>
<row><entry>^</entry><entry>~A</entry></row>
<row><entry>del</entry><entry>~D</entry></row>
<row><entry>flag</entry><entry>~F</entry></row>
<row><entry>new</entry><entry>~N</entry></row>
<row><entry>old</entry><entry>~O</entry></row>
<row><entry>repl</entry><entry>~Q</entry></row>
<row><entry>read</entry><entry>~R</entry></row>
<row><entry>tag</entry><entry>~T</entry></row>
<row><entry>unread</entry><entry>~U</entry></row>
</tbody>
</tgroup>
</table>

<para>
単純検索の2番目のタイプは、テンプレートとして、
<link linkend="simple-search">$simple_search</link>を使う複雑な検索パターンを
構築するというものです。Mutt は適切に問合せを引用符でくくって挿入し、複雑に
構成された問合せを検索します。
</para>

</sect2>

<sect2 id="complex-patterns">
<title>ネスティングおよび論理演算子</title>

<para>
論理積は一つ以上の基準を指定することで実行されます。例えば
</para>

<screen>
~t mutt ~f elkins
</screen>

<para>
は、受信リスト中に<quote>mutt</quote>という単語を含むもの<emphasis>と</emphasis>
ヘッダフィールド中に<quote>From</quote>がある、<quote>elkins</quote>
という単語を含むメッセージを選択します。
</para>

<para>
Mutt は、より複雑なパターンを作成するために、以下の演算子も認識します:
</para>

<itemizedlist>
<listitem>

<para>
! &mdash; 論理否定演算子
</para>
</listitem>
<listitem>

<para>
| &mdash; 論理和演算子
</para>
</listitem>
<listitem>

<para>
() &mdash; 論理グルーピング演算子
</para>
</listitem>

</itemizedlist>

<para>
以下は、複雑な検索パターンの図示例です。このパターンは、
<quote>To</quote> 又は <quote>Cc</quote>フィールドに<quote>mutt</quote>を含まず、
かつ、<quote>elkins</quote>から来たすべてのメッセージを選択します。
</para>

<example id="ex-pattern-bool">
<title>パターン中での論理演算子の使用</title>
<screen>
!(~t mutt|~c mutt) ~f elkins
</screen>
</example>

<para>
以下は、正規表現中で空白を使う例です(<quote>'</quote> と <quote>"</quote>
はデリミタであることに注意してください)。これに合わせて、メールの題名は
<quote>^Junk +From +Me$</quote>に一致せねばならず、かつ、
<quote>Jim +Somebody</quote> か<quote>Ed +SomeoneElse</quote>のどちらかから
来たものでなければなりません。
</para>

<screen>
'~s "^Junk +From +Me$" ~f ("Jim +Somebody"|"Ed +SomeoneElse")'
</screen>

<note>
<para>
正規表現が括弧か、縦線("|")を含む場合、Mutt のパターン言語の異なった部分を
分離するためにも使う文字なので、単一か二重の引用符で式をくくる
<emphasis>必要があります</emphasis>。たとえば、引用符でくくっていない
<literal>~f "me@(mutt\.org|cs\.hmc\.edu)"</literal>は、括弧の組み合わせが
完結していません。これは、
<emphasis>~f me@(mutt\.org</emphasis> と <emphasis>cs\.hmc\.edu)</emphasis>
のように、2つの OR パターンに分割されてしまいます。これらは期待通りにはなりません。
</para>
</note>

</sect2>

<sect2 id="date-patterns">
<title>日付による検索</title>

<para>
Mutt は二種類の日付、すなわち<emphasis>絶対</emphasis>日付と
<emphasis>相対</emphasis>日付に対応しています。
</para>

<sect3 id="date-absolute">
<title>絶対日付</title>

<para>
日付は必ず DD/MM/YY という形式で指定<emphasis>しなければなりません</emphasis>
(ただし、月と年は現在の月と年が既定になっているので省略できます)。
正しい日付範囲の例は以下のようになります。
</para>

<screen>
Limit to messages matching: ~d 20/1/95-31/10
</screen>

<para>
最小値 (一番目) の日付を省略して<quote>-DD/MM/YY</quote>だけ指定すると、
<emphasis>それ以前の</emphasis>すべてのメッセージが選択されます。 最大値
(二番目) の日付を省略して<quote>DD/MM/YY-</quote>を指定すると、
その日<emphasis>以降の</emphasis>すべてのメッセージが選択されます。
ダッシュ(<quote>-</quote>)なしで一つだけ日付を指定すると、
その日付に送信されたメッセージだけが選択されます。
</para>

<para>
絶対日付には、誤差範囲を追加できます。誤差範囲とは、
符号 (+ or -)の後に数字と、<xref linkend="tab-date-units"/>にある単位を付加した
ものです。特例として、符号を、同じプラスとマイナスの誤差範囲を付加することと
同じ事になる<quote>*</quote>に置き換えることができます。
</para>

<table id="tab-date-units">
<title>日付の単位</title>
<tgroup cols="2">
<thead>
<row><entry>単位</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>y</entry><entry>年</entry></row>
<row><entry>m</entry><entry>月</entry></row>
<row><entry>w</entry><entry>週</entry></row>
<row><entry>d</entry><entry>日</entry></row>
</tbody>
</tgroup>
</table>

<para>
例: 2001 年 1 月 15 日の前後二週間ずつのメッセージを選択するには
以下のパターンを使用します。
</para>

<screen>
Limit to messages matching: ~d 15/1/2001*2w
</screen>

</sect3>

<sect3 id="dates-relative">
<title>相対日付</title>

<para>
このタイプの日付は、現在の日付からの相対的な日付で、以下のように指定します。
</para>
<itemizedlist>
<listitem>

<para>
&gt;<emphasis>offset</emphasis>  は<emphasis>offset</emphasis>よりも古いメッセージ
</para>
</listitem>
<listitem>

<para>
&lt;<emphasis>offset</emphasis>  は、<emphasis>offset</emphasis>よりも新しいメッセージ
</para>
</listitem>
<listitem>

<para>
=<emphasis>offset</emphasis> は、ちょうど<emphasis>offset</emphasis>だけ経過したメッセージ
</para>
</listitem>

</itemizedlist>

<para>
<emphasis>offset</emphasis>は、<xref linkend="tab-rel-date-units"/>にある単位のどれかを
付けた正の値で指定されます。
</para>

<table id="tab-rel-date-units">
<title>相対日付の単位</title>
<tgroup cols="2">
<thead>
<row><entry>単位</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>y</entry><entry>年</entry></row>
<row><entry>m</entry><entry>月</entry></row>
<row><entry>w</entry><entry>週</entry></row>
<row><entry>d</entry><entry>日</entry></row>
<row><entry>H</entry><entry>時</entry></row>
<row><entry>M</entry><entry>分</entry></row>
<row><entry>S</entry><entry>秒</entry></row>
</tbody>
</tgroup>
</table>

<para>
例: 1ヶ月より古いメッセージを選択するには以下のようにします
</para>

<screen>
Limit to messages matching: ~d &lt;1m
</screen>

<note>
<para>
検索時に使うすべての日付は<emphasis>ローカル</emphasis>のタイムゾーンに対する
相対なので、<link linkend="index-format">$index_format</link>の設定に
<literal>%[...]</literal>フォーマットを含むように変更しないと、
メインインデックス中に表示される日付とは<emphasis>異なります</emphasis>。
</para>
</note>

</sect3>

</sect2>

</sect1>

<sect1 id="markmsg">
<title>メッセージへのマーク付け</title>

<para>
メールボックス中で他の場所に移動する時に、現在見ているメッセージを Mutt が
「覚えている」ようにさせると便利な場合があります。これには、既定で<quote>~</quote>に
バインドされている、<quote>mark-message</quote>機能を使うことができます。
このキーを押すと、マークされたメッセージに識別子を入力します。このメッセージに
戻りたい場合、<quote>'</quote>を押し、以前に入力した名前を入力します。
</para>

<para>
(メッセージのマーキングは、Message-IDを検索して現在のメッセージに戻るマクロを
定義するためのショートカットそのものです。
<link linkend="mark-macro-prefix">$mark_macro_prefix</link> 変数を定義することにより、
別の接頭辞を選ぶことができます。)
</para>
</sect1>

<sect1 id="tags">
<title>タグの使用</title>

<para>
操作を実行するときに、一通ずつ扱うよりも、ひとまとめにしたメッセージを一度に
扱った方が良いことがあります。例えば、あるメーリングリスト宛てのメッセージを
別のフォルダにセーブするとか、指定した題名のメッセージをすべて削除すると
いったものがあるでしょう。パターンに一致したメッセージすべてにタグを付けるには、
既定で<quote>shift-T</quote>に割り当てられている
<literal>&lt;tag-pattern&gt;</literal>機能を使います。あるいは、既定で
<quote>t</quote>に割り当てられている<literal>&lt;tag-message&gt;</literal>
機能を手動で使う事で、個別のメッセージを選択できます。
Mutt のパターンマッチングについては
<link linkend="patterns">patterns</link> を参照してください。
</para>

<para>
お望みのメッセージにタグをつけたら、既定で<quote>;</quote>(セミコロン)に
割り当てられている、<quote>tag-prefix</quote>機能を使うことができます。
<quote>tag-prefix</quote>機能を使う場合、<emphasis>次の</emphasis>操作は、
そのような使い方の できる操作であれば、タグの付いたメッセージすべてに適用されます。
もし、<link linkend="auto-tag">$auto_tag</link>変数が設定されている場合は、
次の操作は<quote>tag-prefix</quote>なしに、タグ付きメッセージに自動的に適用
されます。
</para>

<para>
<link linkend="macro"><command>macro</command></link>か
<link linkend="push"><command>push</command></link> コマンド中では、
<literal>&lt;tag-prefix-cond&gt;</literal>機能が使えます。
タグ付きメッセージがない場合、Mutt は残りのマクロを<quote>食べて</quote>、
実行しないようにします。マクロに<literal>&lt;end-cond&gt;</literal>演算子が
出てきた所で、マクロを<quote>喰うのを</quote>やめます。そして、この演算子の
あとのマクロを通常通り実行します。
</para>

</sect1>

<sect1 id="hooks">
<title>フックの使用</title>

<para>
<emphasis>hook</emphasis>とは、 他の、種々のプログラムにあるような、ある操作の
実行前に任意のコマンドを実行できるようにするものです。 例えば、読もうとしている
メールボックスや送ろうとしているメールのあて先に基づいて設定を調整したい場合が
あるとします。Mutt では、<emphasis>hook</emphasis>は設定オプションやコマンドに
合った<link linkend="regexp">regular expression</link> 又は
<link linkend="patterns">pattern</link> です。各タイプの<emphasis>hook</emphasis>
についての詳細は以下を参照してください。

<itemizedlist>

<listitem>
<para>
<link linkend="account-hook"><command>account-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="charset-hook"><command>charset-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="crypt-hook"><command>crypt-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="fcc-hook"><command>fcc-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="fcc-save-hook"><command>fcc-save-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="folder-hook"><command>folder-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="charset-hook"><command>iconv-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="index-format-hook"><command>index-format-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="mbox-hook"><command>mbox-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="message-hook"><command>message-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="reply-hook"><command>reply-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="save-hook"><command>save-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="send-hook"><command>send-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="send2-hook"><command>send2-hook</command></link>
</para>
</listitem>

</itemizedlist>

編集プロセスにおける概要については
<link linkend="compose-flow">Message Composition Flow</link>
も参照してください。
</para>

<note>
<para>
フックが設定を変更した場合、変更の効果は その mutt セッションの終わりまで続きます。
これは一般的に望み通りの動作ではありませんので、<quote>既定の</quote>フックを他の
フックの前に追加して設定の既定値に復帰する必要があります。
</para>
</note>

<example id="ex-default-hook">
<title><quote>既定の</quote> hook の指定</title>
<screen>
send-hook . 'unmy_hdr From:'
send-hook ~C'^b@b\.b$' my_hdr from: c@c.c
</screen>
</example>

<para>
<xref linkend="ex-default-hook"/>においては、既定では、
<link linkend="from">$from</link> と <link linkend="realname">$realname</link>
は上書きされません。メッセージをTo: または Cc: で <literal>&lt;b@b.b&gt;</literal>
に送る場合、From: ヘッダは<literal>&lt;c@c.c&gt;</literal>に書き換えられます。
</para>

<sect2 id="pattern-hook" xreflabel="Message Matching in Hooks">
<title>フックにおけるメッセージ一致条件</title>

<para>
メッセージに対して働くフック(<command>message-hook</command>,
<command>reply-hook</command>, <command>send-hook</command>,
<command>send2-hook</command>, <command>save-hook</command>,
<command>fcc-hook</command>, <command>index-format-hook</command>)
は、若干異なった方法で評価されます。他のタイプのフックは
<link linkend="regexp">regular expression</link>で十分です。しかし、
メッセージを扱う際には、異なった目的のために、異なった基準でマッチング
する必要があるため、より細かい制御が必要です。
</para>

<para>
Mutt では、フックコマンドにおけるメッセージ一致条件に、
<link linkend="patterns">search pattern</link>言語を使えます。これは、
メッセージのヘッダ(たとえば、from, to, cc, date, subject など)からMutt が抽出した
情報に一致する演算子に限定されることを除いて、メールボックスを
<emphasis>制限</emphasis>か<emphasis>検索</emphasis>する時と全く同じように動作します。
</para>

<para>
たとえば、送信メッセージに基づいて返信先を特定のアドレスに設定したい場合、
次のようにすることができます。 
</para>

<screen>
send-hook '~t ^me@cs\.hmc\.edu$' 'my_hdr From: Mutt User &lt;user@host&gt;'
</screen>

<para>
これは、<emphasis>me@cs.hmc.edu</emphasis>に宛ててメールを送る時に、
設定されたコマンドを実行する例です。
</para>

<para>
しかし、一致するパターンを完全な形の検索言語で書かなければならないというわけでは
ありません。 他のフック同様、簡単な<emphasis>regular expression</emphasis>で
書くこともでき、この場合、Mutt は、
<link linkend="default-hook">$default_hook</link>変数によって指定された
翻訳機能を使って、指定したパターンを完全な言語にします。パターンは、フックが
定義された時点で翻訳されるので、 その時有効だった
<link linkend="default-hook">$default_hook</link> の値が使われます。
</para>

</sect2>

<sect2 id="mailbox-hook" xreflabel="Mailbox Matching in Hooks">
<title>フックにおけるメールボックスのマッチング</title>

<para>
メールボックスに対して一致するフック(<command>folder-hook</command>,
<command>mbox-hook</command>)は、<link linkend="regexp">regular expression</link>
構文と、regexpパラメータ上の<link linkend="shortcuts">mailbox shortcut</link>
の両方に適用されます。これらには若干重複がありますので、正規表現の最初の文字には
特別な注意をはらう必要があります。
</para>

<screen>
# ^ は"the current mailbox" に展開されますが "beginning of string" ではありません:
folder-hook ^/home/user/Mail/bar "set sort=threads"

# If you want ^ to be interpreted as "beginning of string", one workaround
# is to enclose the regexp in parenthesis:
folder-hook (^/home/user/Mail/bar) "set sort=threads"

# This will expand to the default save folder for the alias "imap.example.com", which
# is probably not what you want:
folder-hook @imap.example.com "set sort=threads"

# 解決策は括弧かバックスラッシュを使う事です:
folder-hook (@imap.example.com) "set sort=threads"
folder-hook '\@imap.example.com' "set sort=threads"
</screen>

<para>
regex パラメータ上のメールボックスショートカット展開は、フックがメールボックスに
一致する時ではなく、フックが最初に解析される時に行われることに注意してください。
Mutt の起動時と .muttrc を読み出す時には、いくつかのメールボックスショートカットは
使えないかもしれません。たとえば、"current mailbox" shortcut, ^, は
まだメールボックスが何もオープンされていないために、空の文字列に展開されます。
Mutt はこの場合か、メールボックスショートカットの結果が空の regexpになった場合、
エラーを発行します。
</para>

</sect2>

</sect1>

<sect1 id="setenv">
<title>環境の操作(Managing the Environment)</title>

<para>
<quote>setenv</quote> と <quote>unsetenv</quote> オペレータを使って、
子プロセスに、Mutt が走査する環境を変更することができます
(備考: これはMutt形式の文法に従い、シェル形式のものではありません!)。
また、<quote>?</quote>文字を前置することによって、環境変数の現在の値を
問合せすることもできます。
</para>

<screen>
setenv TERM vt100
setenv ORGANIZATION "The Mutt Development Team"
unsetenv DISPLAY
setenv ?LESS
</screen>
</sect1>

<sect1 id="query">
<title>外部アドレスの問い合わせ</title>

<para>
Mutt は、LDAP, ph/qi, bbdb, NIS といった 外部ディレクトリデータベースへの接続を
サポートしており、これは 簡単なインタフェイスで Mutt に接続するラッパ
スクリプトを通して実現します。
<link     linkend="query-command">$query_command</link> 変数を使って、 利用するラッパー
コマンドを指定します。例は以下のようになります。

</para>

<screen>
set query_command = "mutt_ldap_query.pl %s"
</screen>

<para>
ラッパースクリプトはコマンドライン上で問い合わせを受け付けます。これは、1行の
メッセージを返し、次に一致結果がそれぞれ一行ずつ並び、その各行にはタブで
分割された、「アドレス、名前、その他付加情報」がこの順で含まれます。
エラーが発生した場合か、一致するアドレスがない場合は、0以外の終了コードと
1行のエラーメッセージが返ります。
</para>

<para>
複数の結果が返る時の例は以下です:
</para>

<screen>
Searching database ... 20 entries ... 3 matching:
me@cs.hmc.edu           Michael Elkins  mutt dude
blong@fiction.net       Brandon Long    mutt and more
roessler@does-not-exist.org        Thomas Roessler mutt pgp
</screen>

<para>
Mutt の問い合わせ機能にアクセスする仕組みは二つあります。一つは問い合わせを
インデックスメニューから <literal>&lt;query&gt;</literal>機能 (既定値: Q) を
使って行なう仕組みです。これは、問い合わせ内容の入力要求を表示し、次に、
一致したレスポンスの一覧である問い合わせメニューを表示します。問い合わせ
メニューからは、選んだアドレスにエイリアスを作成したり メールしたりすることが
できます。タグを付けて複数アドレスにメールすることや、新しく問い合わせを始めたり、
新規問い合わせを現在の結果内容に追加する こともできます。
</para>

<para>
問い合わせ機能にアクセスするもう一つの仕組みは、アドレス補完という、エイリアス
補完と同じような仕組みです。アドレス入力のプロンプトならどれででも
<literal>&lt;complete-query&gt;</literal>機能 (既定値: ^T) を使って、アドレスの
うちの、 その時点までに入力済みの部分に基づいた問い合わせを実行できます。
エイリアス のように、どこまで入力済みかについて Mutt は 最後のスペースかカンマまで
戻って調べます。その問い合わせに結果が一つだけであれば、Mutt はその場で
アドレスを展開します。結果が複数ならば Mutt は問い合わせメニューに移ります。
問い合わせメニューでは、プロンプトに追加するアドレスを一つでも複数でも選択する
ことができます。  
</para>

</sect1>

<sect1 id="mailbox-formats">
<title>メールボックスの形式</title>

<para>
Mutt は mbox, MMDF, MH と Maildir という四つのメールボックスについて、読み書きを
サポートしています。メールボックスのタイプは自動判断されるので、タイプの違いを指示
する必要はありません。新規メールボックス作成時には
<link linkend="mbox-type">$mbox_type</link>変数で指定される既定値を使います。
簡単なフォーマットの説明は以下の通りです。
</para>

<para>
<emphasis>mbox</emphasis>.  This is a widely used mailbox format for
UNIX.  All messages are stored in a single file.  Each message has a
line of the form:
<emphasis>mbox</emphasis>。これは UNIX でもっとも広く使われている形式です。
メッセージは一つのファイルにすべて格納されます。各メッセージには、 
</para>

<screen>
From me@cs.hmc.edu Fri, 11 Apr 1997 11:44:56 PST
</screen>

<para>
という、メッセージの始まりを表す形式の行が一行あります(これは しばしば
<quote>From_</quote>行として言及されます)。mbox フォーマットはメールボックスの
ロックを必要とし、また、クライアントが同時に書き込みを行ったり、From_ 行を
誤って解釈したりして、メールボックスの破損が起こりやすくなっています。
環境に依存しますが、新しいメールの検出は信頼性に欠ける場合があります。Mbox
フォルダは開くのが早く、アーカイブが簡単です。
</para>

<para>
<emphasis>MMDF</emphasis>。これは<emphasis>mbox</emphasis>フォーマットの変形です。
各メッセージは<quote>^A^A^A^A</quote>(4つのCtrl-A)と言う行で囲まれています。
mboxに発生する同じ問題があります(メッセージ本文に4つのCtrl-Aが含まれることも
あるので、正しいメッセージ区切り文字を見つけることもです)。
</para>

<para>
<emphasis>MH</emphasis>。<emphasis>mbox</emphasis> と <emphasis>MMDF</emphasis>
新的な変形であり、 メールボックスはディレクトリで構成され、各メッセージが別々の
ファイルに格納されています。ファイル名はメッセージ番号を示します(しかし、この
番号は Mutt が表示するメッセージ番号とは関係ありません)。削除されたメッセージは
ファイル名が変更されて、 先頭にカンマ(<quote>,</quote>)が付くだけです。Mutt は
(MH のメールボックスと通常のディレクトリを区別するのに必要な)
<literal>.mh_sequences</literal> か <literal>.xmhcache</literal> ファイル
のどちらかを探すことにより、このタイプのメールボックスを検出します。MH はより
クライアントからの同時書き込みに対してより頑強ですが、それでもフラグの消失に
悩まされるかもしれません。メッセージの破損は mbox/mmdf よりは起こりにくくなります。
これは、通常、たくさんの小さなファイルを読まねばならないため、mbox/mmdf と
比較すると開くのに時間がかかります(Mutt は
<xref linkend="header-caching"/> to greatly speed this process up)を提供します。
環境に依存しますが、MH はディスクスペースの効率が悪いです。
</para>

<para>
<emphasis>Maildir</emphasis>。メールボックス形式の最新版で、Qmail MTA
(sendmail の置き換え) で使われています。<emphasis>MH</emphasis>と似ていますが、
異なるのは、メールボックスに三つのサブディレクトリ、 <emphasis>tmp</emphasis>,
<emphasis>new</emphasis> と <emphasis>cur</emphasis>が追加されるある点です。
メッセージのファイル名は、二つのプログラムが同じメールボックスを NFS 越しに
書き込んでいるときでさえも重ならないような方法で選ばれています。これは、
ファイルのロックが必要なく、破損が非常にまれ、ということを意味します。
Maildir は、Mutt ではキャッシュなしだとオープンするのがかなり遅く、環境にも依存
しますが、ディスクスペースの効率がとても悪いです。metadeta に対する追加のファイルは
不要なので(メッセージファイル名中に埋め込まれます)、Maildir はロックが不要で、
ファイルレベルの同期ツールを使うことで異なったマシンへ同期するのが容易です。
</para>

</sect1>

<sect1 id="shortcuts">
<title>メールボックスのショートカット</title>

<para>
特定のメールボックスを指す組み込みショートカット (省略形) が 幾つか用意されています。
ショートカットは、ファイルやメールボックスの場所やパスに関連した設定変数を入力する
場面ならどこででも使えます。これらは文字列のはじめでのみ動作することに注意してください。
</para>

<table id="tab-mailbox-shortcuts">
<title>メールボックスショートカット</title>
<tgroup cols="2">
<thead>
<row><entry>ショートカット</entry><entry>参照するもの</entry></row>
</thead>
<tbody>
<row><entry><literal>!</literal></entry><entry><link linkend="spoolfile">$spoolfile</link> (受信用) メールボックスを指す</entry></row>
<row><entry><literal>&gt;</literal></entry><entry><link linkend="mbox">$mbox</link> ファイルを指す</entry></row>
<row><entry><literal>&lt;</literal></entry><entry><link linkend="record">$record</link>ファイルを指す</entry></row>
<row><entry><literal>^</literal></entry><entry>現在のメールボックス</entry></row>
<row><entry><literal>-</literal> 又は <literal>!!</literal></entry><entry>最後に閲覧したファイル</entry></row>
<row><entry><literal>~</literal></entry><entry>ホームディレクトリ</entry></row>
<row><entry><literal>=</literal> 又は <literal>+</literal></entry><entry>your <link linkend="folder">$folder</link>ディレクトリ</entry></row>
<row><entry><emphasis>@alias</emphasis></entry><entry>このエイリアスのアドレスで識別される<link linkend="save-hook">default save folder</link>を指す</entry></row>
</tbody>
</tgroup>
</table>

<para>
たとえば、送信メッセージのコピーをそれが作成されたフォルダ格納するには、
<link linkend="record">$record</link>設定するために、
<link linkend="folder-hook"><command>folder-hook</command></link>が使えます。
</para>

<screen>
folder-hook . 'set record=^'</screen>

</sect1>

<sect1 id="using-lists">
<title>メーリングリストの取り扱い</title>

<para>
Mutt には、大量のメールの取り扱いを容易にする設定オプションがいくつかあります。
まず最初にしなければならないのは、どのアドレスを メーリングリストだとみなすか
(仕組みとしてはメーリングリストでなくても構いませんが、これがもっともよく使われる
用途です)、および、 どのリストを講読しているかを Mutt に知らせることです。
これは<literal>.muttrc</literal> で <link linkend="lists"><command>lists</command>と
<command>subscribe</command></link> コマンドを使って行ないます。代替又は追加で、
<literal>List-Post</literal>ヘッダ中にアドレスが見つかった時に、自動的に購読する、
<link linkend="auto-subscribe">$auto_subscribe</link>を設定することもできます。
</para>

<para>
これで Mutt は何がメイリングリストかを知っているので、できることが幾つか増えました。
その一つ目は、 どのリストを経由してメッセージを受信したか (すなわち、講読中の
リスト名) を<emphasis>index</emphasis>メニューの画面に表示できることです。
これは同じメールボックス内にある個人用メールとリストメールを区別するのに役立ちます。
<link linkend="index-format">$index_format</link>変数中で、
expando <quote>%L</quote> は、<quote>list</quote>が<quote>To</quote>フィールドに
あった場合、<quote>To &lt;list&gt;</quote>を表示し、それが<quote>Cc</quote>
フィールドにあった場合は<quote>Cc &lt;list&gt;</quote>を返します
(それ以外は、メールの作成者を返します)。
</para>

<para>
メーリングリストのメッセージ中の<quote>To</quote> と <quote>Cc</quote>
フィールドは、どんどん 膨れ上がっていってしまうということがしばしばあります。
多くの人は、返信しようとするメッセージの差出人をわざわざそうしたフィールドから
削除したりしないので、結果として同じものが複数その人に送られてしまうことに
なります。<literal>&lt;list-reply&gt;</literal>機能は、既定では
<emphasis>index</emphasis>メニューと<emphasis>pager</emphasis>メニューでは
<quote>L</quote>に割り当てられていますが、すべての宛先ではなく、既知の
メーリングリストアドレスにのみ返信するので、このようなゴミを減らす助けになります
(<literal>Mail-Followup-To</literal>で指定された場合を除きます。以下参照)。
</para>

<para>
Mutt は<literal>Mail-Followup-To</literal>ヘッダもサポートします。
一つまたはそれ以上の既知メーリングリストを含む受信先一覧にメールを送る時で、
<link linkend="followup-to">$followup_to</link>オプションが設定されている場合、
Mutt は Mail-Followup-To ヘッダを生成します。受信先のどれかが購読している
メーリングリストの場合、このヘッダは、自分自身のアドレスを含まない、この
メッセージを送るすべての受信先を含みます。これは、このメッセージへの
group-replies 又は list-replies (<quote>followups</quote>としても知られています)
メッセージのオリジナルの受信者にのみ送信され、それとは別に自分には送る必要は
ありません。すなわち、購読しているメーリングリストのどれかを通じて、
自分自身のメールを受け取ることになります。受信先が、購読しているメーリングリスト
に一つもない場合、ヘッダには、返信のコピーを自分が確実に受け取るように、
自分自身のアドレスも含みます。
</para>

<para>
逆に、<literal>Mail-Followup-To</literal>があるメッセージに、
group-replying 又は list-replying を行う場合、Mutt は
<link linkend="honor-followup-to">$honor_followup_to</link>設定変数が
設定されている場合、このヘッダを考慮します。この場合に
<link linkend="list-reply">list-reply</link>を使うと、
<literal>Mail-Followup-To</literal>中の、受信先の一覧中に指定されていなくても、
メーリングリストに返信が送られるようになります。
</para>

<note>
<para>
ヘッダ編集が有効な場合、<literal>Mail-Followup-To</literal>ヘッダを手動で作成
できます。Mutt は送信時にこのへッダが存在しない場合にだけ、 このへッダを自動
生成します。
</para>
</note>

<para>
一部のメーリングリスト管理者が使っている別の手法は、メッセージの差出人
ではなく、メーリングリストのアドレスを指す<quote>Reply-To</quote>
フィールドを生成するというものです。 これは、送信者に私的に直接返信
しようとするときに 問題を引き起こすかもしれません。なぜなら大半のメール
クライアントは、自動的に <quote>Reply-To</quote>フィールドのアドレスへ
返信するからです。Mutt は<link linkend="reply-to">$reply_to</link>変数を
使って、どちらのアドレスに返信するかを決める手助けをします。
<emphasis>ask-yes</emphasis>又は<emphasis>ask-no</emphasis>に設定する場合、
<quote>Reply-To</quote>フィールド中のアドレスを使うかどうかを聞いてきますが、
そうでない場合、<quote>From</quote>フィールドのアドレスに直接返信します。
<emphasis>yes</emphasis>に設定されている場合、存在していれば、
<quote>Reply-To</quote>フィールドが使われます。
</para>

<para>
<quote>X-Label:</quote>ラベルフィールドは、メーリングリストまたは
リストされた題名をさらに識別することができます。(あるいは、単に、
メッセージへ個別に註釈を付けることも)。
<link linkend="index-format">$index_format</link>変数の
<quote>%y</quote> と <quote>%Y</quote> expandos は<quote>X-Label:</quote>
フィールドをインデックス中に展開するのに使え、Mutt のパターン一致では、
<quote>~y</quote> 選択肢を使う事で、正規表現で<quote>X-Label:</quote>
を検索できます。<quote>X-Label:</quote>は標準的なへッダフィールドでは
ありませんが、 procmail その他のメールフィルタリングエージェントで簡単に
挿入できます。 
</para>

<para>
既定で、<quote>y</quote>に割り当てられている<quote>edit-label</quote>
コマンドを使って、Mutt 内で、<quote>X-Label:</quote>フィールドを変更/削除
できます。これは、タグ付きメッセージについても同じように動作します。
edit-label機能中で、&lt;complete&gt; バインディング(通常は TAB)を押すと、
現在使っているすべてのラベルに対して補完を実行します。
</para>

<para>
最後に、Mutt はメールボックスを<link linkend="threads">threads</link>で
<link linkend="sort">sort</link>する機能があります。スレッドとは、
同じ話題でつながっているメッセージの集まりです。これは通常、木のような
構造へとまとめられ、 あるメッセージとそれに対する返信すべてが画像的に
表現されます。スレッド化されたニュースクライアントを使ったことがあれば、
それと同じ概念だと思ってください。これによって流量の大きなメーリングリストの
扱いが容易になります。なぜなら、興味がなければ簡単にスレッドごと削除する
ことができ、価値ある話題を素早く見つけられるからです。
</para>

</sect1>

<sect1 id="display-munging">
<title>表示の難読化(Munging)</title>

<para>
コンソールやターミナル・ウィンドウ中で作業をする場合、特定の情報要素を
非破壊的な方法で変更できること、すなわち、情報自体が格納されている値を
変更せず、表示方法を変更できると便利なことがよくあります。
これは、特に、どこかで再生産されていたり、二次的な興味のどちらかである
余計なメタデータで汚染されている、メッセージの題名の場合に顕著です。
</para>

<cmdsynopsis>
<command>subjectrx</command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">replacement</replaceable>
</arg>

<command>unsubjectrx</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
<literal>subjectrx</literal>は正規表現の<quote>pattern</quote>で、
メッセージの題名中で見つかった場合、題名を<quote>replacement</quote>の値に
置き換えます。replacement は<link linkend="spam">spam</link>コマンドと
同じように置き換える題名です。<literal>%L</literal>は一致したものの左側に
対するテキスト、<literal>%R</literal>は一致したものの右側に対するテキスト、
<literal>%1</literal>は一致したものの最初のサブグループです(以下同様)。
単に一致を簡単に消したいのであれば、それを<quote>%L%R</quote>に設定します。
subjectrxコマンドはいくつでも共存できます。
</para>

<para>
<quote>replacement</quote>の値は題名全体を置き換え、一致したもののみでは
ないことに十分注意してください。
</para>

<para>
<literal>unsubjectrx</literal>は置き換えリストから与えられたsubjectrx を
取り除きます。パターンとして<literal>*</literal>が指定された場合、
すべての置換定義が削除されます。
</para>

<example id="ex-subjectrx">
<title>題名の難読化</title>
<screen>
# Erase [rt #12345] tags from Request Tracker (RT) e-mails
subjectrx '\[rt #[0-9]+\] *' '%L%R'

# Servicedesk is another RT that sends more complex subjects.
# Keep the ticket number.
subjectrx '\[servicedesk #([0-9]+)\] ([^.]+)\.([^.]+) - (new|open|pending|update) - ' '%L[#%1] %R'

# Strip out annoying [listname] prefixes in subjects
subjectrx '\[[^]]*\]:? *' '%L%R'
</screen>
</example>

</sect1>

<sect1 id="new-mail">
<title>新しいメールの検出</title>

<para>
Mutt は複数のフォルダを設定でき、それらはすべて、新規メールの検出ができます
(詳細は<xref linkend="mailboxes"/>を参照してください)。
</para>

<sect2 id="new-mail-formats">
<title>新規メール検出の方式</title>

<para>
Mboxと Mmdf フォルダでは、新規メールは、ファイルのアクセス時間と変更時間を
比較することで検出します。Mutt は、最後の変更後にアクセスがなかった場合、
フォルダに新規メールがあると推測します。<literal>biff</literal> や
<literal>frm</literal>やその他の、メールボックスにアクセスするユーティリティは、
Mutt に、そのメールボックスの新規メール検出が全くできなくなるようにしてしまう
かもしれません。Mutt がフォルダへの新規メールを検出出来なくなる可能性がある
その他の例としては、バックアップツール(アクセス時間を更新するもの)やアクセス時間の
更新をサポートしないようにマウントしたファイルシステム(Linuxでは、
<literal>relatime</literal>オプション)があります。
</para>

<note>
<para>
以前の Mutt リリースとは対照的に、フォルダが、現在のものは、一度も読み取りされず、
削除もされず、旧メールとして、マークもされない、少なくとも一つのメッセージを
含んでいる場合、アクセス時刻を適切にリセットすることにより、フォルダの新規
メールステータスを維持するようになっています。
</para>
</note>

<para>
Mbox または Mmdf フォルダでの新規メール検出が信頼できないように見える場合、
<link linkend="check-mbox-size">$check_mbox_size</link>オプションを使って、
Mutt が新規メールの検出のために、ファイルサイズの追跡と参照できるように
します。ただし、サイズが変わらない変更の場合には動作しません。
</para>

<para>
Maildir での新規メールは、削除マークがついていない
(<link linkend="maildir-trash">$maildir_trash</link>を参照)
<literal>new/</literal>サブディレクトリ中に1つのメッセージがあることを
仮定しています。MH フォルダでは、少なくとも、一つのメッセージが
<link linkend="mh-seq-unseen">$mh_seq_unseen</link> によって指定された、
<quote>unseen</quote>なシーケンス中にある場合、新規メールがあると判断されます。
</para>

<para>
Mutt は POP3 フォルダに対しては新規メールの確認をしません。現在開いているフォルダに
対して定期的にチェックをするだけです(それがPOP3フォルダの場合)。
</para>

<para>
IMAP では、既定で、Mutt は新規メールを検出するために、サーバによって提供される、
最新のメッセージ数を使います。<link linkend="imap-idle">$imap_idle</link>オプションが
設定されていれば、サーバによって情報が通知されれば、 IMAP IDLE 拡張を使います。
</para>

<para>
<link linkend="mail-check-recent">$mail_check_recent</link>オプションは、Mutt が
すでに閲覧したメールボックスで新規メールがあるかどうかを通知するかどうかを
変更します。設定した場合(既定値)、最後にメールボックスをオープンした時間から、
新規メールが来た時のみ通知します。設定しない場合、メールボックス中に
なんらかの新規メールが来た場合に通知します。
</para>

</sect2>

<sect2 id="new-mail-polling">
<title>新規メールのポーリング</title>

<para>
インデックスメニューで、アイドル状態(<link linkend="timeout">$timeout</link>も
参照)のとき、Mutt は定期的に<command>mailboxes</command>コマンドで
設定されたすべてのフォルダの新規メールをチェックします。間隔は、フォルダタイプに
よって異なります。ローカル/IMAP フォルダは
<link linkend="mail-check">$mail_check</link>で、POPフォルダは、
<link linkend="pop-checkinterval">$pop_checkinterval</link>で決まります。
</para>

<para>
インデックスメニュー外では、既定ではどのキーにも割り当てられていませんが、
<literal>&lt;check-new&gt;</literal>機能をディレクトリブラウザが使う事で、
新規メールのチェックをサポートします。タブキーを押すと、
<command>mailboxes</command>コマンドで指定された、ファイルを表示するメニューが
ポップアップし、どこが新規メールを含むかを表示します。<literal>-y</literal>
オプションを付けてコマンドラインから起動すると、Mutt は自動的にこのモードに
入ります。
</para>

<para>
ページャ、インデックスとディレクトリブラウザメニューでは、
画面の最下部にあるコマンド行中に、新規メールがあるフォルダの一覧を表示する、
<literal>&lt;buffy-list&gt;</literal>機能(既定では<quote>.</quote>に割り当て
られています)が含まれています。
</para>

<para>
インデックスでは、既定で、Mutt はステータスバーに、新規メールが含まれている
メールボックスの数を表示します。詳細は、
<link linkend="status-format">$status_format</link>変数を参照してください。
</para>

<para>
フォルダを変更した時、Mutt は(もしもあれば)新規メールを含むメールボックスの一覧
から最初のフォルダをプロンプトに埋め込みます。<literal>&lt;Space&gt;</literal>を
押すと、新規メールがあるフォルダを順番に表示します。(既定ではどのキーにも
割り当てられていませんが)インデックス中で<literal>&lt;next-unread-mailbox&gt;</literal>
機能を使うと、(もしもあれば)未読のメールがある次のフォルダをすぐにオープンできます。
</para>

</sect2>

<sect2 id="new-mail-monitoring">
<title>新規メールのモニタ</title>

<para>
ファイルをモニタする<emphasis>Inotify</emphasis>がサポートされている場合
(Linux のみ)で、コンパイル時に無効になっていない場合、Mutt は
<link linkend="mailboxes"><command>mailboxes</command></link>コマンドで
設定されたすべてのフォルダへの新規メールについてすぐに通知します。
<link linkend="mailbox-formats">mailbox format</link>にも依存しますが、
(Maildirを除いて)追加された<emphasis>古い</emphasis>メールも追跡されます。
</para>

<para>
使用可能な設定変数はありません。トレース出力は、
<link linkend="tab-commandline-options">コマンド行オプション</link>が
<literal>-d3</literal>で、デバッグが有効な時に行われます。より小さい
レベル 2 ではエラーのみを表示し、五より大きいレベルでは生のInotifyイベントを
表示します。
</para>

<note>
<para>
新規メールについてのイベント取得は、基礎となるメカニズムの能力によって制限
されます。<emphasis>Inotify</emphasis>は、ローカルな変更のみ通知します。すなわち、
メールに対する新規メールの通知は、Mutt と同じマシン上でのエージェントによって
配送されたメールについては動作しますが、NFS によるネットワークファイルシステム
上でリモートで配信されたものについては動作しません。同様に、モニタリングハンドルは
ごく希な条件で失敗するかもしれないので、この機能に完全な信頼をおかない方がよいです。
</para>
</note>

</sect2>

<sect2 id="calc-mailbox-counts">
<title>メールボックスメッセージ数の計算</title>

<para>
<link linkend="mail-check-stats">$mail_check_stats</link>が設定されている場合、
Mutt は定期的に未読、フラグ付き、および全体のメッセージ数を、
<command>mailboxes</command>コマンドで監視されている各メールボックス毎に
計算します。この計算は、新規メールのポーリングと同じ時に行われますが、
別のタイマー
<link linkend="mail-check-stats-interval">$mail_check_stats_interval</link>
によって制御されます。
</para>

<para>
サイドバーではこれらのメッセージ数を表示できます。
<link linkend="sidebar-format">$sidebar_format</link>を参照してください。
</para>

</sect2>

</sect1>

<sect1 id="editing-threads">
<title>スレッドの編集</title>

<para>
Mutt には、壊れたスレッドを動的に作り直す機能があります。スレッドが壊れる理由は
相手の設定ミスや癖などです。これにより、話を追いにくくする迷惑行為からメールボックスを
きれいにできます。
</para>

<sect2 id="link-threads">
<title>スレッドの接続</title>

<para>
返信時に<quote>In-Reply-To:</quote> と <quote>References:</quote>ヘッダを正しく
設定することを<quote>忘れる</quote>傾向があります。この結果、Mutt は、正しいスレッドを
推測する十分な情報がないので、議論が途切れてしまいます。これを修正するには、
返信にタグをつけ、次に、親メッセージに移動し、<literal>&lt;link-threads&gt;</literal>
機能を使います(既定では &amp; に割り当てられています)。そうすると返信は
親メッセージに接続されます。
</para>

<para>
また、複数の子に対して、<literal>&lt;tag-prefix&gt;</literal>コマンド
(<quote>;</quote>)か、<link linkend="auto-tag">$auto_tag</link>オプションを使い、
それらにタグをつけることで接続できます。

</para>

</sect2>

<sect2 id="break-threads">
<title>スレッドの分割</title>

<para>
メーリングリストで新しい話題を始めるとき、適当なメッセージに<quote>reply</quote>を押して、
題名だけまったく無関係なものに変えるという 悪い癖を持つ人がいます。これは
<literal>&lt;break-thread&gt;</literal>機能(既定で # に割り当て)を使うことで修正できます。
この機能で、そのメッセージ以降のスレッドを まったく別のスレッドにしてしまいます。
</para>

</sect2>

</sect1>

<sect1 id="dsn">
<title>配送状態通知(Delivery Status Notification:DSN)のサポート</title>

<para>
RFC1894 は、電子メイルメッセイジの状態に関する情報を伝達するための、一連の
MIME コンテントタイプを定義しています。これは<quote>return receipts</quote>と
考えることができます。
</para>

<para>
DSN をサポートするための2つの変数があります。
<link linkend="dsn-notify">$dsn_notify</link> は異なった結果
(たとえば、失敗したメッセージや配送済みメッセージなど)に対して証書を要求するのに
使います。<link linkend="dsn-return">$dsn_return</link>は、証書に付随して返信される
メッセージがどのくらいか(ヘッダあるいはメッセージ全体)を要求します。
</para>

<para>
メール配信時に<link linkend="sendmail">$sendmail</link>を使うと、
Berkeley sendmail 8.8.x (またはそれ以上)か、Sendmail互換の、DSN コマンド行オプションを
サポートする MTA のどちらかを使う必要があります。 -N と -R オプションは、
どの種類のステータスメッセージが戻ってこなければならないかの要求を作成するために、
メールクライアントによって使われます。DSN がサポートされているかどうか、MTA の
ドキュメントを見てください。
</para>

<para>
<link linkend="smtp-url">$smtp_url</link> を使う SMTP 配送では、Mutt がDSN を要求するか
否かを試みるかどうかは、サーバから通知された情報に依存します。
</para>

</sect1>

<sect1 id="urlview">
<title>URL 上での WWW ブラウザの起動</title>

<para>
メッセージに URL が含まれている場合、URL すべてをを含むメニューを取得し、そのうちの1つで
WWW ブラウザを起動すると効率的です。この機能は、
<ulink url="https://github.com/sigpipe/urlview">https://github.com/sigpipe/urlview</ulink>
にある 外部の urlview プログラムと以下の設定コマンドで提供されます。
</para>

<screen>
macro index \cb |urlview\n
macro pager \cb |urlview\n
</screen>

</sect1>

<sect1 id="echo">
<title>テキストの表示(echo)</title>

<para>
使用法:
</para>

<cmdsynopsis>
<command>echo</command>
<arg choice="plain">
<replaceable class="parameter">message</replaceable>
</arg>
</cmdsynopsis>

<para>
"echo" コマンドを使って、メッセージウィンドウにメッセージを表示することができます。
これは、マクロの実行終了時に便利です。メッセージ表示後、echo は
<link linkend="sleep-time">$sleep_time</link>によって指定された秒数だけ停止します。
</para>

<screen>
echo "Sourcing muttrc file"

unset confirmappend
macro index ,a "&lt;save-message&gt;=archive&lt;enter&gt;&lt;enter-command&gt;echo 'Saved to archive'&lt;enter&gt;"
</screen>

</sect1>

<sect1 id="compose-flow">
  <title>メッセージ作成フロー</title>

  <para>
    これは、Mutt でメッセージ作成を行うステップの簡単な説明です。
    これはまた、hook 実行の順番とタイミングも示します。
  </para>

  <itemizedlist>
    <listitem>
      <para>
        Reply エンベロープの設定。  <link
        linkend="reverse-name">$reverse_name</link> の処理。  To,
        Cc, Subject, References ヘッダの既定値。
      </para>
    </listitem>
    <listitem>
      <para>
        To, Cc,
        Bcc, Subject ヘッダに対する <link linkend="my-hdr">my_hdr</link>の処理。
      </para>
    </listitem>
    <listitem>
      <para>
        To, Cc, Bcc, Subject ヘッダの表示。
        <link linkend="askcc">$askcc</link>,
        <link linkend="askbcc">$askbcc</link>,
        <link linkend="fast-reply">$fast_reply</link> を参照。
      </para>
    </listitem>
    <listitem>
      <para>
	From ヘッダの設定。注意:これは以下の<link         linkend="send-hook">send-hook</link>が
	~P に一致する可能性があるためだが、From は send-hook が値を変更した場合には
	さらに以下で再設定される。
      </para>
    </listitem>
    <listitem>
      <para>
        <link linkend="reply-hook">reply-hook</link>
      </para>
    </listitem>
    <listitem>
      <para>
        <link linkend="send-hook">send-hook</link>
      </para>
    </listitem>
    <listitem>
      <para>
        From ヘッダの設定。
      </para>
    </listitem>
    <listitem>
      <para>
        <link linkend="my-hdr">my_hdr</link> を From,
        Reply-To, Message-ID とユーザ定義のヘッダに対して処理。To, Cc,
        Bcc, Subject, とReturn-Path ヘッダはこのステージでは無視される。
      </para>
    </listitem>
    <listitem>
      <para>
        メッセージ本文と署名の生成。
      </para>
    </listitem>
    <listitem>
      <para>
        <link linkend="send2-hook">send2-hook</link>
      </para>
    </listitem>
    <listitem>
      <para>
        From ヘッダの <link linkend="realname">$realname</link> 部分の設定。
      </para>
    </listitem>
    <listitem>
      <para>
        メッセージの編集のため、<link linkend="editor">$editor</link> の起動。
      </para>
    </listitem>
    <listitem>
      <para>
        <link linkend="send2-hook">send2-hook</link>
      </para>
    </listitem>
    <listitem>
      <para>
        暗号化の設定。
      </para>
    </listitem>
    <listitem>
      <para>
        <link linkend="fcc-hook">fcc-hook</link>.  Fcc の設定。
      </para>
    </listitem>
    <listitem>
      <para>
	<link linkend="compose-menu">Compose メニュー</link>。注意:
	<link linkend="send2-hook">send2-hook</link>はヘッダが変更された時には毎回
	評価される。
      </para>
    </listitem>
    <listitem>
      <para>
        メッセージの暗号化と署名。鍵の選択。
      </para>
    </listitem>
    <listitem>
      <para>
        Fcc saving if <link
        linkend="fcc-before-send">$fcc_before_send</link> が設定されていた場合、Fcc へのセーブ。
	(送信前に Fcc を実行する際の注意事項については変数のドキュメントに注意。)
      </para>
    </listitem>
    <listitem>
      <para>
        メッセージの送信。
      </para>
    </listitem>
    <listitem>
      <para>
        <link linkend="fcc-before-send">$fcc_before_send</link>が設定されていない場合
	(既定値)に、Fcc へのセーブ。注意:バージョン1.12より以前では、Fcc へは
	メッセージの送信前にセーブされます。現在では、既定で、後でセーブされますが、
	セーブが失敗した場合、ユーザに表示が出ます。
      </para>
    </listitem>
  </itemizedlist>
</sect1>

<sect1 id="misc-topics">
<title>その他</title>

<para>
この節では他にない種々の機能について説明します。
</para>

<variablelist>
<varlistentry>
<term>
アドレスの正規化
</term>
<listitem>
<para>
Mutt では、すべてのメールアドレスを簡単な形式に正規化することができます。
アドレスに実名が含まれている場合、
<emphasis>Joe User &lt;joe@example.com&gt;</emphasis>という形式が使われ、
括弧その他がない真の電子メールアドレス、すなわち<emphasis>joe@example.com</emphasis>
となります。
</para>
<para>
この正規化は別名を含む、Mutt が生成するすべてのヘッダに影響します。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
最初のフォルダの選択
</term>
<listitem>
<para>
起動時に Mutt が開くフォルダは以下のようにして決まります。
<literal>$MAIL</literal>環境変数が存在していれば、そこで指定されているフォルダ
となります。それ以外では、<literal>$MAILDIR</literal>の値が考慮されます。
共にない場合、Mutt はコンパイル時に決まった(通常はホームディレクトリの
内側に有る場合もあります)メールスプール中の、ユーザのメールボックスを使います。
<link linkend="spoolfile">$spoolfile</link>の設定はこの選択を上書きします。
最も高い優先度のメールボックスは、コマンド行オプションの<literal>-f</literal> で
与えられたものです。
</para>
</listitem>
</varlistentry>
</variablelist>

</sect1>

</chapter>

<chapter id="mimesupport">
<title>Mutt における MIME のサポート</title>

<para>
Mutt を最高のテキストモード MIME MUA にするために、たくさんの努力が払われました。
目の肥えた MIME ユーザが必要とする機能を提供し、可能な限り標準に準拠するため、
あらゆる努力が図られています。Mutt でMIME を設定するとき、Mutt が使う2つの
特別なタイプの設定ファイルが存在します。一つは<literal>mime.types</literal>ファイルで、
これは、IANA MIME タイプへの拡張子のマッピングを含んでいます。もう一つは、
<literal>mailcap</literal>で、これは、特定の MIME タイプを扱うために使う
外部コマンドを指定しています。
</para>

<sect1 id="using-mime">
<title>Mutt 中で MIME を使う</title>

<sect2 id="mime-overview">
<title>MIME の概要</title>

<para>
MIME は<quote>Multipurpose Internet Mail Extension</quote>の略で、
国際化と構造化されたメールメッセージを記述するメカニズムです。MIME 以前は、
メッセージは一つの部分で構成されていて、ヘッダと本文は US-ASCII に限定されていました。
MIME を使うと、メッセージに添付をつけることができるようになり(添付自身に
添付がつけられるので、結局の所木構造になります)、送信者名、受信者と題名に
ほぼ任意の文字を使えるようになります。
</para>

<para>
メッセージヘッダ内で非ASCII文字を扱うことに加えて、Mutt にとって、もっとも重要な
MIME の観点は、MIME タイプと呼ばれているものです。これは、斜め線(スラッシュ)
によって分離されている、<emphasis>major</emphasis>と<emphasis>minor</emphasis>
タイプから構成されています。これは、後続のコンテンツに関する詳細を指定します。
これらに基づき、Mutt はこのパートをどのように扱うかを決めます。もっとも一般的な
major タイプは<quote><literal>text</literal></quote>で、minor タイプは
平文、HTMLと種々のその他のフォーマットというものです。Major タイプにはそのほかにも
イメージ、音声、ビデオともちろん一般的なアプリケーションデータ(たとえば、
署名を伴う暗号化された署名されたデータを分離するためや、オフィス形式の文書を
送信するとか、一般的なバイナリデータなど)があります。また、MIME パートの
サブツリーの基幹を表す<literal>multipart</literal> major タイプもあります。
サポートされている MIME タイプの一覧は、
<xref linkend="supported-mime-types"/> にあります。
</para>

<para>
MIME はネットワーク越しにMIME コンテンツを転送するための、一連のエンコーディング
スキームを定義します。それには、<literal>7bit</literal>,
<literal>8bit</literal>, <literal>quoted-printable</literal>,
<literal>base64</literal> と <literal>binary</literal>があります。
</para>

<para>
Mutt は 送信側で、MIME に準拠したメッセージ形式にするため、バックグラウンドで
ほとんどの MIMEエンコード/デコードを行います。受信時に、(表示可能ならば)どのMIME
構造が、どのように表示されるかについては、柔軟に設定できます。これらは、MIME
タイプの内容によって決められます。それらは、ページャ(メッセージを表示している時)、
添付メニューと編集メニューです。
</para>

</sect2>

<sect2 id="mime-pager">
<title>ページャ中でのMIME メッセージの表示</title>

<para>
インデックス画面でメールを選択し、ページャ中で表示する場合、Mutt は
可能な限り多くのメッセージをテキスト表現へと復号化します。Mutt には、
<literal>text</literal> major タイプ(すべての mitor タイプを含む)、
<literal>message/rfc822</literal>(メールメッセージ)タイプと
いくつかの <literal>multipart</literal>タイプを含む、いくつかの MIME タイプを
内部的にサポートしています。さらに、PGP/MIME と <literal>application/pgp</literal>
を含む、種々の PGP MIME タイプを認識します。
</para>

<para>
Mutt は2行を使って添付ファイルを記述します。その行は以下の通りです。
</para>

<screen>
[-- Attachment #1: Description --]
[-- Type: text/plain, Encoding: 7bit, Size: 10000 --]
</screen>

<para>
ここで、<emphasis>Description</emphasis>は添付ファイルに関する説明やファイル名で、
<emphasis>Encoding</emphasis>はすでに言及されているコンテンツエンコーディング
の1つです。
</para>

<para>
Mutt が扱うことのできない MIME タイプであれば 次のようなメッセージを表示します。
</para>

<screen>
[-- image/gif is unsupported (use 'v' to view this part) --]
</screen>

</sect2>

<sect2 id="attach-menu">
<title>添付メニュー</title>

<para>
既定で<quote>v</quote>に割り当てられている<literal>&lt;view-attachments&gt;</literal>は、
メッセージの添付メニューを表示します。添付ファイルメニューはメッセージの添付ファイル
一覧を表示します。添付メニューから、添付ファイルを保存、印刷、パイプ、削除、閲覧する
ことができます。添付にタグがつけてあり、<literal>&lt;tag-prefix&gt;</literal>
オペレータを使うことで、複数の添付ファイルを一度に処理することも可能です。 また、
このメニューからメッセージに返信することもでき、添付のみ(またはタグが付いた添付)を
返信に引用することができます。テキストとして添付を表示したり、mailcap ビューワの
定義を使って表示したりできます(mailcap メカニズムの詳細は後で説明します)。
</para>

<para>
最後に、通常のメッセージに関連する機能(たとえば、
<link linkend="resend-message"><literal>&lt;resend-message&gt;</literal></link>,
と<literal>&lt;reply&gt;</literal> と <literal>&lt;forward&gt;</literal>
機能)を、<literal>message/rfc822</literal>タイプの添付に適用できます。
</para>

<para>
すべての有効な機能については、
<xref linkend="tab-attachment-bindings"/>テーブルを参照してください。
</para>

</sect2>

<sect2 id="compose-menu">
<title>編集メニュー</title>

<para>
編集メニューはメッセージを送信する前に現れるメニューのことです。このメニュー
では宛先のリスト、題名やメッセージのその他の部分を編集することができます。
このメニューには、メッセージの添付ファイル(本文も含む)の一覧も表示されます。
このメニューから、一つの添付ファイル、もしくはタグ付けされた複数の添付ファイルを、
印刷、コピー、フィルタ、パイプ、編集、作成、表示、および改名することが
できます。また、添付の情報、特にタイプやエンコーディングや説明を編集できます。
</para>

<para>
添付は以下のように表示されます。
</para>

<screen>
- 1 [text/plain, 7bit, 1K]           /tmp/mutt-euler-8082-0 &lt;no description&gt;
  2 [applica/x-gunzip, base64, 422K] ~/src/mutt-0.85.tar.gz &lt;no description&gt;
</screen>

<para>
<quote>-</quote>は、そのファイルがメッセージの送信 (または延期や中止) の後に
削除されるということを示しています。これは、<literal>&lt;toggle-unlink&gt;</literal>
コマンド (既定値: u) でON/OFFできます。次の欄 は MIME content-type を示しており、
<literal>&lt;edit-type&gt;</literal> コマンド (既定値: ^T) で変更できます。
その次の欄はファイルのエンコード方式を示していて、7ビットで転送できるように
バイナリメッセージをエンコードします。これは、<literal>&lt;edit-encoding&gt;</literal>
コマンド(既定値: ^E)で変更できます。次の欄は添付のファイルサイズで、キロバイトか
メガバイト単位に丸めています。次の欄はファイル名で、
<literal>&lt;rename-file&gt;</literal>コマンド (既定値: R) で変更できます。
最後の欄は添付ファイルの内容説明で、<literal>&lt;edit-description&gt;</literal>
コマンド (既定値: d) で変更できます。必要に応じてこの表示形式を変更するために
使える expando の完全な一覧は
<link linkend="attach-format">$attach_format</link>にあります。
</para>

</sect2>

</sect1>

<sect1 id="mime-types">
<title><literal>mime.types</literal>によるMIME タイプの設定</title>

<para>
MIME を最大限に利用するには、MIME パートの content type が可能な限り
コンテンツに一致することが重要で、そうすることにより、受信者のクライアントが
自動的にコンテンツに適したビューワを自動的に選択できるようになります。
しかし、Mutt が、すべての取り得るファイルタイプを検出する方法を
知っていても、それが信頼できるわけではありません。そのかわり、
どのファイル拡張子がどのMIME タイプに対応しているかを指定する、簡単な平文の
マッピングファイルを使います。このファイルは<literal>mime.types</literal>と
呼ばれています。
</para>

<para>
メールメッセージに添付を追加すると、Mutt は、<literal>$HOME/.mime.types</literal>から
個人用の<literal>mime.types</literal>を探しに行き、次に、
<literal>/usr/local/share/mutt/mime.types</literal>又は
<literal>/etc/mime.types</literal>にあるシステムの<literal>mime.types</literal>
を見に行きます。
</para>

<para>
各行は完全なMIME タイプで始まり、空白と、空白で分離されたファイルの拡張子の
一覧が並びます。たとえば以下のようになります。
</para>

<example id="ex-mime-types">
<title><literal>mime.types</literal></title>
<screen>
application/postscript          ps eps
application/pgp                 pgp
audio/x-aiff                    aif aifc aiff
</screen>
</example>

<para>
サンプルの<literal>mime.types</literal>ファイルは Mutt の配布物に付いています。
使いたい MIME タイプはその中にほとんど含まれているはずです。
</para>

<para>
Mutt が、添付されたファイルの拡張子から、MIME タイプが決められない場合、
<link linkend="mime-type-query-command">$mime_type_query_command</link>で
指定されたコマンドを実行します。そのコマンドが指定されていなかった場合、
Mutt はファイルの中身を見に行きます。ファイルにバイナリ情報がなければ プレーン
テキストだとみなして<literal>text/plain</literal>と設定します。ファイルに
バイナリ情報が含まれていれば、<literal>application/octet-stream</literal>と
設定します。編集メニューから<literal>&lt;edit-type&gt;</literal>コマンド
(既定値: ^T)を使って、Mutt が添付に割り当てたMIME タイプを変更できます。
サポートされる major type については<xref linkend="supported-mime-types"/>
を参照してください。Mutt は<literal>mime.types</literal>ファイル中に適切な
エントリがあった場合、それらすべてを認識します。認識できない mime タイプは、
メッセージ受信者がそのような添付が来ることが分かっている場合にのみ使用すべき
です。
</para>

<table id="supported-mime-types">
<title>サポートされている MIME タイプ</title>
<tgroup cols="3">
<thead>
<row><entry>MIME major type</entry><entry>標準かどうか</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry><literal>application</literal></entry><entry>yes</entry><entry>一般的なアプリケーションデータ</entry></row>
<row><entry><literal>audio</literal></entry><entry>yes</entry><entry>音声データ</entry></row>
<row><entry><literal>image</literal></entry><entry>yes</entry><entry>画像データ</entry></row>
<row><entry><literal>message</literal></entry><entry>yes</entry><entry>メールメッセージ、メッセージステータス情報</entry></row>
<row><entry><literal>model</literal></entry><entry>yes</entry><entry>VRML とその他のモデリングデータ</entry></row>
<row><entry><literal>multipart</literal></entry><entry>yes</entry><entry>他のMIME パートのコンテナ</entry></row>
<row><entry><literal>text</literal></entry><entry>yes</entry><entry>テキストデータ</entry></row>
<row><entry><literal>video</literal></entry><entry>yes</entry><entry>動画データ</entry></row>
<row><entry><literal>chemical</literal></entry><entry>no</entry><entry>ほとんどの場合、分子データ</entry></row>
</tbody>
</tgroup>
</table>

<para>
MIME タイプは、
<ulink url="http://www.iana.org/assignments/media-types/">IANA</ulink>
によって割り当てられている必要があり、自由には指定できません。
</para>

</sect1>

<sect1 id="mailcap">
<title>mailcap による MIME ビューワの設定</title>

<para>
Mutt は RFC 1524 の MIME 設定をサポートしています。特に RFC 1524 の Appendix A で
規定されている Unix 用フォーマットをサポートしています。このファイル
フォーマットは一般的に <quote>mailcap</quote> フォーマットと呼ばれます。
多くの MIME 対応プログラムがこの mailcap フォーマットを利用しているので、
すべてのプログラムでのすべての MIME タイプの扱いを一か所で指定することができます。
このフォーマットを利用しているプログラムには、Firefox, lynx, metamail
などがあります。 
</para>

<para>
Mutt 単体では扱えない様々な MIME タイプを扱うために、 Mutt は外部の設定
ファイルを解析して、外部ハンドラを探します。設定ファイルを検索する既定の
文字列はコロン区切りのリストで、以下のようなものです。
</para>

<orderedlist>
<listitem><para><literal>$HOME/.mailcap</literal></para></listitem>
<listitem><para><literal>$PKGDATADIR/mailcap</literal></para></listitem>
<listitem><para><literal>$SYSCONFDIR/mailcap</literal></para></listitem>
<listitem><para><literal>/etc/mailcap</literal></para></listitem>
<listitem><para><literal>/usr/etc/mailcap</literal></para></listitem>
<listitem><para><literal>/usr/local/etc/mailcap</literal></para></listitem>
</orderedlist>

<para>
ここで、<literal>$HOME</literal>はホームディレクトリです。
<literal>$PKGDATADIR</literal> と <literal>$SYSCONFDIR</literal>ディレクトリは、
インストールされた Mutt に依存します。全社は共有データの既定値で、後者は
システム設定ファイルの既定値です。
</para>

<para>
既定の検索パターンは以下のコマンドを実行して得られます。
</para>

<screen>
mutt -nF /dev/null -Q mailcap_path
</screen>

<para>
特に、metamail ディストリビューションは mailcap ファイルを、通常
<literal>/usr/local/etc/mailcap</literal> にインストールします。これには
いくつかのベースラインエントリが含まれています。
</para>

<sect2 id="mailcap-basics">
<title>Mailcap ファイルの基本</title>

<para>
mailcap ファイルの各行はコメント、空行、定義のいずれかです。
</para>

<para>
コメント行は # 文字とそれに続く任意の文字で構成されます。
</para>

<para>
空行は空の行です。
</para>

<para>
定義行は、content type 、閲覧コマンド、、そして任意の数の付加的なフィールドで
構成されています。 定義行の各フィールドはセミコロン <quote>;</quote> で分けられています。
</para>

<para>
content type は MIME 標準の<quote>type/subtype</quote>方式で指定します。例えば、
<literal>text/plain</literal>, <literal>text/html</literal>,
<literal>image/gif</literal>などです。さらに、mailcap フォーマットには二種類の
ワイルドカードもあります。 一つは特殊な<quote>*</quote>サブタイプを使う方法で、
もう一つはメジャータイプしか書かないという、暗黙のワイルドカードという方法です。
例えば、<literal>image/*</literal> 又は<literal>video</literal>は、それぞれ
すべての image タイプと video タイプに相当します。
</para>

<para>
view コマンドは特定のタイプを閲覧するための Unix コマンドです。二種類の
異なったコマンドがサポートされています。既定では、その MIME メッセージの
内容を標準入力でコマンドに渡します。この動作を変更するには、view コマンドの
引数に  <literal>%s</literal> を使います。こうすると Mutt は MIME メッセージの
内容を一時ファイルに保存し、<literal>%s</literal> を一時ファイルの名前に
置き換えて view コマンドを呼び出します。どちらの場合も Mutt は端末を view
プログラムに明け渡し、終了するまで待ちます。終了時、一時ファイルは (あれば)
削除されます。これは、mailcap が、Mac OS X 上での<literal>open</literal>のように、
開始直後に端末から自分自身を切り離すプログラムでは、そのままでは動かない
ことを意味します。それにもかかわらずそのようなプログラムを mailcap で使う
ためには、おそらくカスタム shell スクリプトが必要です。
</para>

<para>
最も単純な形として、<literal>text/plain</literal> のメッセージを外部
ページャ more に標準入力で渡すには以下のようにします。
</para>

<screen>
text/plain; more
</screen>

<para>
あるいは、メッセージをファイルとして渡すことも出来ます。
</para>

<screen>
text/plain; more %s
</screen>

<para>
おそらく、lynx を使って対話的に <literal>text/html</literal> のメッセージを
閲覧したいと思うかもしれません。
</para>

<screen>
text/html; lynx %s
</screen>

<para>
この場合、lynx は標準入力からのファイル閲覧をサポートしていないので
<literal>%s</literal> 構文を使わなければなりません。
</para>

<note>
<para>
<emphasis>古いバージョンの lynx には、一部、<literal>text/html</literal>の
ビューワの mailcap ファイルをチェックするバグを含むものがあります。その場合、
lynx を呼ぶように書いてあっても そのまま実行してしまいます。この場合、
いつまでも 自分が自分を呼び出し続けることになってしまいます。</emphasis>
</para>
</note>

<para>
一方、lynx を対話的に使いたいのではなく、単に <literal>text/html</literal> を
<literal>text/plain</literal> に変換したい場合は以下のようにします。
</para>

<screen>
text/html; lynx -dump %s | more
</screen>

<para>
おそらく<literal>text/html</literal> ファイルの閲覧には lynx を使いたいものの、
ほかの text タイプにはすべてページャを使いたい場合はこういう書き方ができます。
</para>

<screen>
text/html; lynx %s
text/*; more
</screen>

</sect2>

<sect2 id="secure-mailcap">
<title>Mailcapの安全な使用方法</title>

<para>
一般的に言って、MIME パラメータに埋め込まれたシェルメタ文字を解釈することには、
セキュリティ上の問題を引き起こす危険性があります。Mutt は <literal>%s</literal>
構文の展開の際に正しくパラメータをくくろうとしますし、危険な文字を別のものに
置き換えようとします。 <link linkend="mailcap-sanitize">$mailcap_sanitize</link>
変数を参照してください。
</para>

<para>
Mutt が mailcap からプログラムを呼び出す手順はおそらく安全ですが、他の
アプリケーションも mailcap を読みますし、中にはそれほど注意を払わないものも
あるかも知れません。 そこで、次のようなルールに注意を払うべきです。
</para>

<para>
<emphasis>シェルクウォートに %展開を入れない。</emphasis>シングルクウォート
(') やダブルクウォート (") で囲まない。その辺りのことは Mutt がきちんと
やってくれますし、 mailcap を使う他のプログラムも同じはずです。
バッククウォートを使った展開の中にも入れない。eval 文には特別な注意が必要です。
できればまったく使わないでください。おかしな挙動をクウォートで直そうとしても、
新しい問題が発生するだけです &mdash; 正しくウォートを使うための代替方法は
最初から有りません。
</para>

<para>
どうしても '%展開"の値がクウォートやバッククウォートの中に入っていなければ
ならない場合には、まずその値をシェル変数に代入して、必要に応じてその変数を
使うようにしてください。次の例のようにです (バッククウォート展開の中で
<literal>$charset</literal> を使っていますが、これは安全です。そこからさらに
展開されるわけではないからです)。 
</para>

<screen>
text/test-mailcap-bug; cat %s; copiousoutput; test=charset=%{charset} \
        &amp;&amp; test "`echo $charset | tr '[A-Z]' '[a-z]'`" != iso-8859-1
</screen>

</sect2>

<sect2 id="advanced-mailcap">
<title>高度な Mailcap の使用法</title>

<sect3 id="optional-mailcap-fields">
<title>オプションフィールド</title>

<para>
必須となる content-type と view コマンドフィールドに加え、フラグや他の
オプションを設定するために、セミコロン<quote>;</quote>で分離したフィールドを
追加することが出来ます。Mutt は以下のオプションフィールドを認識します。
</para>

<variablelist>

<varlistentry>
<term>copiousoutput</term>
<listitem>
<para>
このフラグは、標準出力上で、大量のテキストがコマンドに渡されることを Mutt に
伝えます。これは、Mutt に、 view コマンド(内部ページャまたは pager 変数で
指定された外部ページャ)の出力でページャを呼び出すようにします。このフラグが
ない場合、Mutt はコマンドが対話的であると仮定します。これを利用して、
Basic 節中の<literal>lynx -dump</literal>の例にあるパイプを
<literal>more</literal>に置き換えることが出来ます。

</para>

<screen>
text/html; lynx -dump %s ; copiousoutput
</screen>

<para>
上記では、lynx は、<literal>text/html</literal>出力を<literal>text/plain</literal>
として整形し、Mutt は結果を表示するために標準のページャを使います。
</para>

<para>
Mutt はページャが幅を決めるために、<literal>COLUMNS</literal>環境変数を
設定します。いくつかのプログラムでは、自動的にこの環境変数を使用します。
その他では、出力幅を設定するために使う、コマンド行引数を使います。
</para>

<screen>
text/html; lynx -dump -width ${COLUMNS:-80} %s; copiousoutput
</screen>

<para>
内蔵ページャを使う場合、このフラグを保つエントリのみ <emphasis>MIME</emphasis>
タイプのハンドラとして見なされることに注意してください &mdash; 他のエントリは
すべて無視されます。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>needsterminal</term>
<listitem>
<para>
<link linkend="auto-view"><command>auto_view</command></link>を使って、
添付を閲覧する時、<link linkend="wait-key">$wait_key</link>変数の設定を
信頼するかどうかを決めるのに、Mutt はこのフラグを使います。
添付ファイルが内部ページャで表示される時、あるいは、適切な mailcap
エントリが<emphasis>needsterminal</emphasis>フラグが存在している場合、
Mutt は<link linkend="wait-key">$wait_key</link>と、外部プログラムが
終了した時の終了ステータスを使って、外部プログラムが終了した後に、キー入力を
必要とするかを決めます。その他の場合はすべて、キー入力は要求されません。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>compose=&lt;command&gt;</term>
<listitem>
<para>
このフラグは、特定のMIME タイプの新しい添付を作るためのコマンドを指定します。
Mutt は編集メニューでこれをサポートします。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>composetyped=&lt;command&gt;</term>
<listitem>
<para>
このフラグは、特定の MIME タイプの添付ファイルを新規作成するコマンドを指定
します。compose コマンドとの違いは、データ内に標準的な MIME ヘッダが含まれて
いることをMutt が期待しているという点です。これを使って、パラメータ、
ファイル名、説明などを指定できます。 Mutt はこれをコンポウズメニューでサポート
しています。 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>print=&lt;command&gt;</term>
<listitem>
<para>
This flag specifies the command to use to print a specific MIME type.
Mutt supports this from the attachment and compose menus.
特定の MIME タイプの印刷に使うコマンドを指定します。 Mutt では、ファイル
添付メニューと編集メニューでサポートしています。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>edit=&lt;command&gt;</term>
<listitem>
<para>
このフラグは、特定の MIME タイプの編集に使うコマンドを指定します。 Mutt は
このコマンドを編集メニューでサポートし、 新しい添付ファイルを作成するとき
にも使います。Mutt は既定では <link linkend="editor">$editor</link> 変数に
定義されたエディタを テキスト形式の添付ファイルに使用します。 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>nametemplate=&lt;template&gt;</term>
<listitem>
<para>
このフィールドは、コマンドフィールドに <literal>%s</literal> で示される
ファイルのフォーマットを指定します。ある種のプログラムは、ファイルを正しく
表示するために、ファイル名に特定の拡張子を要求しします。例えば lynx は、
ファイル名が<literal>.html</literal> で終わっている場合にのみ
そのファイルが<literal>text/html</literal>text/html であると解釈します。
そのため、lynx を <literal>text/html</literal> ビューワに指定するには
次のように mailcap を記述します。
</para>

<screen>
text/html; lynx %s; nametemplate=%s.html
</screen>

</listitem>
</varlistentry>
<varlistentry>
<term>test=&lt;command&gt;</term>
<listitem>
<para>
このフィールドは、この mailcap エントリを使うべきなのかどうかをテストするための
コマンドを指定します。コマンドは、次の節にあるコマンド展開ルールに沿って定義
します。コマンドが 0 を返した場合はテストにパスしたことになり、Mutt はその
エントリを使います。0 以外の値を返した場合にはテスト失敗で、Mutt はさらに
他の正しいエントリを探し続けます。content-type はテストを実行する前に一致
しなければならないことに注意してください。例は下記の通りです。
</para>

<screen>
text/html; firefox -remote 'openURL(%s)' ; test=RunningX
text/html; lynx %s
</screen>

<para>
上記の例では、Mutt は、X Window マネージャが動作中の時に 0 を返し、
そうでない場合は 0 以外を返す、<literal>RunningX</literal> プログラムを
実行します。<literal>RunningX</literal> が 0を返した場合、 Mutt は
<literal>text/html</literal> オブジェクトを表示するために、 firefox を
起動します。RunningX が 0 を返さない場合、Mutt は次のエントリに移動し、
<literal>text/html</literal> オブジェクトを表示するために、 lynx を使います。
</para>
</listitem>
</varlistentry>
</variablelist>

</sect3>

<sect3 id="mailcap-search-order">
<title>検索順序</title>

<para>
mailcap ファイルの中からあるエントリを検索する場合、Mutt はその目的に最も
合う項目を見付けようとします。例えば <literal>image/gif</literal> を印刷
しようとするとき、次のようなエントリが mailcap ファイルにあれば、
Mutt は print コマンドがあるエントリを探します。
</para>

<screen>
image/*;        xv %s
image/gif;      ; print= anytopnm %s | pnmtops | lpr; \
                nametemplate=%s.gif
</screen>

<para>
Mutt は<literal>image/*</literal>エントリをスキップし、print コマンドがある
<literal>image/gif</literal>エントリを使用します。
</para>

<para>
さらに、<link linkend="auto-view"><command>auto_view</command></link>
と組み合わせて、添付ファイル閲覧のコマンドを二つ指定することもできます。
1つ目は自動的に閲覧するためのコマンド、もう一つは、
<literal>&lt;view-mailcap&gt;</literal>機能(既定で<quote>m</quote>に割り当て)
を使って、添付ファイルメニューから対話的に閲覧するコマンドです。
さらに、test 機能を使えば、どのビューワを使うかを自分の環境に合わせて対話的に
決定できます。 
</para>

<screen>
text/html;      firefox -remote 'openURL(%s)' ; test=RunningX
text/html;      lynx %s; nametemplate=%s.html
text/html;      lynx -dump %s; nametemplate=%s.html; copiousoutput
</screen>

<para>
Mutt は<link linkend="auto-view"><command>auto_view</command></link>に対して、
<literal>copiousoutput</literal>タグがあるので3番目のエントリを使います。
対話的な閲覧には、まずプログラム <literal>RunningX</literal> を走らせ、
一番目のエントリを使うかどうか調べます。プログラムが 0 以外を返せば、二番目の
エントリを使って対話的な閲覧を行います。最後のエントリはページャ中の
インライン表示と、添付メニュー中での<literal>&lt;view-attach&gt;</literal>機能です。
</para>

<para>
<literal>copiousoutput</literal>タグがあるエントリは、常時各タイプ毎に
最後に指定しなければなりません。非対話的な使用時には、最後のエントリは、
実際にはタグが設定されているものに最初に一致するものになります。
非対話的な使用時には、<literal>copiousoutput</literal>タグが付いたエントリ
のみが考慮されます。対話的に使う場合には、Mutt はこのタグを無視し、すべてのエントリを
同じように扱います。そのため、最後に指定しなかった場合、このタグを保たない
その後のエントリは、<literal>copiousoutput</literal>があるものの前で
常時一致してしまうため、<literal>&lt;view-attach&gt;</literal>は決して
考慮されません。
</para>

</sect3>

<sect3 id="mailcap-command-expansion">
<title>コマンド展開</title>

<para>
mailcap ファイルに定義されている各種のコマンドは、<literal>system(3)</literal>
機能を使って、<literal>/bin/sh</literal>シェルに渡されます。
<literal>/bin/sh -c</literal>にコマンドが渡される前に、コマンドは Mutt からの
情報を元に、操作されて種々の特別なパラメータが展開されます。Mutt が展開する
キーワードは以下の通りです。
</para>

<variablelist>

<varlistentry>
<term>%s</term>
<listitem>
<para>
基本のmailcap 節で見たように、この変数は、呼び出したプログラムによって指定された
ファイル名に展開されます。この ファイルは、閲覧/印刷/編集するメッセージ本体か、
編集プログラムが編集した結果が含まれています。さらに、このキーワードを
使うと、Mutt は、閲覧/印刷/編集するプログラムに対して、標準入力には
メッセージ本体を渡しません。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>%t</term>
<listitem>
<para>
Mutt は<literal>%t</literal>をテキスト表現へ展開します。これは、メッセージの
content type を、mailcap 定義行における最初のパラメータと同じ形式で表現した
ものです。すなわち、<literal>text/html</literal> 又は
<literal>image/gif</literal> です。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>%{&lt;parameter&gt;}</term>
<listitem>
<para>
Mutt はこれを、メールの Content-Type: 行における特定のパラメータの値に展開
します。例えば、メールに次のような行があるとします。
</para>

<screen>
Content-Type: text/plain; charset=iso-8859-1
</screen>

<para>
この場合、Mutt は<literal>%{charset}</literal> を <quote>iso-8859-1</quote>に
展開します。既定の metamail malcap ファイルは、この機能を使って文字セットを調べ、
xterm を正しい文字セットで起動してメールを閲覧できるようにします。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>\%</term>
<listitem>
<para>
これは<literal>%</literal>に置き換えられます.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>
Mutt はRFC 1524 で定義されているキーワード <literal>%F</literal>と<literal>%n</literal> を現在の
所サポートしていません。これらのパラメータは主にマルチパートメッセージのためのものですが、それらは Mutt 内部で扱われるからです。 
</para>

</sect3>

</sect2>

<sect2 id="mailcap-example">
<title>Mailcap ファイルの例</title>

<para>
以下の mailcap ファイルはとても単純かつ標準的なものです。
</para>

<screen>
<emphasis role="comment"># 常に X を実行していることにします:)</emphasis>
video/*;        xanim %s &gt; /dev/null
image/*;        xv %s &gt; /dev/null

<emphasis role="comment"># firefox を実行していることにします(今よりメモリがあればそうするでしょう。たぶん。)</emphasis>
text/html;      firefox -remote 'openURL(%s)'
</screen>

<para>
以下の mailcap ファイルでは、たくさんの例を示しています。
</para>

<screen>
<emphasis role="comment"># 動画には、すべて xanim を使います   xanim は起動時にヘッダを出力しますが
# 見なくて済むように /dev/null へ送ってしまいます</emphasis>
video/*;        xanim %s &gt; /dev/null

<emphasis role="comment"># HTML は、実行中の firefox に remote オプションで送ります</emphasis>
text/html;      firefox -remote 'openURL(%s)'; test=RunningFirefox

<emphasis role="comment"># firefox を実行していなくて X を実行しているときは、その
# オブジェクトに対してfirefox を起動します</emphasis>
text/html;      firefox %s; test=RunningX

<emphasis role="comment"># それ以外のときは lynx を使ってテキストで閲覧します</emphasis>
text/html;      lynx %s

<emphasis role="comment"># こちらは text/html を text/plain に変換するものです</emphasis>
text/html;      lynx -dump %s; copiousoutput

<emphasis role="comment"># enscript を使ってテキストを二段組みで印刷します</emphasis>
text/*;         more %s; print=enscript -2Gr %s

<emphasis role="comment"># Firefox jpeg を自分で表示するためにフラグを付けます</emphasis>
image/jpeg;xv %s; x-mozilla-flags=internal

<emphasis role="comment"># X 実行中の画像閲覧には xv を使います</emphasis>
<emphasis role="comment"># なお、ここでは \ を使って行をのばし、画像のエディタも設定します</emphasis>
<emphasis role="comment"># for images</emphasis>
image/*;xv %s; test=RunningX; \
        edit=xpaint %s

<emphasis role="comment"># ツールを使って画像をテキストに変換します</emphasis>
image/*;  (anytopnm %s | pnmscale -xysize 80 46 | ppmtopgm | pgmtopbm |
pbmtoascii -1x2 ) 2&gt;&amp;1 ; copiousoutput

<emphasis role="comment"># excel の表計算ファイルは NT マシンに送ります</emphasis>
application/ms-excel; open.pl %s
</screen>

</sect2>

</sect1>

<sect1 id="auto-view">
<title>MIME 自動閲覧</title>

<para>
Usage:
</para>

<cmdsynopsis>
<command>auto_view</command>
<arg choice="plain">
<replaceable>mimetype</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>

<command>unauto_view</command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
添付メニューから、mailcap ファイルで指定されている MIME のビューワで添付ファイルを閲覧する
よう Mutt に明示的に指示する以外に、 ページャの中で MIME 添付ファイルを自動的に閲覧する
機能もあります。Mutt はページャ中でMIME 添付を自動的に閲覧する機能をサポートしています。
</para>

<para>
機能させるには、mailcap ファイルで <literal>copiousoutput</literal> オプションを使って
ビューワを指定しなくてはなりません。そのビューワが対話的コマンドではないということを指示
するためです。 普通は、ページャで閲覧できるようなテキスト表現へ添付ファイルを変換する
ためにもこのエントリを使います。 
</para>

<para>
次に <command>auto_view</command> という 設定コマンドを使い、自動的に閲覧したい
 content-type を列挙します。例えば以下のように列挙します。 
</para>

<screen>
auto_view text/html application/x-gunzip \
  application/postscript image/gif application/x-tar-gz
</screen>

<para>
こうすると、Mutt はそれらのタイプをテキストとして、添付を描画するための対応するエントリを
探します。対応する mailcap エントリは以下のようになります。
</para>

<screen>
text/html;      lynx -dump %s; copiousoutput; nametemplate=%s.html
image/*;        anytopnm %s | pnmscale -xsize 80 -ysize 50 | ppmtopgm | \
                pgmtopbm | pbmtoascii ; copiousoutput
application/x-gunzip;   gzcat; copiousoutput
application/x-tar-gz; gunzip -c %s | tar -tf - ; copiousoutput
application/postscript; ps2ascii %s; copiousoutput
</screen>

<para>
<command>unauto_view</command>は以前のエントリを<command>auto_view</command>リストから
削除するのに使います。
<link linkend="message-hook"><command>message-hook</command></link> と一緒に使うなら、サイズ等に基づいた自動閲覧もできます。
<quote><command>unauto_view</command> *</quote> は、指定した項目をすべて削除します。
</para>

</sect1>

<sect1 id="alternative-order">
<title>MIME Multipart/Alternative</title>

<para>
<literal>multipart/alternative</literal> コンテナタイプは、同じコンテンツを別の方法で
表す子MIME パートのみがあります。これはしばしば、代替 plain text 表現を含む HTML メール
を送信するのに使われます。
</para>

<para>
Mutt には、<literal>multipart/alternative</literal>  のうち、どのタイプの添付ファイルを
表示するか決定するための発見的手法があります。
</para>

<orderedlist>
<listitem>
<para>
まず最初に <command>alternative_order</command> リストを調べて、有効なタイプがあればそれに
決めます。そこには、明示的あるいは暗黙的なワイルドカードのサポートを含む、順番に並んだ 
MIME タイプがいくつか記載されています。以下が例です。
</para>

<screen>
alternative_order text/enriched text/plain text \
  application/postscript image/*
</screen>
</listitem>
<listitem>
<para>
次に Mutt は、いずれかのタイプが<link linkend="auto-view"><command>auto_view</command></link>
で定義されていないかどうかを調べ、それを使います。
</para>
</listitem>
<listitem>
<para>
それに失敗した場合、Mutt は text type を調べます。
</para>
</listitem>
<listitem>
<para>
Mutt は最後に、処理可能なタイプが一つでもないかどうか探します。 
</para>
</listitem>
</orderedlist>

<para>
MIME タイプを <command>alternative_order</command> リストから削除するには、
<command>unalternative_order</command> コマンドを使います。
</para>

<para>
<literal>multipart/alternative</literal>コンテンツの生成は、
<link linkend="send-multipart-alternative">$send_multipart_alternative</link>
quadoption と
<link linkend="send-multipart-alternative-filter">$send_multipart_alternative_filter</link>
フィルタスクリプトによってサポートされます。編集された、
<literal>text/plain</literal>コンテンツは、フィルタスクリプトの標準入力に
パイプされます。フィルタスクリプトの出力は、生成されたコンテンツの MIME タイプ
、空白行とコンテンツ である必要があります。以下は例です。
</para>
<screen>
text/html

&lt;html&gt;
&lt;body&gt;
Content in html format
&lt;/body&gt;
&lt;/html&gt;
</screen>

<para>
alternativeのプレビューは、
<literal>&lt;view-alt&gt;</literal>,<literal>&lt;view-alt-text&gt;</literal>と
既定で&quot;v&quot;, &quot;Esc v&quot; と &quot;V&quot; に割り当てられている
<literal>&lt;view-alt-mailcap&gt;</literal>機能を使って編集メニュー中で
閲覧できます。
</para>

</sect1>

<sect1 id="attachments">
<title>添付の検索とカウント</title>

<para>
メールボックス中の添付ファイルを見失った場合、Mutt が持つ添付ファイルのカウントと
検索機能のサポートが役立つかもしれません。メッセージインデックスに、各メッセージが
条件を満たす添付ファイルの数を表示させたり、添付ファイルの数でメッセージを検索
したりできます。また、<command>attachments</command>と<command>unattachments</command>
コマンドを使って、この機能の対象となる添付ファルの種類を設定することも出来ます。
</para>

<para>
この情報を提供するため、Mutt は最初に、影響を受けるメッセージすべてに完全な
MIME 解析を行う必要があります。これは、利用者が本当にそれらを表示したいか
否かにかかわらず、すべてのメッセージを最初にダウンロードする必要があるため、
IMAP のようなリモートメールフォルダに対しては特に操作が遅くなります。ただし、
<xref linkend="body-caching"/> を使うと、通常は、メッセージを1回だけダウンロード
することになります。
</para>

<para>
既定では、Mutt は<literal>multipart/alternative</literal>コンテナ内を検索しません。
これは、<link linkend="count-alternatives">$count_alternatives</link>設定変数を
使って変更できます。
</para>

<para>
文法は以下の通りです。
</para>

<cmdsynopsis>
<command>attachments</command>
<arg choice="plain">
<replaceable>{ + | - }disposition</replaceable>
</arg>
<arg choice="plain">
<replaceable>mime-type</replaceable>
</arg>

<command>unattachments</command>
<arg choice="plain">
<replaceable>{ + | - }disposition</replaceable>
</arg>
<arg choice="plain">
<replaceable>mime-type</replaceable>
</arg>

<command>attachments</command>
<arg choice="plain">
<option>?</option>
</arg>

<command>unattachments</command>
<arg choice="plain">
<option>*</option>
</arg>
</cmdsynopsis>

<para>
<emphasis>disposition</emphasis>は添付のContent-Disposition タイプで &mdash;
<literal>inline</literal>又は<literal>attachment</literal> のどちらかです。
<literal>I</literal>又は<literal>A</literal>という省略形も使えます。
</para>

<para>
Disposition には<quote>+</quote>か<quote>-</quote>記号が前に付きます。
<quote>+</quote>だった場合、この disposition と MIME タイプを対象にしたい
と言う事を意味します。<quote>-</quote>だった場合、この disposition と
MIME タイプは以前の<quote>+</quote>ルールの例外としたいという事を意味します。
これをどのように使うと便利かについては、以下に例があります。
</para>

<para>
<emphasis>mime-type</emphasis>はコマンドに影響を与えたい添付ファイルの MIME タイプ
です。MIME タイプは常時<literal>major/minor</literal>と言う形式で、
<literal>major</literal>は検索したいドキュメントに対する広いカテゴリを
記述したもので、<literal>minor</literal>は、そのカテゴリ中の特定のタイプを記述
したものです。MIME タイプの major 部分は文字テキスト(又は特別なトークン
<quote><literal>*</literal></quote>)でなければなりません。しかし、minor パートは
正規表現でもかまいません(そのため、<quote><literal>*/.*</literal></quote>は
すべての MIME タイプに一致します)。
</para>

<para>
<command>attachments</command>ディレクテイブに渡したMIME タイプはパターンの
一種です。<command>attachments</command>ディレクティブを使う場合、指定したパターンは
リストに追加されます。<command>unattachments</command> を使うと、リストから
パターンが削除されます。パターンはこの時点では展開されず、特定の MIME タイプには
一致しません&mdash; リスト中に存在するだけです。実際にメッセージを評価した時点で
のみ一致します。
</para>

<para>
いくつかの例は説明するのに役立つかもしれません。例中の、コメントアウトされていない
ものは、リストの既定の設定を記述しています。
</para>

<example id="ex-attach-count">
<title>添付のカウント</title>
<screen>
<emphasis role="comment">
# Removing a pattern from a list removes that pattern literally. It
# does not remove any type matching the pattern.
#
#  attachments   +A */.*
#  attachments   +A image/jpeg
#  unattachments +A */.*
#
# This leaves "attached" image/jpeg files on the allowed attachments
# list. It does not remove all items, as you might expect, because the
# second */.* is not a matching expression at this time.
#
# Remember: "unattachments" only undoes what "attachments" has done!
# It does not trigger any matching on actual messages.

# Qualify any MIME part with an "attachment" disposition, EXCEPT for
# text/x-vcard and application/pgp parts. (PGP parts are already known
# to mutt, and can be searched for with ~g, ~G, and ~k.)
#
# I've added x-pkcs7 to this, since it functions (for S/MIME)
# analogously to PGP signature attachments. S/MIME isn't supported
# in a stock mutt build, but we can still treat it specially here.
#
</emphasis>
attachments   +A */.*
attachments   -A text/x-vcard application/pgp.*
attachments   -A application/x-pkcs7-.*

<emphasis role="comment">
# Discount all MIME parts with an "inline" disposition, unless they're
# text/plain. (Why inline a text/plain part unless it's external to the
# message flow?)
</emphasis>
attachments   +I text/plain

<emphasis role="comment">
# These two lines make Mutt qualify MIME containers.  (So, for example,
# a message/rfc822 forward will count as an attachment.)  The first
# line is unnecessary if you already have "attach-allow */.*", of
# course.  These are off by default!  The MIME elements contained
# within a message/* or multipart/* are still examined, even if the
# containers themselves don't qualify.

#attachments  +A message/.* multipart/.*
#attachments  +I message/.* multipart/.*
</emphasis>

<emphasis role="comment">## You probably don't really care to know about deleted attachments.</emphasis>
attachments   -A message/external-body
attachments   -I message/external-body
</screen>
</example>

<para>
コマンド <quote><command>attachments</command> ?</quote>をコマンドとして入力すると、
現在の設定一覧を表示するので、他の場所に貼り付けることが出来ます。
</para>

<para>
コマンド <quote><command>unattachments</command> *</quote> をコマンドとして入力すると、
すべての添付設定を消去します。
</para>
</sect1>

<sect1 id="mime-lookup">
<title>MIME Lookup</title>

<para>
Usage:
</para>

<cmdsynopsis>
<command>mime_lookup</command>
<arg choice="plain">
<replaceable>mimetype</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>

<command>unmime_lookup</command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
Mutt の <command>mime_lookup</command> リストは、mailcap エントリに従って
扱う<emphasis>べきでない</emphasis> MIME タイプのリストを指定します。このオプションは、
<literal>application/octet-stream</literal>のような、バイナリタイプを取り扱う
ように設計されています。添付の MIME タイプが <command>mime_lookup</command> 中に
ある場合、ファイル名の拡張子は<literal>mime.types</literal>ファイル中の
拡張子の一覧と比較されます。この拡張子に対応する MIME タイプは、mailcap ファイル中の
ルールや、その他の設定オプション(例えば<command>auto_view</command>のようなもの)で
指定されたルールに従って処理されます。一般的な使い方は以下のようになります。
</para>

<screen>
mime_lookup application/octet-stream application/X-Lotus-Manuscript
</screen>

<para>
さらに、<literal>unmime_lookup</literal>コマンドを使えば、すでに設定されてい
る特定の MIME タイプに対してこの機能を適用しないようにすることもできます。
たとえば、グローバルの<literal>.muttrc</literal>です。
</para>

</sect1>

</chapter>

<chapter id="optionalfeatures">
<title>オプション機能</title>

<sect1 id="optionalfeatures-notes">
<title>General Notes</title>

<sect2 id="compile-time-features">
<title>Enabling/Disabling Features</title>

<para>
Mutt supports several of optional features which can be enabled or
disabled at compile-time by giving the <emphasis>configure</emphasis>
script certain arguments. These are listed in the <quote>Optional
features</quote> section of the <emphasis>configure --help</emphasis>
output.
</para>

<para>
Which features are enabled or disabled can later be determined from the
output of <literal>mutt -v</literal>. If a compile option starts with
<quote>+</quote> it is enabled and disabled if prefixed with
<quote>-</quote>. For example, if Mutt was compiled using GnuTLS for
encrypted communication instead of OpenSSL, <literal>mutt -v</literal>
would contain:
</para>

<screen>
-USE_SSL_OPENSSL +USE_SSL_GNUTLS</screen>

</sect2>

<sect2 id="url-syntax">
<title>URL Syntax</title>

<para>
Mutt optionally supports the IMAP, POP3 and SMTP protocols which require
to access servers using URLs. The canonical syntax for specifying URLs
in Mutt is (an item enclosed in <literal>[]</literal> means it is
optional and may be omitted):
</para>

<screen>
proto[s]://[username[:password]@]server[:port][/path]
</screen>

<para>
<emphasis>proto</emphasis> is the communication protocol:
<literal>imap</literal> for IMAP, <literal>pop</literal> for POP3 and
<literal>smtp</literal> for SMTP. If <quote>s</quote> for <quote>secure
communication</quote> is appended, Mutt will attempt to establish an
encrypted communication using SSL or TLS.
</para>

<para>
Since all protocols supported by Mutt support/require authentication,
login credentials may be specified in the URL. This has the advantage
that multiple IMAP, POP3 or SMTP servers may be specified (which isn't
possible using, for example, <link
linkend="imap-user">$imap_user</link>). The username may contain the
<quote>@</quote> symbol being used by many mail systems as part of the
login name. The special characters <quote>/</quote>
(<literal>%2F</literal>), <quote>:</quote> (<literal>%3A</literal>) and
<quote>%</quote> (<literal>%25</literal>) have to be URL-encoded in
usernames using the <literal>%</literal>-notation.
</para>

<para>
A password can be given, too but is not recommended if the URL is
specified in a configuration file on disk.
</para>

<para>
If no port number is given, Mutt will use the system's default for the
given protocol (usually consulting <literal>/etc/services</literal>).
</para>

<para>
The optional path is only relevant for IMAP and ignored elsewhere.
</para>

<example id="ex-url">
<title>URLs</title>
<screen>
pops://host/
imaps://user@host/INBOX/Sent
smtp://user@host:587/
</screen>
</example>

</sect2>

</sect1>

<sect1 id="ssl">
<title>SSL/TLS Support</title>

<para>
If Mutt is compiled with IMAP, POP3 and/or SMTP support, it can also be
compiled with support for SSL or TLS using either OpenSSL or GnuTLS ( by
running the <emphasis>configure</emphasis> script with the
<emphasis>--enable-ssl=...</emphasis> option for OpenSSL or
<emphasis>--enable-gnutls=...</emphasis> for GnuTLS). Mutt can then
attempt to encrypt communication with remote servers if these protocols
are suffixed with <quote>s</quote> for <quote>secure
communication</quote>.
</para>

</sect1>

<sect1 id="pop">
<title>POP3 Support</title>

<para>
If Mutt is compiled with POP3 support (by running the
<emphasis>configure</emphasis> script with the
<emphasis>--enable-pop</emphasis> flag), it has the ability to work with
mailboxes located on a remote POP3 server and fetch mail for local
browsing.
</para>

<para>
Remote POP3 servers can be accessed using URLs with the
<literal>pop</literal> protocol for unencrypted and
<literal>pops</literal> for encrypted communication, see <xref
linkend="url-syntax"/> for details.
</para>

<para>
Polling for new mail is more expensive over POP3 than locally. For this
reason the frequency at which Mutt will check for mail remotely can be
controlled by the <link
linkend="pop-checkinterval">$pop_checkinterval</link> variable, which
defaults to every 60 seconds.
</para>

<para>
POP is read-only which doesn't allow for some features like editing
messages or changing flags. However, using <xref
linkend="header-caching"/> and <xref linkend="body-caching"/> Mutt
simulates the new/old/read flags as well as flagged and replied.  Mutt
applies some logic on top of remote messages but cannot change them so
that modifications of flags are lost when messages are downloaded from
the POP server (either by Mutt or other tools).
</para>

<anchor id="fetch-mail"/>
<para>
Another way to access your POP3 mail is the
<literal>&lt;fetch-mail&gt;</literal> function (default: G).  It allows
to connect to <link linkend="pop-host">$pop_host</link>, fetch all your
new mail and place it in the local <link
linkend="spoolfile">$spoolfile</link>.  After this point, Mutt runs
exactly as if the mail had always been local.
</para>

<note>
<para>
If you only need to fetch all messages to a local mailbox you should
consider using a specialized program, such as
<literal>fetchmail(1)</literal>, <literal>getmail(1)</literal> or
similar.
</para>
</note>

</sect1>

<sect1 id="imap">
<title>IMAP Support</title>

<para>
If Mutt was compiled with IMAP support (by running the
<emphasis>configure</emphasis> script with the
<emphasis>--enable-imap</emphasis> flag), it has the ability to work
with folders located on a remote IMAP server.
</para>

<para>
You can access the remote inbox by selecting the folder by its URL (see
<xref linkend="url-syntax"/> for details) using the
<literal>imap</literal> or <literal>imaps</literal> protocol.
Alternatively, a pine-compatible notation is also supported, i.e.
<literal>{[username@]imapserver[:port][/ssl]}path/to/folder</literal>
</para>

<para>
Note that not all servers use <quote>/</quote> as the hierarchy
separator.  Mutt should correctly notice which separator is being used
by the server and convert paths accordingly.
</para>

<para>
When browsing folders on an IMAP server, you can toggle whether to look
at only the folders you are subscribed to, or all folders with the
<emphasis>toggle-subscribed</emphasis> command.  See also the <link
linkend="imap-list-subscribed">$imap_list_subscribed</link> variable.
</para>

<para>
Polling for new mail on an IMAP server can cause noticeable delays. So,
you'll want to carefully tune the <link
linkend="mail-check">$mail_check</link> and <link
linkend="timeout">$timeout</link> variables. Reasonable values are:
</para>

<screen>
set mail_check=90
set timeout=15
</screen>

<para>
with relatively good results even over slow modem lines.
</para>

<note>
<para>
Note that if you are using mbox as the mail store on UW servers prior to
v12.250, the server has been reported to disconnect a client if another
client selects the same folder.
</para>
</note>

<sect2 id="imap-browser">
<title>The IMAP Folder Browser</title>

<para>
As of version 1.2, Mutt supports browsing mailboxes on an IMAP
server. This is mostly the same as the local file browser, with the
following differences:
</para>

<itemizedlist>
<listitem>

<para>
In lieu of file permissions, Mutt displays the string
<quote>IMAP</quote>, possibly followed by the symbol <quote>+</quote>,
indicating that the entry contains both messages and subfolders. On
Cyrus-like servers folders will often contain both messages and
subfolders.  A mailbox name with a trailing delimiter (usually
<quote>/</quote> or <quote>.</quote>) indicates subfolders.
</para>
</listitem>
<listitem>

<para>
For the case where an entry can contain both messages and subfolders,
the selection key (bound to <literal>enter</literal> by default) will
choose to descend into the subfolder view. If you wish to view the
messages in that folder, you must use <literal>view-file</literal>
instead (bound to <literal>space</literal> by default).
</para>
</listitem>
<listitem>

<para>
You can create, delete and rename mailboxes with the
<literal>&lt;create-mailbox&gt;</literal>,
<literal>&lt;delete-mailbox&gt;</literal>, and
<literal>&lt;rename-mailbox&gt;</literal> commands (default bindings:
<literal>C</literal>, <literal>d</literal> and <literal>r</literal>,
respectively). You may also <literal>&lt;subscribe&gt;</literal> and
<literal>&lt;unsubscribe&gt;</literal> to mailboxes (normally these are
bound to <literal>s</literal> and <literal>u</literal>, respectively).
</para>
</listitem>

</itemizedlist>

</sect2>

<sect2 id="imap-authentication">
<title>Authentication</title>

<para>
Mutt supports four authentication methods with IMAP servers: SASL,
GSSAPI, CRAM-MD5, and LOGIN (there is a patch by Grant Edwards to add
NTLM authentication for you poor exchange users out there, but it has
yet to be integrated into the main tree). There is also support for the
pseudo-protocol ANONYMOUS, which allows you to log in to a public IMAP
server without having an account. To use ANONYMOUS, simply make your
username blank or <quote>anonymous</quote>.
</para>

<para>
SASL is a special super-authenticator, which selects among several
protocols (including GSSAPI, CRAM-MD5, ANONYMOUS, and DIGEST-MD5) the
most secure method available on your host and the server. Using some of
these methods (including DIGEST-MD5 and possibly GSSAPI), your entire
session will be encrypted and invisible to those teeming network
snoops. It is the best option if you have it. To use it, you must have
the Cyrus SASL library installed on your system and compile Mutt with
the <emphasis>--with-sasl</emphasis> flag.
</para>

<para>
Mutt will try whichever methods are compiled in and available on the
server, in the following order: SASL, ANONYMOUS, GSSAPI, CRAM-MD5,
LOGIN.
</para>

<para>
There are a few variables which control authentication:
</para>

<itemizedlist>
<listitem>

<para>
<link linkend="imap-user">$imap_user</link> - controls the username
under which you request authentication on the IMAP server, for all
authenticators. This is overridden by an explicit username in the
mailbox path (i.e. by using a mailbox name of the form
<literal>{user@host}</literal>).
</para>
</listitem>
<listitem>

<para>
<link linkend="imap-pass">$imap_pass</link> - a password which you may
preset, used by all authentication methods where a password is needed.
</para>
</listitem>
<listitem>

<para>
<link linkend="imap-authenticators">$imap_authenticators</link> - a
colon-delimited list of IMAP authentication methods to try, in the order
you wish to try them. If specified, this overrides Mutt's default
(attempt everything, in the order listed above).
</para>
</listitem>

</itemizedlist>

</sect2>

</sect1>

<sect1 id="smtp">
<title>SMTP Support</title>

<para>
Besides supporting traditional mail delivery through a
sendmail-compatible program, Mutt supports delivery through SMTP if it
was configured and built with <literal>--enable-smtp</literal>.
</para>

<para>
If the configuration variable <link linkend="smtp-url">$smtp_url</link>
is set, Mutt will contact the given SMTP server to deliver messages; if
it is unset, Mutt will use the program specified by <link
linkend="sendmail">$sendmail</link>.
</para>

<para>
For details on the URL syntax, please see <xref linkend="url-syntax"/>.
</para>

<para>
The built-in SMTP support supports encryption (the
<literal>smtps</literal> protocol using SSL or TLS) as well as SMTP
authentication using SASL. The authentication mechanisms for SASL are
specified in <link
linkend="smtp-authenticators">$smtp_authenticators</link> defaulting to
an empty list which makes Mutt try all available methods from
most-secure to least-secure.
</para>

</sect1>

<sect1 id="oauth">
<title>OAUTHBEARER Support</title>

<para>
Preliminary OAUTH support for IMAP, POP, and SMTP is provided via
external scripts.
</para>

<para>
At least for Gmail, you can use the <literal>oauth2.py</literal>
script from Google's gmail-oauth2-tools: <ulink
url="https://github.com/google/gmail-oauth2-tools/blob/master/python/oauth2.py"
>https://github.com/google/gmail-oauth2-tools/blob/master/python/oauth2.py</ulink>
</para>

<para>
You'll need to get your own oauth client credentials for Gmail here:
<ulink url="https://console.developers.google.com/apis/credentials"
>https://console.developers.google.com/apis/credentials</ulink>
</para>

<para>
Then, you'd use <literal>oauth2.py</literal> with
<literal>--generate_oauth2_token</literal> to get a refresh token, and
configure mutt with:
</para>

<screen>
set imap_authenticators="oauthbearer"
set imap_oauth_refresh_command="/path/to/oauth2.py --quiet --user=[email_address]\
    --client_id=[client_id] --client_secret=[client_secret]\
    --refresh_token=[refresh_token]"
</screen>

<para>
Substitute pop or smtp for imap in the above example to configure for those.
</para>
</sect1>

<sect1 id="account-hook">
<title>Managing Multiple Accounts</title>

<para>
Usage:
</para>

<cmdsynopsis>
<command>account-hook</command>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>

<para>
If you happen to have accounts on multiple IMAP, POP and/or SMTP
servers, you may find managing all the authentication settings
inconvenient and error-prone. The <link
linkend="account-hook"><command>account-hook</command></link> command
may help. This hook works like <link
linkend="folder-hook"><command>folder-hook</command></link> but is
invoked whenever Mutt needs to access a remote mailbox (including inside
the folder browser), not just when you open the mailbox. This includes
(for example) polling for new mail, storing Fcc messages and saving
messages to a folder. As a consequence, <link
linkend="account-hook"><command>account-hook</command></link> should
only be used to set connection-related settings such as passwords or
tunnel commands but not settings such as sender address or name (because
in general it should be considered unpredictable which <link
linkend="account-hook"><command>account-hook</command></link> was last
used).
</para>

<para>
Some examples:
</para>

<screen>
account-hook . 'unset imap_user; unset imap_pass; unset tunnel'
account-hook imap://host1/ 'set imap_user=me1 imap_pass=foo'
account-hook imap://host2/ 'set tunnel="ssh host2 /usr/libexec/imapd"'
account-hook smtp://user@host3/ 'set tunnel="ssh host3 /usr/libexec/smtpd"'
</screen>

<para>
To manage multiple accounts with, for example, different values of <link
linkend="record">$record</link> or sender addresses, <link
linkend="folder-hook"><command>folder-hook</command></link> has to be be
used together with the <link
linkend="mailboxes"><command>mailboxes</command></link> command.
</para>

<example id="ex-multiaccount">
<title>Managing multiple accounts</title>
<screen>
mailboxes imap://user@host1/INBOX
folder-hook imap://user@host1/ 'set folder=imap://host1/ ; set record=+INBOX/Sent'

mailboxes imap://user@host2/INBOX
folder-hook imap://user@host2/ 'set folder=imap://host2/ ; set record=+INBOX/Sent'
</screen>
</example>

<para>
In example <xref linkend="ex-multiaccount"/> the folders are defined
using <link linkend="mailboxes"><command>mailboxes</command></link> so
Mutt polls them for new mail. Each <link
linkend="folder-hook"><command>folder-hook</command></link> triggers
when one mailbox below each IMAP account is opened and sets <link
linkend="folder">$folder</link> to the account's root folder. Next, it
sets <link linkend="record">$record</link> to the
<emphasis>INBOX/Sent</emphasis> folder below the newly set <link
linkend="folder">$folder</link>. Please notice that the value the
<quote>+</quote> <link linkend="shortcuts">mailbox shortcut</link>
refers to depends on the <emphasis>current</emphasis> value of <link
linkend="folder">$folder</link> and therefore has to be set separately
per account. Setting other values like <link linkend="from">$from</link>
or <link linkend="signature">$signature</link> is analogous to setting
<link linkend="record">$record</link>.
</para>

</sect1>

<sect1 id="caching">
<title>Local Caching</title>

<para>
Mutt contains two types of local caching: <emphasis>(1)</emphasis> the
so-called <quote>header caching</quote> and <emphasis>(2)</emphasis> the
so-called <quote>body caching</quote> which are both described in this
section.
</para>

<para>
Header caching is optional as it depends on external libraries, body
caching is always enabled if Mutt is compiled with POP and/or IMAP
support as these use it (body caching requires no external library).
</para>

<sect2 id="header-caching">
<title>Header Caching</title>

<para>
Mutt provides optional support for caching message headers for the
following types of folders: IMAP, POP, Maildir and MH. Header caching
greatly speeds up opening large folders because for remote folders,
headers usually only need to be downloaded once. For Maildir and MH,
reading the headers from a single file is much faster than looking at
possibly thousands of single files (since Maildir and MH use one file
per message.)
</para>

<para>
Header caching can be enabled via the configure script and the
<emphasis>--enable-hcache</emphasis> option. It's not turned on by
default because external database libraries are required: one of
tokyocabinet, kyotocabinet, lmdb, qdbm, gdbm or bdb must be present.
</para>

<para>
If enabled, <link linkend="header-cache">$header_cache</link> can be
used to either point to a file or a directory. If set to point to a
file, one database file for all folders will be used (which may result
in lower performance), but one file per folder if it points to a
directory.
</para>

</sect2>

<sect2 id="body-caching">
<title>Body Caching</title>

<para>
Both cache methods can be combined using the same directory for storage
(and for IMAP/POP even provide meaningful file names) which simplifies
manual maintenance tasks.
</para>

<para>
In addition to caching message headers only, Mutt can also cache whole
message bodies. This results in faster display of messages for POP and
IMAP folders because messages usually have to be downloaded only once.
</para>

<para>
For configuration, the variable <link linkend="message-cachedir"
>$message_cachedir</link> must point to a directory. There, Mutt will
create a hierarchy of subdirectories named like the account and mailbox
path the cache is for.
</para>

</sect2>

<sect2 id="cache-dirs">
<title>Cache Directories</title>

<para>
For using both, header and body caching, <link
linkend="header-cache">$header_cache</link> and <link
linkend="message-cachedir" >$message_cachedir</link> can be safely set
to the same value.
</para>

<para>
In a header or body cache directory, Mutt creates a directory hierarchy
named like: <literal>proto:user@hostname</literal> where
<literal>proto</literal> is either <quote>pop</quote> or
<quote>imap.</quote> Within there, for each folder, Mutt stores messages
in single files and header caches in files with the
<quote>.hcache</quote> extension.  All files can be removed as needed if
the consumed disk space becomes an issue as Mutt will silently fetch
missing items again. Pathnames are always stored in UTF-8 encoding.
</para>

<para>
For Maildir and MH, the header cache files are named after the MD5
checksum of the path.
</para>

</sect2>

<sect2 id="maint-cache">
<title>Maintenance</title>

<para>
Mutt does not (yet) support maintenance features for header cache
database files so that files have to be removed in case they grow too
big. It depends on the database library used for header caching whether
disk space freed by removing messages is re-used.
</para>

<para>
For body caches, Mutt can keep the local cache in sync with the remote
mailbox if the <link
linkend="message-cache-clean">$message_cache_clean</link> variable is
set. Cleaning means to remove messages from the cache which are no
longer present in the mailbox which only happens when other mail clients
or instances of Mutt using a different body cache location delete
messages (Mutt itself removes deleted messages from the cache when
syncing a mailbox). As cleaning can take a noticeable amount of time, it
should not be set in general but only occasionally.
</para>

</sect2>

</sect1>

<sect1 id="exact-address">
<title>Exact Address Generation</title>

<para>
Mutt supports the <quote>Name &lt;user@host&gt;</quote> address syntax
for reading and writing messages, the older <quote>user@host
(Name)</quote> syntax is only supported when reading messages. The
<emphasis>--enable-exact-address</emphasis> switch can be given to
configure to build it with write-support for the latter
syntax. <literal>EXACT_ADDRESS</literal> in the output of <literal>mutt
-v</literal> indicates whether it's supported.
</para>

</sect1>

<sect1 id="sending-mixmaster">
<title>Sending Anonymous Messages via Mixmaster</title>

<para>
You may also have compiled Mutt to co-operate with Mixmaster, an
anonymous remailer.  Mixmaster permits you to send your messages
anonymously using a chain of remailers. Mixmaster support in Mutt is for
mixmaster version 2.04 or later.
</para>

<para>
To use it, you'll have to obey certain restrictions.  Most important,
you cannot use the <literal>Cc</literal> and <literal>Bcc</literal>
headers.  To tell Mutt to use mixmaster, you have to select a remailer
chain, using the mix function on the compose menu.
</para>

<para>
The chain selection screen is divided into two parts.  In the (larger)
upper part, you get a list of remailers you may use.  In the lower part,
you see the currently selected chain of remailers.
</para>

<para>
You can navigate in the chain using the
<literal>&lt;chain-prev&gt;</literal> and
<literal>&lt;chain-next&gt;</literal> functions, which are by default
bound to the left and right arrows and to the <literal>h</literal> and
<literal>l</literal> keys (think vi keyboard bindings).  To insert a
remailer at the current chain position, use the
<literal>&lt;insert&gt;</literal> function.  To append a remailer behind
the current chain position, use <literal>&lt;select-entry&gt;</literal>
or <literal>&lt;append&gt;</literal>.  You can also delete entries from
the chain, using the corresponding function.  Finally, to abandon your
changes, leave the menu, or <literal>&lt;accept&gt;</literal> them
pressing (by default) the <literal>Return</literal> key.
</para>

<para>
Note that different remailers do have different capabilities, indicated
in the %c entry of the remailer menu lines (see <link
linkend="mix-entry-format">$mix_entry_format</link>).  Most important is
the <quote>middleman</quote> capability, indicated by a capital
<quote>M</quote>: This means that the remailer in question cannot be
used as the final element of a chain, but will only forward messages to
other mixmaster remailers.  For details on the other capabilities,
please have a look at the mixmaster documentation.
</para>

</sect1>

<sect1 id="sidebar">
  <title>Sidebar</title>
  <subtitle>Overview of mailboxes</subtitle>

  <sect2 id="sidebar-intro">
    <title>Introduction</title>

    <para>
      The Sidebar shows a list of all your mailboxes.  The list can be
      turned on and off, it can be themed and the list style can be
      configured.
    </para>
  </sect2>

  <sect2 id="sidebar-variables">
    <title>Variables</title>

    <table id="table-sidebar-variables">
      <title>Sidebar Variables</title>
      <tgroup cols="3">
	<thead>
	  <row>
	    <entry>Name</entry>
	    <entry>Type</entry>
	    <entry>Default</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><literal>sidebar_delim_chars</literal></entry>
	    <entry>string</entry>
	    <entry><literal>/.</literal></entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_divider_char</literal></entry>
	    <entry>string</entry>
	    <entry><literal>|</literal></entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_folder_indent</literal></entry>
	    <entry>boolean</entry>
	    <entry><literal>no</literal></entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_format</literal></entry>
	    <entry>string</entry>
	    <entry><literal>%B%*  %n</literal></entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_indent_string</literal></entry>
	    <entry>string</entry>
	    <entry><literal>&nbsp;&nbsp;</literal> (two spaces)</entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_new_mail_only</literal></entry>
	    <entry>boolean</entry>
	    <entry><literal>no</literal></entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_next_new_wrap</literal></entry>
	    <entry>boolean</entry>
	    <entry><literal>no</literal></entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_short_path</literal></entry>
	    <entry>boolean</entry>
	    <entry><literal>no</literal></entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_sort_method</literal></entry>
	    <entry>enum</entry>
	    <entry><literal>unsorted</literal></entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_visible</literal></entry>
	    <entry>boolean</entry>
	    <entry><literal>no</literal></entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_width</literal></entry>
	    <entry>number</entry>
	    <entry><literal>20</literal></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </sect2>

  <sect2 id="sidebar-functions">
    <title>Functions</title>

    <para>
      Sidebar adds the following functions to Mutt.
      By default, none of them are bound to keys.
    </para>

    <table id="table-sidebar-functions">
      <title>Sidebar Functions</title>
      <tgroup cols="3">
	<thead>
	  <row>
	    <entry>Menus</entry>
	    <entry>Function</entry>
	    <entry>Description</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>index,pager</entry>
	    <entry><literal>&lt;sidebar-next&gt;</literal></entry>
	    <entry>Move the highlight to next mailbox</entry>
	  </row>
	  <row>
	    <entry>index,pager</entry>
	    <entry><literal>&lt;sidebar-next-new&gt;</literal></entry>
	    <entry>Move the highlight to next mailbox with new mail</entry>
	  </row>
	  <row>
	    <entry>index,pager</entry>
	    <entry><literal>&lt;sidebar-open&gt;</literal></entry>
	    <entry>Open highlighted mailbox</entry>
	  </row>
	  <row>
	    <entry>index,pager</entry>
	    <entry><literal>&lt;sidebar-page-down&gt;</literal></entry>
	    <entry>Scroll the Sidebar down 1 page</entry>
	  </row>
	  <row>
	    <entry>index,pager</entry>
	    <entry><literal>&lt;sidebar-page-up&gt;</literal></entry>
	    <entry>Scroll the Sidebar up 1 page</entry>
	  </row>
	  <row>
	    <entry>index,pager</entry>
	    <entry><literal>&lt;sidebar-prev&gt;</literal></entry>
	    <entry>Move the highlight to previous mailbox</entry>
	  </row>
	  <row>
	    <entry>index,pager</entry>
	    <entry><literal>&lt;sidebar-prev-new&gt;</literal></entry>
	    <entry>Move the highlight to previous mailbox with new mail</entry>
	  </row>
	  <row>
	    <entry>index,pager</entry>
	    <entry><literal>&lt;sidebar-toggle-visible&gt;</literal></entry>
	    <entry>Make the Sidebar (in)visible</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </sect2>

  <sect2 id="sidebar-whitelist">
    <title>Commands</title>
    <cmdsynopsis>
      <command>sidebar_whitelist</command>
      <arg choice="plain">
	<replaceable class="parameter">mailbox</replaceable>
      </arg>
      <arg choice="opt" rep="repeat">
	<replaceable class="parameter">mailbox</replaceable>
      </arg>

      <command>unsidebar_whitelist</command>
      <group choice="req">
      <arg choice="plain">
	<replaceable class="parameter">*</replaceable>
      </arg>
      <arg choice="plain" rep="repeat">
	<replaceable class="parameter">mailbox</replaceable>
      </arg>
      </group>
    </cmdsynopsis>

    <para>
      This command specifies mailboxes that will always be displayed
      in the sidebar, even if <link
      linkend="sidebar-new-mail-only">$sidebar_new_mail_only</link>
      is set and the mailbox does not contain new mail.
    </para>

    <para>
      The <quote>unsidebar_whitelist</quote> command is used to remove a mailbox from
      the list of whitelisted mailboxes. Use <quote>unsidebar_whitelist *</quote>
      to remove all mailboxes.
    </para>
  </sect2>

  <sect2 id="sidebar-colors">
    <title>Colors</title>

    <table id="table-sidebar-colors">
      <title>Sidebar Colors</title>
      <tgroup cols="3">
	<thead>
	  <row>
	    <entry>Name</entry>
	    <entry>Default Color</entry>
	    <entry>Description</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><literal>sidebar_divider</literal></entry>
	    <entry>default</entry>
	    <entry>The dividing line between the Sidebar and the Index/Pager panels</entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_flagged</literal></entry>
	    <entry>default</entry>
	    <entry>Mailboxes containing flagged mail</entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_highlight</literal></entry>
	    <entry>underline</entry>
	    <entry>Cursor to select a mailbox</entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_indicator</literal></entry>
	    <entry>mutt <literal>indicator</literal></entry>
	    <entry>The mailbox open in the Index panel</entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_new</literal></entry>
	    <entry>default</entry>
	    <entry>Mailboxes containing new mail</entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_spoolfile</literal></entry>
	    <entry>default</entry>
	    <entry>Mailbox that receives incoming mail</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para>
    If the <literal>sidebar_indicator</literal> color isn't set, then the default Mutt
    indicator color will be used (the color used in the index panel).
    </para>
  </sect2>

  <sect2 id="sidebar-sort">
    <title>Sort</title>

    <table id="table-sidebar-sort">
      <title>Sidebar Sort</title>
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry>Sort</entry>
	    <entry>Description</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><literal>alpha</literal></entry>
	    <entry>Alphabetically by path</entry>
	  </row>
	  <row>
	    <entry><literal>count</literal></entry>
	    <entry>Total number of messages</entry>
	  </row>
	  <row>
	    <entry><literal>flagged</literal></entry>
	    <entry>Number of flagged messages</entry>
	  </row>
	  <row>
	    <entry><literal>name</literal></entry>
	    <entry>Alphabetically by path</entry>
	  </row>
	  <row>
	    <entry><literal>new</literal></entry>
	    <entry>Number of unread messages</entry>
	  </row>
	  <row>
	    <entry><literal>path</literal></entry>
	    <entry>Alphabetically by path</entry>
	  </row>
	  <row>
	    <entry><literal>unread</literal></entry>
	    <entry>Number of unread messages</entry>
	  </row>
	  <row>
	    <entry><literal>unsorted</literal></entry>
	    <entry>Do not resort the paths</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </sect2>


  <sect2 id="sidebar-see-also">
    <title>See Also</title>

    <itemizedlist>
      <listitem><para><link linkend="regexp">Regular Expressions</link></para></listitem>
      <listitem><para><link linkend="patterns">Patterns</link></para></listitem>
      <listitem><para><link linkend="color">Color command</link></para></listitem>
    </itemizedlist>
  </sect2>
</sect1>

<sect1 id="compress">
  <title>Compressed Folders Feature</title>
  <subtitle>Read from/write to compressed mailboxes</subtitle>

  <sect2 id="compress-intro">
    <title>Introduction</title>

    <para>
      The Compressed Folder patch allows Mutt to read mailbox files that are
      compressed.  But it isn't limited to compressed files.  It works well
      with encrypted files, too.  In fact, if you can create a program/script
      to convert to and from your format, then Mutt can read it.
    </para>

    <para>
      The patch adds three hooks to Mutt: <literal>open-hook</literal>,
      <literal>close-hook</literal> and <literal>append-hook</literal>.  They
      define commands to: uncompress a file; compress a file; append
      messages to an already compressed file.
    </para>

    <para>
      There are some examples of both compressed and encrypted files,
      later.  For now, the documentation will just concentrate on
      compressed files.
    </para>

  </sect2>

  <sect2 id="compress-commands">
    <title>Commands</title>
    <cmdsynopsis>
      <command>open-hook</command>
      <arg choice="plain">
        <replaceable class="parameter">pattern</replaceable>
      </arg>
      <arg choice="plain">
        <replaceable class="parameter">shell-command</replaceable>
      </arg>
      <command>close-hook</command>
      <arg choice="plain">
        <replaceable class="parameter">pattern</replaceable>
      </arg>
      <arg choice="plain">
        <replaceable class="parameter">shell-command</replaceable>
      </arg>
      <command>append-hook</command>
      <arg choice="plain">
        <replaceable class="parameter">pattern</replaceable>
      </arg>
      <arg choice="plain">
        <replaceable class="parameter">shell-command</replaceable>
      </arg>
    </cmdsynopsis>

    <para>
      The shell-command must contain two placeholders for filenames:
      <literal>%f</literal> and <literal>%t</literal>.  These represent
      <quote>from</quote> and <quote>to</quote> filenames.  These placeholders
      should be placed inside single-quotes to prevent unintended shell
      expansions.
    </para>

    <para>
      If you need the exact string <quote>%f</quote> or <quote>%t</quote> in your
      command, simply double up the <quote>%</quote> character, e.g.
      <quote>%%f</quote> or <quote>%%t</quote>.
    </para>

    <table id="table-compress-optional">
      <title>Not all Hooks are Required</title>
      <tgroup cols="5">
        <thead>
          <row>
            <entry>Open</entry>
            <entry>Close</entry>
            <entry>Append</entry>
            <entry>Effect</entry>
            <entry>Useful if</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Open</entry>
            <entry>-</entry>
            <entry>-</entry>
            <entry>Folder is readonly</entry>
            <entry>The folder is just a backup</entry>
          </row>
          <row>
            <entry>Open</entry>
            <entry>Close</entry>
            <entry>-</entry>
            <entry>Folder is read/write, but the entire folder must be
              written if anything is changed</entry>
            <entry>Your compression format doesn't support appending</entry>
          </row>
          <row>
            <entry>Open</entry>
            <entry>Close</entry>
            <entry>Append</entry>
            <entry>Folder is read/write and emails can be efficiently added
              to the end</entry>
            <entry>Your compression format supports appending</entry>
          </row>
          <row>
            <entry>Open</entry>
            <entry>-</entry>
            <entry>Append</entry>
            <entry>Folder is readonly, but can be appended to</entry>
            <entry>You want to store emails, but never change them</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <note>
      <para>The command:</para>
      <itemizedlist>
        <listitem><para>should return a non-zero exit status on failure</para></listitem>
        <listitem><para>should not delete any files</para></listitem>
      </itemizedlist>
    </note>

    <sect3 id="open-hook">
      <title>Read from compressed mailbox</title>

      <screen>open-hook regexp shell-command</screen>

      <para>
        If Mutt is unable to open a file, it then looks for
        <literal>open-hook</literal> that matches the filename.
      </para>

      <para>
        If your compression program doesn't have a well-defined extension,
        then you can use <literal>.</literal> as the regexp.
      </para>

      <example id="compress-open-hook-example">
        <title>Example of open-hook</title>

        <screen>open-hook '\.gz$' &quot;gzip -cd '%f' &gt; '%t'&quot;</screen>

        <itemizedlist>
          <listitem><para>Mutt finds a file, <quote>example.gz</quote>,
              that it can't read</para></listitem>
          <listitem><para>Mutt has an <literal>open-hook</literal>
              whose regexp matches the filename:
              <literal>\.gz$</literal></para></listitem>
          <listitem><para>Mutt uses the command <literal>gzip -cd</literal>
              to create a temporary file that it <emphasis>can</emphasis>
              read</para></listitem>
        </itemizedlist>
      </example>
    </sect3>

    <sect3 id="close-hook">
      <title>Write to a compressed mailbox</title>

      <screen>close-hook regexp shell-command</screen>

      <para>
        When Mutt has finished with a compressed mail folder, it will look
        for a matching <literal>close-hook</literal> to recompress the file.
        This hook is <link linkend="table-compress-optional">optional</link>.
      </para>

      <note>
        <para>
          If the folder has not been modified, the
          <literal>close-hook</literal> will not be called.
        </para>
      </note>

      <example id="compress-close-hook-example">
        <title>Example of close-hook</title>

        <screen>close-hook '\.gz$' &quot;gzip -c '%t' &gt; '%f'&quot;</screen>

        <itemizedlist>
          <listitem><para>Mutt has finished with a folder, <quote>example.gz</quote>,
              that it opened with <literal>open-hook</literal></para></listitem>
          <listitem><para>The folder has been modified</para></listitem>
          <listitem><para>Mutt has a <literal>close-hook</literal> whose regexp
              matches the filename: <literal>\.gz$</literal></para></listitem>
          <listitem><para>Mutt uses the command <literal>gzip -c</literal>
              to create a new compressed file</para></listitem>
        </itemizedlist>
      </example>
    </sect3>

    <sect3 id="append-hook">
      <title>Append to a compressed mailbox</title>

      <screen>append-hook regexp shell-command</screen>

      <para>
        When Mutt wants to append an email to a compressed mail folder, it
        will look for a matching <literal>append-hook</literal>.
        This hook is <link linkend="table-compress-optional">optional</link>.
      </para>

      <para>
        Using the <literal>append-hook</literal> will save time, but
        Mutt won't be able to determine the type of the mail folder
        inside the compressed file.
      </para>

      <para>
        Mutt will <emphasis>assume</emphasis> the type to be that of
        the <literal>$mbox_type</literal> variable.  Mutt also uses
        this type for temporary files.
      </para>

      <para>
        Mutt will only use the <literal>append-hook</literal> for existing files.
        The <literal>close-hook</literal> will be used for empty, or missing files.
      </para>

      <note>
        <para>
          If your command writes to stdout, it is vital that you use
          <literal>&gt;&gt;</literal> in the <quote>append-hook</quote>.
          If not, data will be lost.
        </para>
      </note>

      <example id="compress-append-hook-example">
        <title>Example of append-hook</title>

        <screen>append-hook '\.gz$' &quot;gzip -c '%t' &gt;&gt; '%f'&quot;</screen>

        <itemizedlist>
          <listitem><para>Mutt wants to append an email to a folder, <quote>example.gz</quote>,
              that it opened with <literal>open-hook</literal></para></listitem>
          <listitem><para>Mutt has an <literal>append-hook</literal> whose regexp matches
              the filename: <literal>\.gz$</literal></para></listitem>
          <listitem><para>Mutt knows the mailbox type from the <literal>$mbox</literal>
              variable</para></listitem>
          <listitem><para>Mutt uses the command <literal>gzip -c</literal>
              to append to an existing compressed file</para></listitem>
        </itemizedlist>
      </example>

    </sect3>

    <sect3 id="compress-empty">
      <title>Empty Files</title>

      <para>
        Mutt assumes that an empty file is not compressed.  In this
        situation, unset <link linkend="save-empty">$save_empty</link>, so
        that the compressed file will be removed if you delete all of the
        messages.
      </para>
    </sect3>

    <sect3 id="compress-security">
      <title>Security</title>

      <para>
        Encrypted files are decrypted into temporary files which are
        stored in the <link linkend="tmpdir">$tmpdir</link> directory.
        This could be a security risk.
      </para>
    </sect3>
  </sect2>
</sect1>

<sect1 id="autocryptdoc">
  <title>Autocrypt</title>

  <para>
    Mutt can be compiled with Autocrypt support by running
    <literal>configure</literal> with the
    <literal>--enable-autocrypt</literal> flag.  Autocrypt provides
    easy to use, passive protection against data collection.  Keys are
    distributed via an <literal>Autocrypt:</literal> header added to
    emails.  It does <emphasis>not</emphasis> protect against active
    adversaries, and so should not be considered a substitute for
    normal encryption via your keyring, using key signing and the web
    of trust to verify identities.  With an understanding of these
    limitations, Autocrypt still provides an easy way to minimize
    cleartext emails sent between common correspondants, without
    having to explicitly exchange keys.  More information can be found
    at <ulink
    url="https://autocrypt.org/">https://autocrypt.org/</ulink>.
  </para>

  <sect2 id="autocryptdoc-requirements">
    <title>Requirements</title>
    <para>
      Autocrypt requires support for ECC cryptography, and Mutt by
      default will generate ECC keys.  Therefore GnuPG 2.1 or greater
      is required.  Additionally, Mutt's Autocrypt implementation uses
      GPGME and requires at least version 1.8.0.
    </para>
    <para>
      Account and peer information is stored in a sqlite3 database, and
      so Mutt must be configured with the <literal>--with-sqlite3</literal>
      flag when autocrypt is enabled.
    </para>
    <para>
      It is highly recommended Mutt be configured
      <literal>--with-idn</literal> or
      <literal>--with-idn2</literal> so that Autocrypt can properly
      deal with international domain names.
    </para>
    <para>
      While Mutt uses GPGME for Autocrypt, normal keyring operations
      can still be performed via classic mode (i.e. with <link
      linkend="crypt-use-gpgme">$crypt_use_gpgme</link> unset).
      However, to avoid unnecessary prompts, it is recommended gpg not
      be configured in <literal>loopback pinentry</literal> mode, and
      that <link linkend="pgp-use-gpg-agent">$pgp_use_gpg_agent</link>
      remain set (the default).
    </para>
  </sect2>

  <sect2 id="autocryptdoc-init">
    <title>First Run</title>
    <para>
      To enable Autocrypt, set <link
      linkend="autocrypt">$autocrypt</link>, and if desired change the
      value of <link linkend="autocrypt-dir">$autocrypt_dir</link> in
      your muttrc.  The first time Mutt is run after that, you will be
      prompted to create <link
      linkend="autocrypt-dir">$autocrypt_dir</link>.  Mutt will then
      automatically create an sqlite3 database and gpg keyring in that
      directory.  Note since these files should be considered private,
      Mutt will create this directory with mode
      <literal>700</literal>.  If you create the directory manually,
      you should do the same.
    </para>
    <para>
      Mutt recommends keeping the <link
      linkend="autocrypt-dir">$autocrypt_dir</link> directory set
      differently from your GnuPG keyring directory
      (e.g. <literal>~/.gnupg</literal>).  Keys are automatically
      imported into the keyring from <literal>Autocrypt:</literal>
      headers.  Compared to standard <quote>web of trust</quote> keys,
      Autocrypt keys are somewhat ephemeral, and the autocrypt
      database is used to track when keys change or fall out of use.
      Having these keys mixed in with your normal keyring will make it
      more difficult to use features such as <link
      linkend="crypt-opportunistic-encrypt">$crypt_opportunistic_encrypt</link>
      and Autocrypt at the same time.
    </para>
    <para>
      The <link linkend="autocrypt-dir">$autocrypt_dir</link> variable
      is not designed to be changed while Mutt is running.  The
      database is created (if necessary) and connected to during
      startup.  Changing the variable can result in a situation where
      Mutt is looking in one place for the database and a different
      place for the GPG keyring, resulting in strange behavior.
    </para>
    <para>
      Once the directory, keyring, and database are created, Mutt will
      ask whether you would like to create an account.  In order to
      use Autocrypt, each sending address needs an account.  As a
      convenience you can create an account during the first run.  If
      you would like to add additional accounts later, this can be
      done via the <literal>&lt;autocrypt-acct-menu&gt;</literal>
      function in the index, by default bound to <literal>A</literal>.
    </para>
    <para>
      Account creation will first ask you for an email address.  Next,
      it will ask whether you want to create a new key or select an
      existing key.  (Note key selection takes place from the <link
      linkend="autocrypt-dir">$autocrypt_dir</link> keyring, which
      will normally be empty during first run).  Finally, it will ask
      whether this address should prefer encryption or not.  Autocrypt
      1.1 allows automatically enabling encryption if
      <emphasis>both</emphasis> sender and receiver have set
      <quote>prefer encryption</quote>.  Otherwise, you will need to
      manually enable autocrypt encryption in the compose menu.  For
      more details, see the compose menu section below.
    </para>
    <para>
      After optionally creating an account, Mutt will prompt you to
      scan mailboxes for Autocrypt headers.  This step occurs because
      header cached messages are not re-scanned for Autocrypt headers.
      Scanning during this step will temporarily disable the header
      cache while opening each mailbox.  If you wish to do this
      manually later, you can simulate the same thing by unsetting
      <link linkend="header-cache">$header_cache</link> and opening a
      mailbox.
    </para>
    <para>
      A final technical note: the first run process takes place
      between reading the muttrc and opening the initial mailbox.
      Some muttrc files will <link linkend="push">push</link> macros
      to be run after opening the mailbox.  To prevent this from
      interfering with the first run prompts, Mutt disables all macros
      during the first run.
    </para>
  </sect2>

  <sect2 id="autocryptdoc-compose">
    <title>Compose Menu</title>
    <para>
      When enabled, Autocrypt will add a line to the compose menu with
      two fields: <literal>Autocrypt:</literal> and
      <literal>Recommendation:</literal>.
    </para>
    <para>
      The <literal>Autocrypt:</literal> field shows whether the
      message will be encrypted by Autocrypt when sent.  It has two
      values: <literal>Encrypt</literal> and <literal>Off</literal>.
      <literal>Encrypt</literal> can be enabled using the
      <literal>&lt;autocrypt-menu&gt;</literal> function, by default
      bound to <literal>o</literal>.
    </para>
    <para>
      The <literal>Recommendation:</literal> field shows the output of
      the Autocrypt recommendation engine.  This can have one of five
      values:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>Off</literal> means the engine is disabled.  This
          can happen if the From address doesn't have an autocrypt
          account, or if the account has been manually disabled.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>No</literal> means one or more recipients are
          missing an autocrypt key, or the key found is unusable
          (i.e. expired, revoked, disabled, invalid, or not usable for
          encryption.)
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>Discouraged</literal> means a key was found for
          every recipient, but the engine is not confident the message
          will be decryptable by the recipient.  This can happen if
          the key hasn't been used recently (compared to their last
          seen email).
        </para>
        <para>
          It can also happen if the key wasn't seen first-hand from
          the sender.  Autocrypt has a feature where recipient keys
          can be included in group-encrypted emails.  This allows you
          to reply to a conversation where you don't have a key
          first-hand from one of the other recipients.  However, those
          keys are not trusted as much as from first-hand emails, so
          the engine warns you with a <literal>Discouraged</literal>
          status.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>Available</literal> means a key was found for every
          recipient, and the engine believes all keys are recent and
          seen from the recipient first hand.  However, either you or
          one of the recipients chose not to specify <quote>prefer
          encryption</quote>.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>Yes</literal> is the same as
          <literal>Available</literal>, with the addition that you and
          all recipients have specified <quote>prefer
          encryption</quote>.  This value will automatically enable
          encryption, unless you have manually switched it off or
          enabled regular encryption or signing via the
          <literal>&lt;pgp-menu&gt;</literal>.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      As mentioned above the <literal>&lt;autocrypt-menu&gt;</literal>
      function, by default bound to <literal>o</literal>, can be used
      to change the <literal>Encrypt:</literal> field value.
      <literal>(e)ncrypt</literal> will toggle encryption on.
      <literal>(c)lear</literal> will toggle encryption off.  If
      either of these are chosen, the field will remain in that state
      despite what the <literal>Recommendation:</literal> field shows.
      Lastly, <literal>(a)utomatic</literal> will set the value based
      on the recommendation engine's output.
    </para>
    <para>
      Autocrypt encryption defers to normal encryption or signing.
      <emphasis>Anything</emphasis> that enables normal encryption or
      signing will cause autocrypt encryption to turn off.  The only
      exception is when replying to an autocrypt-encrypted email
      (i.e. an email decrypted from the <link
      linkend="autocrypt-dir">$autocrypt_dir</link> keyring).  Then,
      if <link linkend="autocrypt-reply">$autocrypt_reply</link> is
      <emphasis>set</emphasis>, autocrypt mode will be forced on,
      overriding the settings
      <link linkend="crypt-autosign">$crypt_autosign</link>,
      <link linkend="crypt-autoencrypt">$crypt_autoencrypt</link>,
      <link linkend="crypt-replyencrypt">$crypt_replyencrypt</link>,
      <link linkend="crypt-replysign">$crypt_replysign</link>,
      <link linkend="crypt-replysignencrypted">$crypt_replysignencrypted</link>, and
      <link linkend="crypt-opportunistic-encrypt">$crypt_opportunistic_encrypt</link>.
    </para>
    <para>
      When postponing a message, autocrypt will respect <link
      linkend="postpone-encrypt">$postpone_encrypt</link>, but will
      use the autocrypt account key to encrypt the message.  Be sure
      to set <link linkend="postpone-encrypt">$postpone_encrypt</link>
      to ensure postponed messages marked for autocrypt encryption are
      encrypted.
    </para>
  </sect2>

  <sect2 id="autocryptdoc-acctmgmt">
    <title>Account Management</title>
    <para>
      The Autocrypt Account Menu is available from the index via
      <literal>&lt;autocrypt-acct-menu&gt;</literal>, by default bound
      to <literal>A</literal>.  See <link
      linkend="autocrypt-account-map">Autocrypt Account Menu</link> for the
      list of functions and their default keybindings.
    </para>
    <para>
      In this menu, you can create new accounts, delete accounts,
      toggle an account active/inactive, and toggle the <quote>prefer
      encryption</quote> flag for an account.
    </para>
    <para>
      Deleting an account only removes the account from the database.
      The GPG key is kept, to ensure you still have the ability to
      read past encrypted emails.
    </para>
    <para>
      The Autocrypt 1.1 <quote>Setup Message</quote> feature is not
      available yet, but will be added in the future.
    </para>
  </sect2>

  <sect2 id="autocryptdoc-keyrings">
    <title>Alternative Key and Keyring Strategies</title>
    <para>
      Mutt by default partitions Autocrypt from normal keyring
      encryption/signing.  It does this by using a separate GPG
      keyring (in <link linkend="autocrypt-dir">$autocrypt_dir</link>)
      and creating a new ECC key in that keyring for accounts.  There
      are good reasons for doing this by default.  It keeps random
      keys found inside email headers out of your normal keyring.  ECC
      keys are compact and better suited for email headers.  Autocrypt
      key selection is completely different from <quote>web of
      trust</quote> key selection, based on last-seen rules as opposed
      to trust and validity.  It also allows Mutt to distinguish
      Autocrypt encrypted emails from regular encrypted emails, and
      set the mode appropriately when replying to each type of email.
    </para>
    <para>
      Still, some users may want to use an existing key from their
      normal keyring for Autocrypt too.  There are two ways this can
      be accomplished.  The <emphasis>recommended</emphasis> way is to
      set <link linkend="autocrypt-dir">$autocrypt_dir</link> to your
      normal keyring directory (e.g. <literal>~/.gnupg</literal>).
      During account creation, choosing <quote>(s)elect existing GPG
      key</quote> will then list and allow selecting your existing key
      for the new account.
    </para>
    <para>
     An alternative is to copy your key over to the Autocrypt keyring,
     but there is a severe downside.  Mutt <emphasis>first</emphasis>
     tries to decrypt messages using the Autocrypt keyring, and if
     that fails tries the normal keyring second.  This means all
     encrypted emails to that key will be decrypted, and have
     signatures verified from, the Autocrypt keyring.  Keys signatures
     and web of trust from your normal keyring will no longer show up
     in signatures when decrypting.
    </para>
    <para>
      For that reason, if you want to use an existing key from your
      normal keyring, it is recommended to just set <link
      linkend="autocrypt-dir">$autocrypt_dir</link> to
      <literal>~/.gnupg</literal>.  This allows <quote>web of
      trust</quote> to show an appropriate signature message for
      verified messages.  Autocrypt header keys will be imported into
      your keyring, but if you don't want them mixed you should
      strongly consider using a separate autocrypt key and keyring
      instead.
    </para>
    <para>
      Both methods have a couple additional caveats:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Replying to an Autocrypt decrypted message by default forces
          Autocrypt mode on.  By sharing the same key, all replies
          will then start in Autocrypt mode, even if a message wasn't
          sent by one of your Autocrypt peers.  <link
          linkend="autocrypt-reply">$autocrypt_reply</link> can be
          <emphasis>unset</emphasis> to allow manual control of the
          mode when replying.
        </para>
      </listitem>
      <listitem>
        <para>
          When Mutt creates an account from a gpg key, it exports the
          public key, base64 encodes it, and stores that value in the
          sqlite3 database.  The value is then used in the Autocrypt
          header added to outgoing emails.  The ECC keys Mutt creates
          don't change, but if you use external keys that expire, when
          you resign to extend the expiration you will need to
          recreate the Autocrypt account using the <link
          linkend="autocryptdoc-acctmgmt">account menu</link>.
          Otherwise the Autocrypt header will contain the old expired
          exported keydata.
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
</sect1>
</chapter>

<chapter id="security">
<title>Security Considerations</title>

<para>
First of all, Mutt contains no security holes included by intention but
may contain unknown security holes. As a consequence, please run Mutt
only with as few permissions as possible. Especially, do not run Mutt as
the super user.
</para>

<para>
When configuring Mutt, there're some points to note about secure setups
so please read this chapter carefully.
</para>

<sect1 id="security-passwords">
<title>Passwords</title>

<para>
Although Mutt can be told the various passwords for accounts, please
never store passwords in configuration files. Besides the fact that the
system's operator can always read them, you could forget to mask it out
when reporting a bug or asking for help via a mailing list. Even worse,
your mail including your password could be archived by internet search
engines, mail-to-news gateways etc. It may already be too late before
you notice your mistake.
</para>

</sect1>

<sect1 id="security-tempfiles">
<title>Temporary Files</title>

<para>
Mutt uses many temporary files for viewing messages, verifying digital
signatures, etc. As long as being used, these files are visible by other
users and maybe even readable in case of misconfiguration.  Also, a
different location for these files may be desired which can be changed
via the <link linkend="tmpdir">$tmpdir</link> variable.
</para>

</sect1>

<sect1 id="security-leaks">
<title>Information Leaks</title>

<sect2 id="security-leaks-mid">
<title>Message-Id: headers</title>

<para>
Message-Id: headers contain a local part that is to be created in a
unique fashion. In order to do so, Mutt will <quote>leak</quote> some
information to the outside world when sending messages: the generation
of this header includes a step counter which is increased (and rotated)
with every message sent. Other parts include the date, time, PID of mutt,
and <link linkend="hostname">$hostname</link>.
In a longer running mutt session, others can
make assumptions about your mailing habits depending on the number of
messages sent. If this is not desired, the header can be manually
provided using <link linkend="edit-headers">$edit_headers</link> (though
not recommended).
</para>

</sect2>

<sect2 id="security-leaks-mailto">
<title><literal>mailto:</literal>-style Links</title>

<para>
As Mutt be can be set up to be the mail client to handle
<literal>mailto:</literal> style links in websites, there're security
considerations, too. Arbitrary header fields can be embedded in these
links which could override existing header fields or attach arbitrary
files using <link linkend="attach-header">the Attach:
pseudoheader</link>. This may be problematic if the <link
linkend="edit-headers">$edit-headers</link> variable is
<emphasis>unset</emphasis>, i.e. the user doesn't want to see header
fields while editing the message and doesn't pay enough attention to the
compose menu's listing of attachments.
</para>

<para>
For example, following a link like
</para>

<screen>
mailto:joe@host?Attach=~/.gnupg/secring.gpg</screen>

<para>
will send out the user's private gnupg keyring to
<literal>joe@host</literal> if the user doesn't follow the information
on screen carefully enough.
</para>

<para>
To prevent these issues, Mutt by default only accepts the
<literal>Subject</literal> and <literal>Body</literal> headers.
Allowed headers can be adjusted with the
<link linkend="mailto-allow"><command>mailto_allow</command></link> and
<link linkend="mailto-allow"><command>unmailto_allow</command></link> commands.
</para>

</sect2>

</sect1>

<sect1 id="security-external">
<title>External Applications</title>

<para>
Mutt in many places has to rely on external applications or for
convenience supports mechanisms involving external applications.
</para>

<para>
One of these is the <literal>mailcap</literal> mechanism as defined by
RfC1524. Details about a secure use of the mailcap mechanisms is given
in <xref linkend="secure-mailcap"/>.
</para>

<para>
Besides the mailcap mechanism, Mutt uses a number of other external
utilities for operation, for example to provide crypto support, in
backtick expansion in configuration files or format string filters.  The
same security considerations apply for these as for tools involved via
mailcap.
</para>

</sect1>

</chapter>


<chapter id="tuning">
<title>Performance Tuning</title>

<sect1 id="tuning-mailboxes">
<title>Reading and Writing Mailboxes</title>

<para>
Mutt's performance when reading mailboxes can be improved in two ways:
</para>

<orderedlist>

<listitem>
<para>
For remote folders (IMAP and POP) as well as folders using one-file-per
message storage (Maildir and MH), Mutt's performance can be greatly
improved using <link linkend="header-caching">header caching</link>.
using a single database per folder.
</para>
</listitem>

<listitem>
<para>
Mutt provides the <link linkend="read-inc">$read_inc</link> and <link
linkend="write-inc">$write_inc</link> variables to specify at which rate
to update progress counters. If these values are too low, Mutt may spend
more time on updating the progress counter than it spends on actually
reading/writing folders.
</para>

<para>
For example, when opening a maildir folder with a few thousand messages,
the default value for <link linkend="read-inc">$read_inc</link> may be
too low. It can be tuned on on a folder-basis using <link
linkend="folder-hook"><command>folder-hook</command>s</link>:
</para>

<screen>
<emphasis role="comment"># use very high $read_inc to speed up reading hcache'd maildirs</emphasis>
folder-hook . 'set read_inc=1000'
<emphasis role="comment"># use lower value for reading slower remote IMAP folders</emphasis>
folder-hook ^imap 'set read_inc=100'
<emphasis role="comment"># use even lower value for reading even slower remote POP folders</emphasis>
folder-hook ^pop 'set read_inc=1'</screen>

</listitem>
</orderedlist>

<para>
These settings work on a per-message basis. However, as messages may
greatly differ in size and certain operations are much faster than
others, even per-folder settings of the increment variables may not be
desirable as they produce either too few or too much progress updates.
Thus, Mutt allows to limit the number of progress updates per second
it'll actually send to the terminal using the <link
linkend="time-inc">$time_inc</link> variable.
</para>

</sect1>

<sect1 id="tuning-messages">
<title>Reading Messages from Remote Folders</title>

<para>
Reading messages from remote folders such as IMAP an POP can be slow
especially for large mailboxes since Mutt only caches a very limited
number of recently viewed messages (usually 10) per session (so that it
will be gone for the next session.)
</para>

<para>
To improve performance and permanently cache whole messages, please
refer to Mutt's so-called <link linkend="body-caching">body
caching</link> for details.
</para>

</sect1>

<sect1 id="tuning-search">
<title>Searching and Limiting</title>

<para>
When searching mailboxes either via a search or a limit action, for some
patterns Mutt distinguishes between regular expression and string
searches. For regular expressions, patterns are prefixed with
<quote>~</quote> and with <quote>=</quote> for string searches.
</para>

<para>
Even though a regular expression search is fast, it's several times
slower than a pure string search which is noticeable especially on large
folders. As a consequence, a string search should be used instead of a
regular expression search if the user already knows enough about the
search pattern.
</para>

<para>
For example, when limiting a large folder to all messages sent to or by
an author, it's much faster to search for the initial part of an e-mail
address via <literal>=Luser@</literal> instead of
<literal>~Luser@</literal>. This is especially true for searching
message bodies since a larger amount of input has to be searched.
</para>

<para>
As for regular expressions, a lower case string search pattern makes
Mutt perform a case-insensitive search except for IMAP (because for IMAP
Mutt performs server-side searches which don't support
case-insensitivity).
</para>

</sect1>

</chapter>

<chapter id="reference">
<title>Reference</title>

<sect1 id="commandline">
<title>Command-Line Options</title>

<para>
Running <literal>mutt</literal> with no arguments will make Mutt attempt
to read your spool mailbox.  However, it is possible to read other
mailboxes and to send messages from the command line as well.
</para>

<table id="tab-commandline-options">
<title>Command line options</title>
<tgroup cols="2">
<thead>
<row><entry>Option</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>-A</entry><entry>expand an alias</entry></row>
<row><entry>-a</entry><entry>attach a file to a message</entry></row>
<row><entry>-b</entry><entry>specify a blind carbon-copy (BCC) address</entry></row>
<row><entry>-c</entry><entry>specify a carbon-copy (Cc) address</entry></row>
<row><entry>-d</entry><entry>log debugging output to ~/.muttdebug0 if mutt was compiled with +DEBUG; it can range from 1-5 and affects verbosity (a value of 2 is recommended)</entry></row>
<row><entry>-D</entry><entry>print the value of all Mutt variables to stdout</entry></row>
<row><entry>-E</entry><entry>edit the draft (-H) or include (-i) file</entry></row>
<row><entry>-e</entry><entry>specify a config command to be run after initialization files are read</entry></row>
<row><entry>-f</entry><entry>specify a mailbox to load</entry></row>
<row><entry>-F</entry><entry>specify an alternate file to read initialization commands</entry></row>
<row><entry>-h</entry><entry>print help on command line options</entry></row>
<row><entry>-H</entry><entry>specify a draft file from which to read a header and body</entry></row>
<row><entry>-i</entry><entry>specify a file to include in a message composition</entry></row>
<row><entry>-m</entry><entry>specify a default mailbox type</entry></row>
<row><entry>-n</entry><entry>do not read the system Muttrc</entry></row>
<row><entry>-p</entry><entry>recall a postponed message</entry></row>
<row><entry>-Q</entry><entry>query a configuration variable</entry></row>
<row><entry>-R</entry><entry>open mailbox in read-only mode</entry></row>
<row><entry>-s</entry><entry>specify a subject (enclose in quotes if it contains spaces)</entry></row>
<row><entry>-v</entry><entry>show version number and compile-time definitions</entry></row>
<row><entry>-x</entry><entry>simulate the mailx(1) compose mode</entry></row>
<row><entry>-y</entry><entry>show a menu containing the files specified by the <command>mailboxes</command> command</entry></row>
<row><entry>-z</entry><entry>exit immediately if there are no messages in the mailbox</entry></row>
<row><entry>-Z</entry><entry>open the first folder with new message, exit immediately if none</entry></row>
</tbody>
</tgroup>
</table>

<para>
To read messages in a mailbox
</para>

<cmdsynopsis>
<command>mutt</command>
<arg choice="opt"><option>-nz</option></arg>
<arg choice="opt"><option>-F</option>
<replaceable>muttrc</replaceable>
</arg>
<arg choice="opt"><option>-m</option>
<replaceable>type</replaceable>
</arg>
<arg choice="opt"><option>-f</option>
<replaceable>mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
To compose a new message
</para>

<cmdsynopsis>
<command>mutt</command>
<arg choice="opt"><option>-En</option></arg>
<arg choice="opt"><option>-F</option>
<replaceable>muttrc</replaceable>
</arg>
<arg choice="opt"><option>-c</option>
<replaceable>address</replaceable>
</arg>
<arg choice="opt"><option>-Hi</option>
<replaceable>filename</replaceable>
</arg>
<arg choice="opt"><option>-s</option>
<replaceable>subject</replaceable>
</arg>
<arg choice="opt">
<option>-a</option>
<replaceable>file</replaceable>
<arg choice="opt" rep="repeat"/>
--
</arg>
<group choice="plain" rep="repeat">
<arg choice="plain">
<replaceable>address</replaceable>
</arg>
<arg choice="plain">
<replaceable>mailto_url</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
Mutt also supports a <quote>batch</quote> mode to send prepared
messages.  Simply redirect input from the file you wish to send.  For
example,
</para>

<screen>
mutt -s "data set for run #2" professor@bigschool.edu &lt; ~/run2.dat</screen>

<para>
will send a message to
<literal>&lt;professor@bigschool.edu&gt;</literal> with a subject of
<quote>data set for run #2</quote>.  In the body of the message will be
the contents of the file <quote>~/run2.dat</quote>.
</para>

<para>
An include file passed with <literal>-i</literal> will be used as the
body of the message.  When combined with <literal>-E</literal>, the
include file will be directly edited during message composition.  The
file will be modified regardless of whether the message is sent or
aborted.
</para>

<para>
A draft file passed with <literal>-H</literal> will be used as the
initial header and body for the message.  Multipart messages can be
used as a draft file.  When combined with <literal>-E</literal>, the
draft file will be updated to the final state of the message after
composition, regardless of whether the message is sent, aborted, or
even postponed.  Note that if the message is sent encrypted or signed,
the draft file will be saved that way too.
</para>

<para>
All files passed with <literal>-a</literal> <emphasis>file</emphasis>
will be attached as a MIME part to the message. To attach a single or
several files, use <quote>--</quote> to separate files and recipient
addresses:
</para>

<screen>
mutt -a image.png -- some@one.org</screen>

<para>
or
</para>

<screen>
mutt -a *.png -- some@one.org</screen>

<note>
<para>
The <literal>-a</literal> option must be last in the option list.
</para>
</note>

<para>
In addition to accepting a list of email addresses, Mutt also accepts a URL with
the <literal>mailto:</literal> schema as specified in RFC2368.  This is useful
when configuring a web browser to launch Mutt when clicking on mailto links.
</para>

<screen>
mutt mailto:some@one.org?subject=test&amp;cc=other@one.org</screen>

</sect1>

<sect1 id="commands">
<title>Configuration Commands</title>

<para>
The following are the commands understood by Mutt:
</para>

<itemizedlist>

<listitem>
<cmdsynopsis>
<command><link linkend="account-hook">account-hook</link></command>
<arg choice="plain">
<replaceable>regexp</replaceable>
<replaceable>command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="alias">alias</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">address</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">address</replaceable>
</arg>

<command><link linkend="alias">unalias</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">key</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="alternates">alternates</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<arg choice="plain">
<replaceable>regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>regexp</replaceable>
</arg>

<command><link linkend="alternates">unalternates</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>regexp</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="alternative-order">alternative_order</link></command>
<arg choice="plain">
<replaceable>mimetype</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>

<command><link linkend="alternative-order">unalternative_order</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="attachments">attachments</link></command>
<arg choice="plain">
<replaceable>{ + | - }disposition</replaceable>
</arg>
<arg choice="plain">
<replaceable>mime-type</replaceable>
</arg>

<command><link linkend="attachments">unattachments</link></command>
<arg choice="plain">
<replaceable>{ + | - }disposition</replaceable>
</arg>
<arg choice="plain">
<replaceable>mime-type</replaceable>
</arg>

<command><link linkend="attachments">attachments</link></command>
<arg choice="plain"><option>?</option></arg>

<command><link linkend="attachments">unattachments</link></command>
<arg choice="plain"><option>*</option></arg>

</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="auto-view">auto_view</link></command>
<arg choice="plain">
<replaceable>mimetype</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>

<command><link linkend="auto-view">unauto_view</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="bind">bind</link></command>
<arg choice="plain">
<replaceable class="parameter">map</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">function</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="charset-hook">charset-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">alias</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">charset</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="charset-hook">iconv-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">charset</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">local-charset</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="color">color</link></command>
<arg choice="plain">
<replaceable class="parameter">object</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>

<command><link linkend="color">color</link></command>
<group choice="req">
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>

<command><link linkend="color">color</link></command>
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>

<command><link linkend="color">color</link></command>
<arg choice="plain">
<option>compose</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">composeobject</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>

<command><link linkend="color">uncolor</link></command>
<group choice="req">
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="crypt-hook">crypt-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">keyid</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="echo">echo</link></command>
<arg choice="plain">
<replaceable class="parameter">message</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="exec">exec</link></command>
<arg choice="plain">
<replaceable class="parameter">function</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">function</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="fcc-hook">fcc-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="fcc-save-hook">fcc-save-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="folder-hook">folder-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">[!]regexp</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="addrgroup">group</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain" rep="repeat">
<option>-rx</option>
<replaceable class="parameter">expr</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-addr</option>
<replaceable class="parameter">expr</replaceable>
</arg>
</group>

<command><link linkend="addrgroup">ungroup</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-rx</option>
<replaceable class="parameter">expr</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-addr</option>
<replaceable class="parameter">expr</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="hdr-order">hdr_order</link></command>
<arg choice="plain">
<replaceable class="parameter">header</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">header</replaceable>
</arg>

<command><link linkend="hdr-order">unhdr_order</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>header</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="ignore">ignore</link></command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>

<command><link linkend="ignore">unignore</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="index-format-hook">index-format-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">format-string</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="lists">lists</link></command>
<arg>
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>

<command><link linkend="lists">unlists</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>regexp</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="macro">macro</link></command>
<arg choice="plain">
<replaceable class="parameter">menu</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">sequence</replaceable>
</arg>
<arg choice="opt">
<replaceable class="parameter">description</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mailboxes">mailboxes</link></command>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>

<command><link linkend="mailboxes">unmailboxes</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mailto-allow">mailto_allow</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">header-field</replaceable>
</arg>
</group>

<command><link linkend="mailto-allow">unmailto_allow</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">header-field</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mbox-hook">mbox-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">[!]regexp</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="message-hook">message-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mime-lookup">mime_lookup</link></command>
<arg choice="plain">
<replaceable>mimetype</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>

<command><link linkend="mime-lookup">unmime_lookup</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mono">mono</link></command>
<arg choice="plain">
<replaceable class="parameter">object</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>

<command><link linkend="mono">mono</link></command>
<group choice="req">
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>

<command><link linkend="mono">mono</link></command>
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>

<command><link linkend="mono">mono</link></command>
<arg choice="plain">
<option>compose</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">composeobject</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>

<command><link linkend="mono">unmono</link></command>
<group choice="req">
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="my-hdr">my_hdr</link></command>
<arg choice="plain">
<replaceable class="parameter">string</replaceable>
</arg>

<command><link linkend="my-hdr">unmy_hdr</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">field</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="push">push</link></command>
<arg choice="plain">
<replaceable class="parameter">string</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="save-hook">save-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="score-command">score</link></command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">value</replaceable>
</arg>

<command><link linkend="score-command">unscore</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="reply-hook">reply-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="send-hook">send-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="send2-hook">send2-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="set">set</link></command>
<group choice="req">
<arg choice="plain">
<group choice="opt">
<arg choice="plain"><option>no</option></arg>
<arg choice="plain"><option>inv</option></arg>
</group>
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">variable=value</replaceable>
</arg>
</group>
<arg choice="opt" rep="repeat"></arg>

<command><link linkend="set">toggle</link></command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>

<command><link linkend="set">unset</link></command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>

<command><link linkend="set">reset</link></command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
  <cmdsynopsis>
    <command><link linkend="setenv">setenv</link></command>
    <arg choice="plain">
      <replaceable class="parameter">[?]variable</replaceable>
    </arg>
    <arg choice="opt">
      <replaceable class="parameter">value</replaceable>
    </arg>

    <command><link linkend="setenv">unsetenv</link></command>
    <arg choice="plain">
      <replaceable class="parameter">variable</replaceable>
    </arg>
  </cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="sidebar-whitelist">sidebar_whitelist</link></command>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>

<command><link linkend="sidebar-whitelist">unsidebar_whitelist</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="source">source</link></command>
<arg choice="plain">
<replaceable class="parameter">filename</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="spam">spam</link></command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">format</replaceable>
</arg>

<command><link linkend="spam">nospam</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="display-munging">subjectrx</link></command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">replacement</replaceable>
</arg>

<command><link linkend="display-munging">unsubjectrx</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="subscribe">subscribe</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>

<command><link linkend="subscribe">unsubscribe</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="unhook">unhook</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">hook-type</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

</itemizedlist>

</sect1>

<sect1 id="variables">
<title>Configuration Variables</title>
