<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book>

<bookinfo>
<title>Mutt E-Mail クライアント</title>
<author>
<firstname>Michael</firstname><surname>Elkins</surname>
<email>me@cs.hmc.edu</email>
</author>
<releaseinfo>version @VERSION@</releaseinfo>

<abstract>
<para>
<quote>All mail clients suck.  This one just sucks less.</quote> &mdash;
me, circa 1995
</para>
</abstract>
</bookinfo>

<chapter id="intro">
<title>はじめに</title>

<para>
<emphasis role="bold">Mutt</emphasis> は小さいながらも非常にパワフルな
テキストベースの MIME メールクライアントです。Mutt は、その高い柔軟性に加えて、
キー割り当てや キーボードマクロ、メールのスレッド表示、正規表現検索、さらには
メッセージ選択用の強力なパターン言語といった高度な機能により、 まさしくメール
のパワーユーザにぴったりであると言えます。 
</para>

<sect1 id="homepage">
<title>Mutt ホームページ</title>

<para>
公式のホームページは以下の通りです。
<ulink url="http://www.mutt.org/">http://www.mutt.org/</ulink>.
</para>

</sect1>

<sect1 id="muttlists">
<title>メーリングリスト</title>

<para>
以下のメーリングリストを購読するには、メッセージ本文に
<emphasis>subscribe</emphasis> を書き、
<emphasis>リスト名</emphasis><literal>-request@mutt.org</literal>
に送信してください。
</para>

<itemizedlist>
<listitem>

<para>
<email>mutt-announce-request@mutt.org</email> &mdash; 流量の少ない、アナウンス
用のリスト
</para>
</listitem>
<listitem>

<para>
<email>mutt-users-request@mutt.org</email> &mdash; 質問、バグ報告、要望
</para>
</listitem>
<listitem>

<para>
<email>mutt-dev-request@mutt.org</email> &mdash; 開発メーリングリスト
</para>
</listitem>

</itemizedlist>

<para>
<emphasis>mutt-announce</emphasis> に投稿されたすべてのメッセージは
自動的に<emphasis>mutt-users</emphasis>に転送されるため、両方を購読
する必要はありません。
</para>

</sect1>

<sect1 id="distribution">
<title>Mutt の入手</title>

<para>
Mutt リリース版は <ulink
url="ftp://ftp.mutt.org/pub/mutt/">ftp://ftp.mutt.org/pub/mutt/</ulink>以下か
らダウンロードできます。
ミラーサイトのリストは <ulink
url="http://www.mutt.org/download.html">http://www.mutt.org/download.html</ulink>
を参照してください。
</para>

<para>
開発版は
<ulink url="https://gitlab.com/muttmua/mutt">Mutt development site</ulink> を
参照してください。
</para>

</sect1>

<sect1 id="irc">
<title>Mutt オンラインリソース</title>

<variablelist>

<varlistentry>
<term>バグ追跡システム</term>
<listitem>
<para>
公式の Mutt バグ追跡システムは
<ulink url="https://gitlab.com/muttmua/mutt/issues">https://gitlab.com/muttmua/mutt/issues</ulink>
です。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Wiki</term>
<listitem>
<para>
(非公式の) wiki は
at <ulink
url="https://gitlab.com/muttmua/mutt/wikis/home">https://gitlab.com/muttmua/mutt/wikis/home</ulink>
にあります。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>IRC</term>
<listitem>
<para>
IRC ユーザコミュニティは
<ulink url="http://www.freenode.net/">irc.freenode.net</ulink> のチャンネル
<emphasis>#mutt</emphasis> にあります。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>USENET</term>
<listitem>
<para>
USENET はニュースグループ <ulink
url="news:comp.mail.mutt">comp.mail.mutt</ulink>を参照してください。
</para>
</listitem>
</varlistentry>

</variablelist>

</sect1>

<sect1 id="contrib">
<title>Mutt への貢献</title>

<para>
Mutt プロジェクトに対する貢献方法はいくつもあります。
</para>

<para>
特に新しくユーザになられた人には、他の、新規および熟練ユーザにあって Mutt につ
いてチャットしたり、問題について話したり、解決方法を共有することは有用です。
</para>

<para>
Mutt の他の言語への翻訳は高く評価されているため、Mutt 開発者は、
翻訳の改善と維持を手助けしてくれる熟練の翻訳者を探しています。
</para>

<para>
新しい機能とバグ修正のためのパッチの寄贈についての詳細は、以下の開発ページを参照してください
<ulink url="https://gitlab.com/muttmua/mutt">https://gitlab.com/muttmua/mutt</ulink>。
</para>

</sect1>

<sect1 id="typo">
<title>表記について</title>

<para>
この節では、このマニュアル全体における表記方法について記しています。
特別の単語についての表記方法については、テーブル  
<xref linkend="tab-typo"/> を参照してください。
</para>

<table id="tab-typo">
<title>特別の単語についての表記方法</title>
<tgroup cols="2">
<thead>
<row><entry>項目</entry><entry>Refers to...</entry></row>
</thead>
<tbody>
<row><entry><literal>printf(3)</literal></entry><entry>UNIX マニュアルページ。
<literal>man 3 printf</literal> を実行。</entry></row>
<row><entry><literal>&lt;PageUp&gt;</literal></entry><entry>名前付きのキー</entry></row>
<row><entry><literal>&lt;create-alias&gt;</literal></entry><entry>名前付きの
Mutt のファンクション</entry></row>
<row><entry><literal>^G</literal></entry><entry>Control+G キー</entry></row>
<row><entry>$mail_check</entry><entry>Mutt 設定オプション</entry></row>
<row><entry><literal>$HOME</literal></entry><entry>環境変数</entry></row>
</tbody>
</tgroup>
</table>

<para>
例は以下の通りです:
</para>

<screen>
mutt -v
</screen>

<para>
コマンド概要の説明中で中括弧 (<quote>{}</quote>) は、オプションの組を表し、
of options of which one is mandatory, square brackets
(<quote>[]</quote>) で囲まれたものは必須のものです。また、3つのドットは引数が
任意の回数繰り返される可能性があることを意味します。
</para>

</sect1>

<sect1 id="copyright">
<title>著作権</title>

<para>
Mutt is Copyright &copy; 1996-2020 Michael R. Elkins
<email>me@mutt.org</email> and others.
</para>

<para>
このプログラムはフリーソフトウェアです。Free Software Foundation による GNU
General Public License のバージョン 2 もしくはそれ以降のバージョン (任意選択)
のいずれかに従う限り、自由に変更および再配布できます。
</para>

<para>
このプログラムは役に立つことを願って配布されていますが、「まったく無保証」です。
商品能力や特定の目的への適性について、暗黙の保証さえありません。詳細は GNU
General Public License を参照してください。
</para>

<para>
GNU General Public License の文面は、このプログラムに付いてきたはずです。そう
でなければ、Free Software Foudation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111, USA に手紙をください。
</para>

</sect1>

</chapter>

<chapter id="gettingstarted">
<title>最初のステップ</title>

<para>
この章の目的は Mutt の使い方を概観することです。 ほかにもマニュアルの別の場所
で説明されている機能はたくさんあります。 さらには Mutt FAQ や種々の Web ページ
で手に入る情報もあります。詳しくは
<ulink url="http://www.mutt.org/">Mutt ホームページ</ulink>を参照してください。
</para>

<para>
この章では、配布されているままの既定のキー割り当てで説明します。 自分のサイト
ではシステム管理者が既定値を変えてしまっている かもしれません。どのメニューでも
<quote>?</quote> を押して 現在のキー割り当てを表示できます。 
</para>

<para>
まず必要なのは Mutt を起動することです。これは、コマンドラインから
<literal>mutt</literal> と入力するだけです。起動時の種々のオプションについては
mutt のマニュアルページか、<link linkend="commandline">リファレンス</link> を
参照してください。
</para>

<sect1 id="core-concepts">
<title>基本的な考え方</title>

<para>
Mutt は、ほとんどの場合、行/エントリまたはページベースの、異なったメ
ニューを対話的に使って操作する、テキストベースのアプリケーションです。
行ベースのメニューは<quote>index</quote>メニュー(現在オープンしているフォルダ
のすべてのメッセージを表示)または<quote>alias</quote>メニュー(リストから受信者
を選択できる)のようなものです。ページベースのメニュー例は、
<quote>pager</quote>(一度に1つのメッセージを表示)または有効なキーバインディン
グを一覧表示する<quote>help</quote>メニューです。
</para>

<para>
ユーザインタフェースには、最上部に状況によって変化するヘルプ行、メニューの内容、
状況によって変化するステータス行、コマンド行という構成になっています。コマンド
行は、プロンプトのように情報やエラーメッセージを表示したり、対話的なコマンドを
入力するのに使われます。
</para>

<para>
Mutt は利用者が恒久的に既定値以外の値を使いたい場合に、設定ファイルに記述した
変数を使って構成されます。Mutt は読みやすく、コメントも書ける、やや複
雑な設定ファイルに、リッチな設定構文で記述できることをサポートしています。
</para>

<para>
Mutt はほとんどのキーバインディングを変更することができるので、いわゆる
<quote>ファンクション</quote>を(コマンド行を使って)手動で実行したり、マクロで実行させた
りできます。マクロは、一連の動作を繰り返す代わりに、1つのキーや短いキーシーケ
ンスにバインドすることもできます。
</para>

<para>
(他のフォルダにメッセージをセーブまたはコピーするような)多くのコマンドは、
単一のメッセージまたは(いわゆる<quote>タグ付けられた</quote>)ひとまとまりのメッ
セージに適用できます。メッセージ選択を手助けするため、Mutt は、否定と同様、論
理的な<emphasis>and</emphasis>と<emphasis>or</emphasis>操作を組み合わせること
ができる、たくさんのメッセージパターン(たとえば受信者、送信者、本体の内容、
送受信日付など)を提供しています。パターンは、一致したメッセージのみをインデッ
クスに表示させるため、(たとえば)メッセージの検索にも使う事ができます。
</para>

<para>
Mutt は、フォルダに入ったり、新規メッセージを作ったり、既存のメッセージに返信
するような特定の状況において、設定コマンドとファンクションをユーザが実行できる、
<quote>hook</quote>というコンセプトをサポートしています。hook は、複数のアイデ
ンティティの管理、フォルダ表示のカスタマイズフォルダ単位での自動アーカイブの実
装などやその他を含む、高度にカスタマイズされた Mutt の動作を行うのに使われます。
</para>

<para>
インタラクティブモードのほかに、Mutt はメッセージ送信を行うコマンド行ツールと
しても使えます。この場合、<literal>mailx(1)</literal> 互換のインタフェースをサ
ポートしています。コマンド行オプション一覧の詳細は<xref linkend="tab-commandline-options"/>
を参照してください。
</para>

</sect1>

<sect1 id="concept-screens-and-menus">
<title>画面とメニュー</title>

<sect2 id="intro-index">
<title>インデックス</title>

<para>
インデックスは、Mutt を起動した時に通常最初に見る画面のことです。ここには、現
在オープンしているメールボックス中にあるメールの概要が表示されます。既定値では、
これはシステムのメールボックスです。インデックス中に表示されている情報は、左側
に番号がついているメールの一覧、フラグ(新規メール、重要メール、転送または返信
されたメール、タグづけられたメールなど)、メール送信日付、送信者、メールサイズ
と題名です。さらに、メールに返信した場合や他の人がリプライした場合、インデック
スにはスレッド階層を表示することもできます。この場合、他者のメールを"サブツリー
"配下で見ることができます。この機能は、複数の人によるグループにおいての個人的なメー
ルや、メーリングリストを購読している場合には特に便利です。
</para>

</sect2>

<sect2 id="intro-pager">
<title>ページャ</title>

<para>
ページャはメールの内容を表示するのに使います。ページャの最上部には、たとえば送
信者、受信者、題名とその他の情報がある、最も重要なメールのヘッダがあります。ど
のような情報を実際に見ることができるかは、以下で詳細に記述がある、設定に依存し
ます。
</para>

<para>
ヘッダの下には、通常、メッセージを含むメールの本体が表示されます。メールに添付が
ある場合、その情報をメール本体のあとで見ることができます。添付がテキストの場合、
ページャ中で直接見ることができます。
</para>

<para>
概要を見やすく表示するため、ページャ中で異なったものを異なった色で表示するよう
にMutt を設定できます。URL、メールアドレス、スマイリーなど、正規表現で記述でき
るものは事実上すべてに色をつけることができます。
</para>

</sect2>

<sect2 id="intro-browser">
<title>ファイルブラウザ</title>

<para>
ファイルブラウザは、ローカルまたはリモートにあるファイルシステムへのインタフェース
です。オープンするためにメールボックスを選択する時、ブラウザは、項目整列順の変
更、正規表現による項目表示の制限、表示したいように表示形式を自由に変更できます。
また、メッセージに添付するため、(複数の)ファイルを選択する時や、複数のファイル
添付する時などにファイルシステム内を介した簡単な操作ができます。
</para>

<para>
いくつかのメールシステムは、他のメールフォルダ内にメールフォルダをネストできま
す。通常の、mutt 内にあるオープンエントリコマンドはメールフォルダをオープンす
るので、サブフォルダを見ることはできません。そのかわり、
<literal>&lt;descend-directory&gt;</literal>ファンクションを使うと、ディレクト
リ内に入ることが出来ますが、メールディレクトリとしてはオープンしません。
</para>

</sect2>

<sect2 id="intro-sidebar">
  <title>サイドバー</title>
  <para>
    サイドバーは、メールボックスの一覧を表示します。一覧表示はON/OFFでき、テー
    マを設定したり、一覧形式を設定したりできます。
  </para>
</sect2>

<sect2 id="intro-help">
<title>ヘルプ</title>

<para>
ヘルプ画面は利用者に簡単なヘルプを提供します。これには、現在のキーバインディン
グの設定状況と割り当てられているコマンド、簡単な説明、および、キーに割り当て慣
れなければならない現在未割り当てのファンクション付きでを一覧で表示します(代わ
りに Mutt のコマンドプロンプト経由で呼び出すこともができます)。
</para>

</sect2>

<sect2 id="intro-compose">
<title>編集メニュー</title>

<para>
編集メニューは、メッセージを実際にメールで送信する前に、重要な項目情報を含む分
割画面を提供します。これは、だれがどのようなメッセージを受け取るか(受信者がど
のようなコピーを受け取るか)が含まれています。さらに、メッセージに対してどのよ
うなキーを使って署名をするかどうか、暗号化するか、署名して暗号化するかというよ
うなセキュリティオプションを設定することもできます。そのほか、メッセージを添付
したり、メッセージそれ自身を含む任意の添付を再編集することにも使います。
</para>

</sect2>

<sect2 id="intro-alias">
<title>別名メニュー</title>

<para>
別名メニューは、メッセージの受信者を見つける手伝いをします。検索もできますので、
たくさんの人に連絡を取りたい場合、アドレスや名前を完全に覚えておく必要はありま
せん。別名メカニズムと別名メニューは、より短いニックネームや実際の別名を使う事で、いくつか
のアドレスをグルーピングする機能も提供します。そのため、個々の受信者を手動で選
択する必要はありません。
</para>

</sect2>

<sect2 id="intro-attach">
<title>添付メニュー</title>

<para>
あとで詳細は説明しますが、Mutt は 優れて安定した MIME の実装を備えているので、
任意の MIME タイプをつかうメッセージの送受信ができます。添付メニューはメッセー
ジの詳細構造を表示します:そこには、どのコンテンツパーツがどの親のパーツに添付
されているか(完全な木構造を表示)、どのタイプがどの種類で、どのくらいの大きさな
のかが表示されます。単一のパーツは保存、削除、変更でき、メッセージの内部に簡単
にアクセス出来ます。
</para>

</sect2>

</sect1>

<sect1 id="menus">
<title>メニュー内での移動</title>

<para>
もっとも重要な操作キーは、行又はエントリベースのメニューで共通で、
<xref linkend="tab-keys-nav-line"/>に記載してあり、ページベースのメニューについては
<xref linkend="tab-keys-nav-page"/> に記載してあります。
</para>

<table id="tab-keys-nav-line">
<title>エントリベースのメニューにおけるもっとも共通の操作キー</title>
<tgroup cols="3">
<thead>
<row><entry>キー</entry><entry>機能</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>j 又は&lt;Down&gt;</entry><entry><literal>&lt;next-entry&gt;</literal></entry><entry>次のエントリに移動</entry></row>
<row><entry>k 又は&lt;Up&gt;</entry><entry><literal>&lt;previous-entry&gt;</literal></entry><entry>前のエントリに移動</entry></row>
<row><entry>z 又は&lt;PageDn&gt;</entry><entry><literal>&lt;page-down&gt;</literal></entry><entry>次のページに移動</entry></row>
<row><entry>Z 又は&lt;PageUp&gt;</entry><entry><literal>&lt;page-up&gt;</literal></entry><entry>前のページに移動</entry></row>
<row><entry>= 又は&lt;Home&gt;</entry><entry><literal>&lt;first-entry&gt;</literal></entry><entry>最初のエントリに移動</entry></row>
<row><entry>* 又は&lt;End&gt;</entry><entry><literal>&lt;last-entry&gt;</literal></entry><entry>最後のエントリに移動</entry></row>
<row><entry>q</entry><entry><literal>&lt;quit&gt;</literal></entry><entry>現在のメニューを終了</entry></row>
<row><entry>?</entry><entry><literal>&lt;help&gt;</literal></entry><entry>現在のメニューにおけるキーバインド一覧を表示</entry></row>
</tbody>
</tgroup>
</table>

<table id="tab-keys-nav-page">
<title>ページベースのメニューにおけるもっとも共通の操作キー</title>
<tgroup cols="3">
<thead>
<row><entry>キー</entry><entry>機能</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>J 又は&lt;Return&gt;</entry><entry><literal>&lt;next-line&gt;</literal></entry><entry>1行スクロールダウン</entry></row>
<row><entry>&lt;Backspace&gt;</entry><entry><literal>&lt;previous-line&gt;</literal></entry><entry>1行スクロールアップ</entry></row>
<row><entry>K, &lt;Space&gt; 又は&lt;PageDn&gt;</entry><entry><literal>&lt;next-page&gt;</literal></entry><entry>次のページに移動</entry></row>
<row><entry>- 又は&lt;PageUp&gt;</entry><entry><literal>&lt;previous-page&gt;</literal></entry><entry>前のページに移動</entry></row>
<row><entry>&lt;Home&gt;</entry><entry><literal>&lt;top&gt;</literal></entry><entry>先頭に移動</entry></row>
<row><entry>&lt;End&gt;</entry><entry><literal>&lt;bottom&gt;</literal></entry><entry>末尾に移動</entry></row>
</tbody>
</tgroup>
</table>

</sect1>

<sect1 id="editing">
<title>入力フィールドの編集</title>

<sect2 id="editing-intro">
<title>イントロダクション</title>

<para>
Mutt はテキスト入力、たとえばメールアドレスやファイル名入力用に、ビルトイン行エディタを用意しています。
テキスト入力を操作するのに使われるキーは、Emacs のものと大変よく似ています。
有効な機能の完全一覧は<xref linkend="tab-keys-editor"/>を参照してください。そこには
規定のバインディングと簡単な説明が記載されています。
</para>

<table id="tab-keys-editor">
<title>もっとも共通の行エディタキー</title>
<tgroup cols="3">
<thead>
<row><entry>キー</entry><entry>機能</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>^A 又は &lt;Home&gt;</entry><entry><literal>&lt;bol&gt;</literal></entry><entry>行の先頭に移動</entry></row>
<row><entry>^B 又は &lt;Left&gt;</entry><entry><literal>&lt;backward-char&gt;</literal></entry><entry>1文字前に移動</entry></row>
<row><entry>Esc B</entry><entry><literal>&lt;backward-word&gt;</literal></entry><entry>1語前に移動</entry></row>
<row><entry>^D 又は &lt;Delete&gt;</entry><entry><literal>&lt;delete-char&gt;</literal></entry><entry>カーソル下の文字を削除</entry></row>
<row><entry>^E 又は &lt;End&gt;</entry><entry><literal>&lt;eol&gt;</literal></entry><entry>行末に移動</entry></row>
<row><entry>^F 又は &lt;Right&gt;</entry><entry><literal>&lt;forward-char&gt;</literal></entry><entry>1文字後ろに移動</entry></row>
<row><entry>Esc F</entry><entry><literal>&lt;forward-word&gt;</literal></entry><entry>1単語後ろに移動</entry></row>
<row><entry>&lt;Tab&gt;</entry><entry><literal>&lt;complete&gt;</literal></entry><entry>ファイル名、別名又はラベルを補完</entry></row>
<row><entry>^T</entry><entry><literal>&lt;complete-query&gt;</literal></entry><entry>問い合わせでアドレスを補完</entry></row>
<row><entry>^K</entry><entry><literal>&lt;kill-eol&gt;</literal></entry><entry>行末まで削除</entry></row>
<row><entry>Esc d</entry><entry><literal>&lt;kill-eow&gt;</literal></entry><entry>単語の終わりまで削除</entry></row>
<row><entry>^W</entry><entry><literal>&lt;kill-word&gt;</literal></entry><entry>カーソルの前の1語を消す</entry></row>
<row><entry>^U</entry><entry><literal>&lt;kill-line&gt;</literal></entry><entry>1行全体を削除</entry></row>
<row><entry>^V</entry><entry><literal>&lt;quote-char&gt;</literal></entry><entry>次に入力するキーに引用符をつける</entry></row>
<row><entry>&lt;Up&gt;</entry><entry><literal>&lt;history-up&gt;</literal></entry><entry>履歴から前の入力文字列を呼び出す</entry></row>
<row><entry>&lt;Down&gt;</entry><entry><literal>&lt;history-down&gt;</literal></entry><entry>履歴から次の入力文字列を呼び出す</entry></row>
<row><entry>^R</entry><entry><literal>&lt;history-search&gt;</literal></entry><entry>現在の入力を検索履歴に使う</entry></row>
<row><entry>&lt;BackSpace&gt;</entry><entry><literal>&lt;backspace&gt;</literal></entry><entry>カーソルの前の1文字を削除</entry></row>
<row><entry>Esc u</entry><entry><literal>&lt;upcase-word&gt;</literal></entry><entry>単語を大文字に変換</entry></row>
<row><entry>Esc l</entry><entry><literal>&lt;downcase-word&gt;</literal></entry><entry>単語を小文字に変換</entry></row>
<row><entry>Esc c</entry><entry><literal>&lt;capitalize-word&gt;</literal></entry><entry>単語の最初の文字を大文字に変換</entry></row>
<row><entry>^G</entry><entry>n/a</entry><entry>中止</entry></row>
<row><entry>&lt;Return&gt;</entry><entry>n/a</entry><entry>編集終了</entry></row>
</tbody>
</tgroup>
</table>

<para>
You can remap the <emphasis>editor</emphasis> 機能をリマップするためには
<link linkend="bind"><command>bind</command></link> コマンドを使います。たとえば、
&lt;Delete&gt; キーを押した時に、カーソル直下の文字ではなく、カーソルの前にある文字を削除するためには、
以下のように行います:
</para>

<screen>
bind editor &lt;delete&gt; backspace
</screen>

</sect2>

<sect2 id="editing-history">
<title>履歴</title>

<para>
Mutt はビルトインエディタ用に履歴を管理しています。項目の数は <link linkend="history">$history</link>
変数によって制御され、<link linkend="history-file">$history_file</link>と
<link linkend="save-history">$save_history</link>を使う事によって
指定された外部ファイルを使う事で恒久的にすることができます。
<literal>&lt;history-up&gt;</literal>または<literal>&lt;history-down&gt;</literal>
コマンドを使うことによって、エディタ中でそれらを循環させることができます。
Mutt は現在入力したテキストを循環ヒストリに記憶し、最初のエントリ行まで折り返します。
</para>

<para>
  Mutt はいくつかの異なる履歴リストを管理していて、それらは以下のカテゴリのようになっています:
</para>

<itemizedlist>
<listitem><para><literal>.muttrc</literal> コマンド</para></listitem>
<listitem><para>アドレスと別名</para></listitem>
<listitem><para>シェルコマンド</para></listitem>
<listitem><para>ファイル名</para></listitem>
<listitem><para>パターン</para></listitem>
<listitem><para>上記以外</para></listitem>
</itemizedlist>

<para>
Mutt は自動的に履歴から繰り返された項目を自動的にフィルタリングします。
<link linkend="history-remove-dups">$history_remove_dups</link> が設定されている場合、
すべての繰り返された項目はヒストリから削除されます。また、空白で始まる項目を無視する
ことで、いくつかのシェルの動作を模倣しています。後者の機能は、マクロで、履歴の貴重な
項目を不要なエントリで無駄にしないようにするために便利です。
</para>

</sect2>

</sect1>

<sect1 id="reading">
<title>メールを読む</title>

<para>
他の多くのメールクライアントと同様、Mutt ではメールを読むモードが二つあります。
第一のモードはメールボックス内のメッセージ一覧表示機能で、これは、Mutt では
<quote>インデックス</quote>メニューと呼びます。 第二のモードはメッセージの内容表示です。
これは<quote>ページャ</quote>と呼ばれています。
</para>

<para>
続く数節で、これらのモードそれぞれに提供されている機能を説明します。
</para>

<sect2 id="index-menu">
<title>メッセージインデックス</title>

<para>
インデックス内で、移動操作とメッセージの操作に使われる共通のキーは<xref linkend="tab-key-index"/>
にあります。インデックスメニュー中で、どのようにメッセージが表示されるかについては、
<link linkend="index-format">$index_format</link>変数を使う事でカスタマイズできます。
</para>

<table id="tab-key-index">
<title>もっとも共通的なメッセージインデックスキー</title>
<tgroup cols="2">
<thead>
<row><entry>キー</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>c</entry><entry>メールボックスを変更</entry></row>
<row><entry>Esc c</entry><entry>フォルダを読み出し専用モードに変更</entry></row>
<row><entry>C</entry><entry>現在のメッセージを他のメールボックスにコピー</entry></row>
<row><entry>Esc C</entry><entry>メッセージを復号化してフォルダにコピー</entry></row>
<row><entry>Esc s</entry><entry>メッセージを復号化してフォルダに保存</entry></row>
<row><entry>D</entry><entry>パターンに一致するメッセージを削除</entry></row>
<row><entry>d</entry><entry>現在のメッセージを削除</entry></row>
<row><entry>F</entry><entry>重要としてマーク</entry></row>
<row><entry>l</entry><entry>パターンに一致したメッセージを表示</entry></row>
<row><entry>N</entry><entry>メッセージを新規としてマーク</entry></row>
<row><entry>o</entry><entry>現在の整列方法を変更</entry></row>
<row><entry>O</entry><entry>メールボックスを逆順に整列</entry></row>
<row><entry>q</entry><entry>変更を保存して終了</entry></row>
<row><entry>s</entry><entry>メッセージを保存</entry></row>
<row><entry>T</entry><entry>パターンに一致するメッセージにタグ付け</entry></row>
<row><entry>t</entry><entry>メッセージのタグを反転</entry></row>
<row><entry>Esc t</entry><entry>全部のメッセージスレッド中のタグを反転</entry></row>
<row><entry>U</entry><entry>パターンに一致したメッセージをの削除状態を解除</entry></row>
<row><entry>u</entry><entry>メッセージの削除状態を解除</entry></row>
<row><entry>v</entry><entry>添付を表示</entry></row>
<row><entry>x</entry><entry>変更を中断して終了</entry></row>
<row><entry>&lt;Return&gt;</entry><entry>メッセージを表示</entry></row>
<row><entry>&lt;Tab&gt;</entry><entry>次の新規又は未読のメッセージに移動</entry></row>
<row><entry>@</entry><entry>差出人の完全なメールアドレスを表示</entry></row>
<row><entry>$</entry><entry>メールボックスに変更を保存</entry></row>
<row><entry>/</entry><entry>検索</entry></row>
<row><entry>Esc /</entry><entry>逆向き検索</entry></row>
<row><entry>^L</entry><entry>画面を消去して再描画</entry></row>
<row><entry>^T</entry><entry>パターンに一致したメッセージのタグを削除</entry></row>
</tbody>
</tgroup>
</table>

<para>
さらに、メッセージの送信者と題名に加えて、メッセージ番号の横には各メッセージに対する
処理の短い要約が表示されます。<xref linkend="tab-msg-status-flags"/> に説明がある、
0個以上の<quote>フラグ</quote>が表示され、そのうちのいくつかは、既定で
<quote>w</quote> と <quote>W</quote> にバインドされている、
<literal>&lt;set-flag&gt;</literal>と<literal>&lt;clear-flag&gt;</literal>
で、ON/OFFできます。
</para>

<para>
さらに、<xref linkend="tab-msg-recip-flags"/>中のフラグは、メッセージの宛先を反映しています。
</para>

<table id="tab-msg-status-flags">
<title>メッセージステータスフラグ</title>
<tgroup cols="2">
<thead>
<row><entry>フラグ</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>D</entry><entry>メッセージは削除された(削除マークがついている)</entry></row>
<row><entry>d</entry><entry>メッセージには削除予定の添付がある</entry></row>
<row><entry>K</entry><entry>PGP公開鍵を含んでいる</entry></row>
<row><entry>N</entry><entry>新規メッセージ</entry></row>
<row><entry>O</entry><entry>古いメッセージ</entry></row>
<row><entry>P</entry><entry>メッセージはPGPで暗号化されている</entry></row>
<row><entry>r</entry><entry>メッセージは返信済み</entry></row>
<row><entry>S</entry><entry>メッセージは署名されていて、署名は正しく検証された</entry></row>
<row><entry>s</entry><entry>メッセージは署名されている</entry></row>
<row><entry>!</entry><entry>メッセージにはフラグがついている</entry></row>
<row><entry>*</entry><entry>メッセージはタグづけられている</entry></row>
<row><entry>n</entry><entry>スレッドには新しいメッセージがある(折りたたまれている場合)</entry></row>
<row><entry>o</entry><entry>スレッドには古いメッセージがある(折りたたまれている場合)</entry></row>
</tbody>
</tgroup>
</table>

<table id="tab-msg-recip-flags">
<title>メッセージ受信フラグ</title>
<tgroup cols="2">
<thead>
<row><entry>フラグ</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>+</entry><entry>メッセージは自分宛だけに送られている</entry></row>
<row><entry>T</entry><entry>メッセージは自分宛だが、他の人にも Cc かその他で送られている</entry></row>
<row><entry>C</entry><entry>メッセージは Cc で自分に送られている</entry></row>
<row><entry>F</entry><entry>メッセージは自分からのものである</entry></row>
<row><entry>L</entry><entry>メッセージは購読されたメーリングリストに送られている</entry></row>
</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="pager-menu">
<title>ページャ</title>

<para>
既定値では、Mutt はメッセージの内容を表示するのに、内蔵のページャを使います(たとえば
<literal>less(1)</literal>のような外部のページャも設定することができます。詳しくは、
<link linkend="pager">$pager</link> 変数を参照してください。)ページャは あまり機能的では
ありませんが、Unix のプログラム<literal>less(1)</literal>と大変よく似ています。
</para>

<table id="tab-key-pager">
<title>もっとも共通的なページャのキー</title>
<tgroup cols="2">
<thead>
<row><entry>キー</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>&lt;Return&gt;</entry><entry>1行下に移動</entry></row>
<row><entry>&lt;Space&gt;</entry><entry>次のページを表示(又はメッセージの終端だった場合には次のメッセージ)</entry></row>
<row><entry>-</entry><entry>前のページに移動</entry></row>
<row><entry>n</entry><entry>次に一致する部分を検索</entry></row>
<row><entry>S</entry><entry>引用文を飛ばす</entry></row>
<row><entry>T</entry><entry>引用分の表示をON/OFF</entry></row>
<row><entry>?</entry><entry>キーバインディングを表示</entry></row>
<row><entry>/</entry><entry>正規表現による検索</entry></row>
<row><entry>Esc /</entry><entry>正規表現による逆方向の検索</entry></row>
<row><entry>\</entry><entry>検索結果のハイライトをON/OFF</entry></row>
<row><entry>^</entry><entry>メッセージの先頭に移動</entry></row>
</tbody>
</tgroup>
</table>

<para>
<xref linkend="tab-key-pager"/>中にあるキーバインディングに加え、インデックスメニュー
での多くの機能、たとえば<literal>&lt;delete-message&gt;</literal> や
<literal>&lt;copy-message&gt;</literal>(これはメッセージを外部ビューワで
表示するよりも優位な点の1つ)がページャでも有効です。
</para>

<para>
また、内部ページャはさらにいくつかの高度な機能をサポートしています。そのうちの1つは
太字と下線に対する<quote>標準</quote>シーケンスを処理できるということです。
シーケンスは連続で、文字、バックスペース(<quote>^H</quote>)、同じ文字なら太字、
文字、バックスペース、<quote>_</quote>ならば下線付き文字です。Mutt はターミナルがサポート
している場合、それぞれ太字と下線付き文字で表示しようとします。サポートされていない場合は
太字と下線は<link linkend="color">color</link> のオブジェクトを使って、<command>色</command>
か、白黒属性を指定できます。
</para>

<para>
さらに、内部ページャは ANSI エスケープシーケンスの文字属性をサポートしています。Mutt はそれを
正しい色と文字設定に解釈します。Mutt がサポートしているシーケンスは以下の通りです:
</para>

<screen>
\e[<emphasis>Ps</emphasis>;<emphasis>Ps</emphasis>;..<emphasis>Ps</emphasis>;m
</screen>

<para>
ここで<emphasis>Ps</emphasis>は以下の<xref linkend="tab-ansi-esc"/>に示されているコードのどれかです。
</para>

<table id="tab-ansi-esc">
<title>ANSI エスケープシーケンス</title>
<tgroup cols="2">
<thead>
<row><entry>エスケープコード</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>0</entry><entry>全属性削除</entry></row>
<row><entry>1</entry><entry>太字をON</entry></row>
<row><entry>4</entry><entry>下線をON</entry></row>
<row><entry>5</entry><entry>点滅をON</entry></row>
<row><entry>7</entry><entry>反転表示をON</entry></row>
<row><entry>3<emphasis>&lt;color&gt;</emphasis></entry><entry>前景色を<emphasis>&lt;color&gt;</emphasis> (<xref linkend="tab-color"/>を参照)</entry></row>
<row><entry>4<emphasis>&lt;color&gt;</emphasis></entry><entry>背景色を<emphasis>&lt;color&gt;</emphasis> (<xref linkend="tab-color"/>を参照)</entry></row>
</tbody>
</tgroup>
</table>

<table id="tab-color">
<title>カラーシーケンス</title>
<tgroup cols="2">
<thead>
<row><entry>カラーコード</entry><entry>色</entry></row>
</thead>
<tbody>
<row><entry>0</entry><entry>黒</entry></row>
<row><entry>1</entry><entry>赤</entry></row>
<row><entry>2</entry><entry>緑</entry></row>
<row><entry>3</entry><entry>黄色</entry></row>
<row><entry>4</entry><entry>青</entry></row>
<row><entry>5</entry><entry>マゼンタ</entry></row>
<row><entry>6</entry><entry>シアン</entry></row>
<row><entry>7</entry><entry>白</entry></row>
</tbody>
</tgroup>
</table>

<para>
Mutt はこれらの属性を<literal>text/enriched</literal>メッセージのハンドリングに使い、
外部の<link linkend="auto-view">autoview</link> スクリプトに、ハイライティングを
行う目的でも使う事もあります。
</para>

<note>
<para>
使用するディスプレイに合わせて色を変更した場合、たとえば、xterm で color2 に割り当てられている
色を変更した場合、緑色の代わりにその色が使われます。
</para>
</note>

<note>
<para>
ページャ中の検索コマンドは正規表現が使えますが、インデックス中で使われる検索コマンドで使われる
<link linkend="patterns">パターン</link>よりも少し複雑で、全く同じではないことに注意してください。
これは、ページャが選択されたメッセージをすでに表示されているのに対し、パターンは基準によって
メッセージを選択するために使われるからです。
</para>
</note>

</sect2>

<sect2 id="threads">
<title>スレッドモード</title>

<para>
いわゆる<quote>スレッド</quote>は、返信がその元メッセージにリンクされたメッセージの階層構造を
提供します。この組織化された形式は、議論の異なった部分が分岐しているメーリングリストでは特に
有用です。Mutt は木構造でスレッドを表示します。
</para>

<para>
Mutt では、メールボックスが<emphasis>スレッド</emphasis>によって<link linkend="sort">整列</link>
されている場合、<emphasis>インデックス</emphasis>と<emphasis>ページャ</emphasis>モードにおいて、
<xref linkend="tab-key-threads"/>に示すような形で、いくつか追加の機能が利用できます。
</para>

<table id="tab-key-threads">
<title>もっとも一般的なスレッドモードのキー</title>
<tgroup cols="3">
<thead>
<row><entry>Key</entry><entry>Function</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>^D</entry><entry><literal>&lt;delete-thread&gt;</literal></entry><entry>現在のスレッド中ですべてのメッセージを削除</entry></row>
<row><entry>^U</entry><entry><literal>&lt;undelete-thread&gt;</literal></entry><entry>現在のスレッド中ですべてのメッセージの削除を取り消し</entry></row>
<row><entry>^N</entry><entry><literal>&lt;next-thread&gt;</literal></entry><entry>次のスレッドの始点に飛ぶ</entry></row>
<row><entry>^P</entry><entry><literal>&lt;previous-thread&gt;</literal></entry><entry>前のスレッドの始点に飛ぶ</entry></row>
<row><entry>^R</entry><entry><literal>&lt;read-thread&gt;</literal></entry><entry>現在のスレッドを既読にする</entry></row>
<row><entry>Esc d</entry><entry><literal>&lt;delete-subthread&gt;</literal></entry><entry>現在のサブスレッド中のすべてのメッセージを削除する</entry></row>
<row><entry>Esc u</entry><entry><literal>&lt;undelete-subthread&gt;</literal></entry><entry>現在のサブスレッド中のすべてのメッセージの削除を取り消し</entry></row>
<row><entry>Esc n</entry><entry><literal>&lt;next-subthread&gt;</literal></entry><entry>次のサブスレッドの始点に移動</entry></row>
<row><entry>Esc p</entry><entry><literal>&lt;previous-subthread&gt;</literal></entry><entry>前のサブスレッドの始点に移動</entry></row>
<row><entry>Esc r</entry><entry><literal>&lt;read-subthread&gt;</literal></entry><entry>現在のサブスレッドを既読にする</entry></row>
<row><entry>Esc t</entry><entry><literal>&lt;tag-thread&gt;</literal></entry><entry>現在のスレッド上のタグをON/OFF</entry></row>
<row><entry>Esc v</entry><entry><literal>&lt;collapse-thread&gt;</literal></entry><entry>現在のスレッドの折りたたみをON/OFF</entry></row>
<row><entry>Esc V</entry><entry><literal>&lt;collapse-all&gt;</literal></entry><entry>すべてのスレッドの折りたたみをON/OFF</entry></row>
<row><entry>P</entry><entry><literal>&lt;parent-message&gt;</literal></entry><entry>スレッド中の親メッセージに移動</entry></row>
</tbody>
</tgroup>
</table>

<para>
<emphasis>インデックス</emphasis>中では、スレッドの子メッセージの題名には先頭にスレッドの
木構造を表す文字が付きます。既定値では、 <link linkend="hide-thread-subject">$hide_thread_subject</link>
が設定されていない限り、題名自身は複製されません。スレッドに付加される特別な文字の詳細は、
<xref linkend="tab-thread-chars"/>にあります。
</para>

<table id="tab-thread-chars">
  <title>特別なスレッド中の文字</title>
  <tgroup cols="3">
    <thead>
      <row>
        <entry>文字</entry>
        <entry>説明</entry>
        <entry>備考</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>&amp;</entry>
        <entry>メッセージを隠す</entry>
        <entry><link linkend="hide-limited">$hide_limited</link> と
        <link linkend="hide-top-limited">$hide_top_limited</link>を参照</entry>
      </row>
      <row>
        <entry>?</entry>
        <entry>missing message</entry>
        <entry><link linkend="hide-missing">$hide_missing</link> と
        <link linkend="hide-top-missing">$hide_top_missing</link>を参照</entry>
      </row>
      <row>
        <entry>*</entry>
        <entry>pseudo thread</entry>
        <entry><link linkend="strict-threads">$strict_threads</link>を参照;
        <link linkend="narrow-tree">$narrow_tree</link>が設定されている場合表示されない</entry>
      </row>
      <row>
        <entry>=</entry>
        <entry>スレッドの複製</entry>
        <entry><link linkend="duplicate-threads">$duplicate_threads</link>を参照;
        <link linkend="narrow-tree">$narrow_tree</link>が設定されている場合表示されない</entry>
      </row>
    </tbody>
  </tgroup>
</table>

<para>
折りたたまれているスレッドではスレッド中の最初のメッセージのみ表示し、その他は隠します。
これは、スレッドにたくさんのメッセージがあり、画面にはわずかなスレッドしか表示されない
場合に便利です。<link linkend="index-format">$index_format</link>の %M を参照してくださ
い。たとえば、スレッドが折りたたまれている時に、隠されているメッセージの数を表示するため
<link linkend="index-format">$index_format</link>に <quote>%?M?(#%03M)&amp;(%4l)?</quote>
という設定を使う事ができます。
<literal>%?&lt;char&gt;?&lt;if-part&gt;&amp;&lt;else-part&gt;?</literal>
という文法の詳細は、<link linkend="formatstrings-conditionals">format string conditionals</link>
に説明があります。
</para>

<para>
技術的には、すべての返信にはスレッドツリー中の親メッセージのリストが含まれているべき
ですが、必ずしもすべてがそうとは限りません。そのような場合、Mutt は
<link linkend="strict-threads">$strict_threads</link>変数を使って制御できる題名に
よってグループ化を行います。
</para>

</sect2>

<sect2 id="reading-misc">
<title>その他の機能</title>

<para>
さらに、<emphasis>インデックス</emphasis> と
<emphasis>ページャ</emphasis> メニューにはいくつかの興味深い機能があります:
</para>

<variablelist>

<varlistentry>
<term>
<literal>&lt;check-stats&gt;</literal><anchor id="check-stats"/>
</term>
<listitem>
<para>
<command>mailboxes</command> コマンドを使って宣言された、すべての監視対象
メールボックスに対する統計情報を計算します。これは、
<link linkend="mail-check-stats">$mail_check_stats</link>が未設定でも
統計情報を計算します。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;create-alias&gt;</literal><anchor id="create-alias"/>
(既定値: a)
</term>
<listitem>
<para>
現在のメッセージ(あるいうは新規プロンプト)をもとに、新しい別名を作成します。
編集を終えると、<link linkend="alias"><command>alias</command></link>
コマンドが<link linkend="alias-file">$alias_file</link>によって指定された
ファイルに、あとで使うために追加されます。
</para>

<note>
<para>
Mutt は開始時以降は<link linkend="alias-file">$alias_file</link> を読み込みません。
そのため、ファイルは<link linkend="source"><command>source</command></link>
を使って明示的に読み込む必要があります。
</para>
</note>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;check-traditional-pgp&gt;</literal><anchor
id="check-traditional-pgp"/> (既定値: Esc P)
</term>
<listitem>
<para>
この機能は、現在のメッセージを調べ、<quote>従来の</quote>方法で PGP による
署名または暗号化が行われている内容を検索します。すなわち、 MIME タグがない
場合のことです。技術的には、この機能は PGP データが含まれているボデイパートの
MIME content type を一時的に変更します。すなわち、
<link linkend="edit-type"><literal>&lt;edit-type&gt;</literal></link>
機能の効果と似ています。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;edit&gt;</literal><anchor id="edit"/> (既定値: e)
</term>
<listitem>
<para>
このコマンド(インデックスとページャで有効)は、現在のメッセージを、
メールフォルダ中にあるままの形で、そのまま編集します。編集を終えると、
変更されたメッセージは現在のフォルダに追加され、オリジナルのメッセージには
削除フラグがつけられます。メッセージが変更されなかった場合には置き換えは
行われません。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;edit-type&gt;</literal><anchor id="edit-type"/> (既定値:
添付メニュー、ページャ、インデックスメニューでは ^E ; 編集メニューでは ^T)
</term>
<listitem>
<para>
このコマンドは添付の content type を一時的に編集し、修正するのに使います。
たとえば、間違った文字セットパラメータなどを直す時などです。インデックスか
ページャから使うと、最上位の添付ファイルの content type を修正できます。
<link linkend="attach-menu">添付メニュー</link>から使う場合には、どの添付ファイルの
content type も修正できます。この変更は恒久的なものではなく、フォルダを変更すると
消えてしまいます。
</para>

<para>
このコマンドは<link linkend="compose-menu">編集メニュー</link>でも使えることに
注意してください。その場合、送信使用としている添付ファイルの属性を微調整するのに
使います。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;enter-command&gt;</literal><anchor id="enter-command"/>
(既定値: <quote>:</quote>)
</term>
<listitem>
<para>
このコマンドは通常設定ファイル中に記述するコマンドを実行するのに使います。
一般的な使い方としては、変数の設定を確認したり、<link linkend="macro">macros</link>
と組み合わせて、動作中に設定を変更するのに使います。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;extract-keys&gt;</literal><anchor id="extract-keys"/>
(既定値: ^K)
</term>
<listitem>
<para>
このコマンドは PGP 公開鍵を、現在またはタグづけられたメッセージから
抽出して自分の PGP 公開鍵キーリングに追加します。 
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;forget-passphrase&gt;</literal><anchor
id="forget-passphrase"/> (既定値: ^F)
</term>
<listitem>
<para>
このコマンドはパスフレーズをメモリから削除します。パスフレーズを間違って
入力した時に使います。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;list-reply&gt;</literal><anchor id="list-reply"/> (既定値:L)
</term>
<listitem>
<para>
<link linkend="lists"><command>lists</command> または
<command>subscribe</command></link> コマンドを使って得られた、
正規表現に一致するアドレスから抽出された、現在またはタグづけられたメッセージに
返信します。それだけではなく、もし、
<link linkend="honor-followup-to">$honor_followup_to</link> 変数が設定で
有効になっている場合、<literal>Mail-Followup-To</literal> ヘッダを信用します。
さらに、<literal>List-Post</literal> ヘッダフィールドが、
メーリングリストアドレスとして、<literal>mailto:</literal> URL が
指定された場合に検査されます。
メーリングリストに投稿されたメッセージに返信する時にこれを使うと、
返信する元メッセージの送信者とメーリングリストへ二重に送信するのを避ける助けになります。 
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;pipe-message&gt;</literal><anchor id="pipe-message"/>
(既定値: |)
</term>
<listitem>
<para>
外部 Unix コマンドの入力を要求し、現在又はタグづけられたメッセージをそこにパイプします。
変数
<link linkend="pipe-decode">$pipe_decode</link>,
<link linkend="pipe-split">$pipe_split</link>,
<link linkend="pipe-sep">$pipe_sep</link> と
<link linkend="wait-key">$wait_key</link> はこの機能の正確な動作を制御します。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;resend-message&gt;</literal><anchor id="resend-message"/>
(既定値: Esc e)
</term>
<listitem>
<para>
resend-message を使うと、Mutt は現在のメッセージを雛型として新しいメッセージを作成します。
この機能は "任意のフォルダの復元" と説明するのが最適でしょう。MIME メッセージを、
もともとのメール構造を保ったまま転送するのに便利です。このときに含まれるへッダは 
<link linkend="weed">$weed</link> 変数の値に依存していることに注意してください。
</para>

<para>
この機能は添付メニューからも利用できます。これを使えば<literal>message/rfc822</literal>
ボディパートとして転送されてきたメッセージを簡単に再送できます。 
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;shell-escape&gt;</literal><anchor id="shell-escape"/>
(既定値: !)
</term>
<listitem>
<para>
外部 Unix コマンドの入力を要求し、それを実行します。
<link linkend="wait-key">$wait_key</link> を使って、コマンドが終了したときに
(おそらくコマンドの出力をユーザが読めるようにするため)、Mutt が何か
キーが押されるまで 待つかどうかをコマンドの戻り値で制御するようにできます。
コマンドが指定されなかった場合は、シェルが起動します。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;toggle-quoted&gt;</literal><anchor id="toggle-quoted"/>
(既定値: T)
</term>
<listitem>
<para>
ページャは、メッセージの本文を表示する時に、
<link linkend="quote-regexp">$quote_regexp</link>変数を使って引用文を
検出します。この機能は、メッセージ中の引用部分を表示するかどうかを切り替えます。
特に、返事だけに興味があるのに大量の引用文があって邪魔だというようなときに役に立ちます。 
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;skip-quoted&gt;</literal><anchor id="skip-quoted"/>
(既定値: S)
</term>
<listitem>
<para>
この機能は内部ページャにおいて、引用文の行のあとの非引用文の行に移動します。
</para>
</listitem>
</varlistentry>

</variablelist>

</sect2>

</sect1>

<sect1 id="sending">
<title>メールの送信</title>

<sect2 id="sending-intro">
<title>イントロダクション</title>

<para>
<xref linkend="tab-key-send"/>に記載のあるバインディングは、<emphasis>インデックス</emphasis> と
<emphasis>ページャ</emphasis>で新しくメッセージを書き始める時に有効です。
</para>

<table id="tab-key-send">
<title>もっとも一般的なメール送信キー</title>
<tgroup cols="3">
<thead>
<row><entry>キー</entry><entry>機能</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>m</entry><entry><literal>&lt;compose&gt;</literal></entry><entry>新規メッセージを作成</entry></row>
<row><entry>r</entry><entry><literal>&lt;reply&gt;</literal></entry><entry>送信者に返信</entry></row>
<row><entry>g</entry><entry><literal>&lt;group-reply&gt;</literal></entry><entry>受信者全員に返信</entry></row>
<row><entry></entry><entry><literal>&lt;group-chat-reply&gt;</literal></entry><entry>To/Cc を保持して、すべての受信者に返信</entry></row>
<row><entry>L</entry><entry><literal>&lt;list-reply&gt;</literal></entry><entry>メーリングリストのアドレスに返信</entry></row>
<row><entry>f</entry><entry><literal>&lt;forward&gt;</literal></entry><entry>メッセージを転送</entry></row>
<row><entry>b</entry><entry><literal>&lt;bounce&gt;</literal></entry><entry>メッセージを中継(再送)</entry></row>
<row><entry>Esc k</entry><entry><literal>&lt;mail-key&gt;</literal></entry><entry>誰かに PGP 公開鍵を送信</entry></row>
</tbody>
</tgroup>
</table>

<para>
<emphasis>メッセージの中継(Bouncing)</emphasis> は、指定した受信者に、メッセージをそのまま送信します。
<emphasis>メッセージの転送(Forwarding)</emphasis>は、転送する時に、メッセージにコメントをつけたり、
編集したりできます。これらにつては、次の節
<quote><link linkend="forwarding-mail">メールの転送と中継</link>でより詳細に説明します。</quote>
</para>

<para>
上記のコマンドを使うと Mutt は<emphasis>compose</emphasis>メニューに入り、
<quote>To:</quote>ヘッダフィールドに入れる宛先の入力を促します。
<literal>m</literal>キーを押すと、新規メッセージの作成を開始します。
次に、メッセージの<quote>Subject:</quote>フィールドを聞いてきますが、
メッセージの返信や転送の際には既定値が入っています。送信者、題名とセキュリティ
設定を、実際にメッセージを送信する前に再度修正することはできます。
Mutt がどのように質問するかを変更するについては、
<link linkend="askcc">$askcc</link>, <link linkend="askbcc">$askbcc</link>,
<link linkend="autoedit">$autoedit</link>, <link linkend="bounce">$bounce</link>,
<link linkend="fast-reply">$fast_reply</link> と <link linkend="include">$include</link>
を参照してください。
</para>

<para>
返信する場合、Mutt は、返信するタイプによって、それらのフィールドに適切な値を入れます。
サポートしている返信のタイプは以下の通りです:
</para>

<variablelist>
<varlistentry>
<term>単純な返信</term>
<listitem>
<para>
送信者に直接返信。  
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>グループ返信</term>
<listitem>
<para>
送信者、cc に指定してあるすべての受信者に返信;
<link linkend="alternates"><command>alternates</command></link>を確認し、
自分自身を除外します。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>グループチャット返信</term>
<listitem>
<para>
To リスト中の、送信者と他の受信者に返信します。 Cc リスト中の受信者には
Cc で送信します。<link linkend="alternates"><command>alternates</command></link>
を考慮し、自分自身は除外します。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>リストへの返信</term>
<listitem>
<para>
設定で指定されたものあるいは自動検出した、見つかったメーリングリストアドレスすべてに返信します。
詳細は、<xref linkend="lists"/>を参照してください。
</para>
</listitem>
</varlistentry>
</variablelist>

<para>
新しいメッセージへ、転送または返信の受信者が決まったら、Mutt は自動的にメッセージ本文に
対して<link linkend="editor">$editor</link> を起動します。
<link linkend="edit-headers">$edit_headers</link>変数が設定されている場合には、メッセージ
本文の一番はじめの所にヘッダも含まれます。ヘッダの最後の行のあとに空白行と改行が来た
その後から始まる必要があります。返信するメッセージは整列順に追加され、適切な
<link linkend="attribution">$attribution</link>,
<link linkend="indent-string">$indent_string</link> と
<link linkend="post-indent-string">$post_indent_string</link> が付きます。
メッセージ転送の場合、<link linkend="mime-forward">$mime_forward</link>
変数が設定されていないと、転送するメッセージのコピーが本文に取り込まれます。
<link linkend="signature">$signature</link>が指定されていれば、メッセージに
そのファイルが追加されます。
</para>

<para>
メール本文の修正完了後は <emphasis>compose</emphasis>メニューに戻ります。
<xref linkend="tab-func-compose"/>にある選択肢で、再編集、送信または一時保存を選べます。
</para>

<table id="tab-func-compose">
<title>もっとも一般的な編集メニューキー</title>
<tgroup cols="3">
<thead>
<row><entry>キー</entry><entry>機能</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>a</entry><entry><literal>&lt;attach-file&gt;</literal></entry><entry>ファイルの添付</entry></row>
<row><entry>A</entry><entry><literal>&lt;attach-message&gt;</literal></entry><entry>メッセージにメッセージを添付</entry></row>
<row><entry>Esc k</entry><entry><literal>&lt;attach-key&gt;</literal></entry><entry>PGP 公開鍵を添付</entry></row>
<row><entry>d</entry><entry><literal>&lt;edit-description&gt;</literal></entry><entry>添付の説明を編集</entry></row>
<row><entry>D</entry><entry><literal>&lt;detach-file&gt;</literal></entry><entry>添付ファルを外す</entry></row>
<row><entry>t</entry><entry><literal>&lt;edit-to&gt;</literal></entry><entry>To フィールドを編集</entry></row>
<row><entry>Esc f</entry><entry><literal>&lt;edit-from&gt;</literal></entry><entry>From フィールドを編集</entry></row>
<row><entry>r</entry><entry><literal>&lt;edit-reply-to&gt;</literal></entry><entry>Reply-To フィールドを編集</entry></row>
<row><entry>c</entry><entry><literal>&lt;edit-cc&gt;</literal></entry><entry>Cc フィールドを編集</entry></row>
<row><entry>b</entry><entry><literal>&lt;edit-bcc&gt;</literal></entry><entry>フィールドを編集</entry></row>
<row><entry>y</entry><entry><literal>&lt;send-message&gt;</literal></entry><entry>メッセージを送信</entry></row>
<row><entry>s</entry><entry><literal>&lt;edit-subject&gt;</literal></entry><entry>題名を編集</entry></row>
<row><entry>S</entry><entry><literal>&lt;smime-menu&gt;</literal></entry><entry>S/MIME オプションを選択</entry></row>
<row><entry>f</entry><entry><literal>&lt;edit-fcc&gt;</literal></entry><entry><quote>Fcc</quote> メールボックスを指定</entry></row>
<row><entry>p</entry><entry><literal>&lt;pgp-menu&gt;</literal></entry><entry>PGP オプションを選択</entry></row>
<row><entry>P</entry><entry><literal>&lt;postpone-message&gt;</literal></entry><entry>あとで使うためメッセージを一時保存</entry></row>
<row><entry>q</entry><entry><literal>&lt;quit&gt;</literal></entry><entry>メッセージの送信を中断(中止)</entry></row>
<row><entry>w</entry><entry><literal>&lt;write-fcc&gt;</literal></entry><entry>フォルダにメッセージを書き込む</entry></row>
<row><entry>i</entry><entry><literal>&lt;ispell&gt;</literal></entry><entry>スペルチェック(システムで有効な場合)</entry></row>
<row><entry>^F</entry><entry><literal>&lt;forget-passphrase&gt;</literal></entry><entry>メモリからパスフレーズを削除</entry></row>
</tbody>
</tgroup>
</table>

<para>
編集メニューは、ファイルまたは他のメッセージからなる添付の編集にも使えます。
<literal>&lt;attach-message&gt;</literal>機能はを使うと、メッセージを添付するフォルダを指定するプロ
ンプトが表示されます。そのフォルダでメッセージにタグをつけると送信するメッセージにそれらが添付されま
す。
</para>

<note>
<para>
そのフォルダにいる場合には、新しいメールの作成、返信、転送などのようないくつかの操作ができないことに
注意してください。<link linkend="status-format">$status_format</link> 中の %r が <quote>A</quote>
になると、添付メッセージモードにいることを表示します。
</para>
</note>

<para>
<literal>&lt;send-message&gt;</literal>経由で編集メニューを終了したあと、メッセージが送信されます。
設定されてそれが有効な場合、
<link linkend="sending-mixmaster">mixmaster</link>または
<link linkend="smtp">$smtp_url</link> 経由で行うことができます。
それ以外では、<link linkend="sendmail">$sendmail</link> が起動されます。
バージョン 1.13 より前では、Mutt は既定値で<link linkend="write-bcc">$write_bcc</link>を
有効にしていて、MTA が自動的に<literal>Bcc:</literal>ヘッダを配信の一部として削除することを
仮定しています。1.13からは、オプションは既定値では設定されませんが、メッセージの fcc コピーにはもは
や何も影響しません。
</para>

</sect2>

<sect2 id="edit-header">
<title>メッセージヘッダの編集</title>

<para>
<link linkend="edit-headers">$edit_headers</link> が設定されているためヘッダを編集する場合、
送信メッセージには含まれませんが、特別な Mutt の動作を起動する、いくつかの疑似ヘッダが利用
可能です。  
</para>

<sect3 id="fcc-header">
<title>Fcc: 疑似ヘッダ</title>

<para>
<literal>Fcc:</literal> <emphasis>ファイル名</emphasis>
</para>

<para>
をヘッダとして指定すると、Mutt は<emphasis>compose</emphasis>メニュー中で
<literal>&lt;edit-fcc&gt;</literal>機能を使ったと同じように、
<emphasis>ファイル名</emphasis>を扱います。
</para>

</sect3>

<sect3 id="attach-header">
<title>Attach: 疑似ヘッダ</title>

<para>
以下のように指定することで、メッセージにファイルを添付できます。
</para>

<para>
<literal>Attach:</literal> <emphasis>ファイル名</emphasis>
[ <emphasis>説明</emphasis> ]
</para>

<para>
ここで、<emphasis>ファル名</emphasis>は添付されるファイルで、
<emphasis>説明</emphasis>は添付ファイルの説明として使う、オプションの文字列です。
ファイル名中の空白は、バックスラッシュ(<quote>\</quote>)を使う事でエスケープできます。
ファイルは編集メニューから追加するように削除できます。
</para>

</sect3>

<sect3 id="pgp-header">
<title>Pgp: 疑似ヘッダ</title>

<para>
PGP を使いたい場合、以下のように指定します。
</para>

<para>
<literal>Pgp:</literal> [ <literal>E</literal> | <literal>S</literal> | <literal>S</literal><emphasis>&lt;id&gt;</emphasis> ]

</para>

<para>
<quote>E</quote> は暗号化、<quote>S</quote> は署名、そして
<quote>S&lt;id&gt;</quote> は指定されたキーで署名します。
<link linkend="pgp-sign-as">$pgp_sign_as</link> を設定すれば、鍵は恒久的になります。
選択した項目は編集メニューであとで変更できます。
</para>

</sect3>

<sect3 id="in-reply-to-header">
<title>In-Reply-To: ヘッダ</title>

<para>
メッセージに返信する場合、<emphasis>In-Reply-To:</emphasis>ヘッダには
返信したいメールのメッセージ ID が含まれています。この値を削除したり変更した
場合は、Mutt は、たとえば、メーリングリストのアドレスを入力せずに、メーリング
リスト向けの新しいメッセージを作成するような、新しいメッセージスレッドを作成する、
<emphasis>References:</emphasis>フィールドを作成しません。
</para>

<para>
返信時に新しいスレッドを開始したい時には、エディタ中で<emphasis>In-Reply-To:</emphasis>
を確実に取り去ってください。そうでないと、技術的に有効な返信とは言え、
ネチケットに口うるさい誰かには、いわゆる<quote>thread hijacking</quote>
で迷惑を被るかもしれません。
</para>

</sect3>

</sect2>

<sect2 id="sending-crypto">
<title>暗号化機能を使った、署名/暗号化したメールの送信</title>

<para>
Mutt で PGP または S/MIME でメッセージの暗号化を行う場合、メッセージを
送ろうとする時には、Mutt は鍵選択プロセス中で処理のガイドを行います。
Mutt は メッセージ受信者のメールアドレスに一致する認証されたユーザ ID を
持つ鍵について、何ら問い合わせません。しかし、複数の鍵があったり、
認証されたユーザ ID フィールドが弱かったり、一致する鍵が見つからなかったり
する場合があります。
</para>

<para>
このような場合、鍵の一覧メニューに移行し、その中から鍵を選ぶことができます。
このメニューを終了するか、一致する鍵がなかった場合には、ユーザ ID の入力が
要求されます。通常と同じように、<literal>^G</literal>を使って、この入力待ち
状態を中止できます。そうすると、Mutt は編集画面に戻ります。
</para>

<para>
鍵の選択が正しく終了すると、メッセージは 選択した公開鍵を使って暗号化され
送信されます。
</para>

<para>
送信した暗号化メッセージを見られるようにするためには、PGP では
<link linkend="pgp-self-encrypt">$pgp_self_encrypt</link> と
<link linkend="pgp-default-key">$pgp_default_key</link>を、S/MIME では
<link linkend="smime-default-key">$smime_default_key</link>を
設定してください。
</para>

<para>
鍵選択メニュー(<link linkend="pgp-entry-format">$pgp_entry_format</link>
を参照)中の、エントリのほとんどのフィールドは、明確な意味を持っています。
しかし、ケーパビリティ、フラグと有効性のフィールドについては説明が必要でしょう。
</para>

<para>
フラグシーケンス(<quote>%f</quote>) は<xref linkend="tab-pgp-menuflags"/>中の
フラグのどれかに展開されます。
</para>

<table id="tab-pgp-menuflags">
<title>PGP 鍵メニューのフラグ</title>
<tgroup cols="2">
<thead>
<row><entry>フラグ</entry><entry>説明</entry></row>
</thead>
<tbody>
<row><entry>R</entry><entry>鍵は破棄されていて使えない。</entry></row>
<row><entry>X</entry><entry>鍵は期限切れになっており、使えない。</entry></row>
<row><entry>d</entry><entry>自分で鍵を使用不可に印付けた。</entry></row>
<row><entry>c</entry><entry>未知の重要な自己署名パケットがある。</entry></row>
</tbody>
</tgroup>
</table>

<para>
ケーパビリティフィールド(<quote>%c</quote>)は、鍵のケーパビリティを表す
2文字の並びに展開されます。最初の文字は鍵の暗号化ケーパビリティです。
マイナス記号(<quote>-</quote>)は、鍵が暗号化に使えないという意味です。
ドット(<quote>.</quote>)は、いずれかのユーザ ID の署名鍵としてマーク
されているけれど、暗号化にも使えるという意味です。文字<quote>e</quote>は、
このキーが暗号化に使えるという意味です。
</para>

<para>
2番目の文字は鍵の署名ケーパビリティを示しています。こちらもやはり、
<quote>-</quote>は<quote>署名用ではない</quote>ことを意味し、<quote>.</quote>
は鍵があるユーザ ID の暗号化鍵としてマークされていることを意味し、
<quote>s</quote>は署名用に使えるという意味です。

</para>

<para>
最後に、信用度フィールド(<quote>%t</quote>)は、ユーザID がどれほどしっかり
検証されているかを示します。疑問符(<quote>?</quote>)は信用度が未定義で、
マイナス文字(<quote>-</quote>)は、信頼されていない関係を示し、
空白は部分的に信頼できることを意味し、プラス文字(<quote>+</quote>)は、
完全な信用度を表しています。
</para>

</sect2>

<sect2 id="ff">
<title>Format=Flowed 形式のメッセージ送信</title>

<sect3 id="ff-concept">
<title>コンセプト</title>

<para>
<literal>format=flowed</literal>形式のメッセージ(又は短い形式では
<literal>f=f</literal>)は、ほとんどの場合、送信者が何を送ったかに
よらず、行の長さをカスタマイズできる、受信者のメールクライアントが
独自のニーズに合わせて再フォーマットすることができる段落から構成されています。
技術的には、これは、最後の行を除いて、<quote>flowable</quote>な段落
の最後を空白で終了することによって実現します。
</para>

<para>
Mutt のようなテキストモードのクライアントでは、標準の 80x25文字サイズの
ターミナルのみを仮定するのにもっともよい方法ですが、メッセージの受信者に
見方を完全に決めさせたい場合もあるでしょう。
</para>

</sect3>

<sect3 id="ff-support">
<title>Mutt のサポート</title>

<para>
Mutt は <link linkend="text-flowed">$text_flowed</link> 変数が設定されている
場合、特に、末尾の空白が追加されていない時に、送信メッセージで必要な
<literal>format=flowed</literal> MIME パラメータの設定のみをサポートします。
</para>

<para>
編集後、Mutt はメッセージに、適切な空白を埋め込みます。
<emphasis>適切な空白の埋め込み(Space-stuffing)</emphasis>は、
<literal>format=flowed</literal>を定義するRFC3676 で要求され、
次のように空白を埋め込むことを意味します:

</para>

<itemizedlist>
<listitem><para>空白で始まるすべての行</para></listitem>
<listitem><para><quote><literal>From</literal></quote>で始まる行で、
空白を伴うもの</para></listitem>
<listitem><para><quote><literal>&gt;</literal></quote>で始まるすべての行で、
引用文字を意図しないもの</para></listitem>
</itemizedlist>

<note>
<para>
Mutt は最初の2つのものについて空白の埋め込みをサポートしますが、3番目のものについては
対象外です。先頭の<literal>&gt;</literal>文字が引用の開始なのか否かを
安全に検出するのは不可能だからです。
</para>
</note>

<para>
後続の処理の前に、もとのメッセージを復元するため、
すべての先頭の空白は、受信したクライアントによって削除されます。
</para>

</sect3>

<sect3 id="ff-editor">
<title>エディタの考慮事項</title>

<para>
Mutt は<literal>f=f</literal>メッセージの編集時には、何ら追加の機能を提供しないので、
適切なメッセージを作成するのは、ユーザとエディタ次第です。
<literal>f=f</literal>メッセージを送信する場合はエディタのドキュメントを
よく見てください。
</para>

<para>
たとえば、<emphasis>vim</emphasis>は、<literal>f=f</literal>メッセージを作成する
ことを支援するために、<literal>formatoptions</literal>の設定のための
<literal>w</literal>フラグを提供します。
詳細は<literal>:help fo-table</literal>を参照してください。
</para>

</sect3>

<sect3 id="ff-pager">
<title>再フォーマット</title>

<para>
  Mutt は<literal>format=flowed</literal>メッセージの表示と返信時に
  いくつかの再フォーマット機能を提供しています。これらを活用するためには、
  <link linkend="reflow-text">$reflow_text</link>を設定しなければなりません。
</para>

<itemizedlist>
  <listitem>
  <para>
    段落は、<link linkend="reflow-wrap">$reflow_wrap</link>で指定された幅で、
    自動的にリフローされて折り返しされます。
  </para>
  </listitem>
  <listitem>
  <para>
    (i.e. with <link linkend="text-flowed">$text_flowed</link> unset).
    オリジナルのフォーマットでは、<literal>format=flowed</literal>メッセージの
    引用スタイルは、読解が困難で、フローされていない返信とうまく混ざりません。
    <link linkend="reflow-space-quotes">$reflow_space_quotes</link>を設定すると、
    ページャと非フロー形式での返信時に書くレベルの引用のあとに空白を追加します。
    (すなわち、<link linkend="text-flowed">$text_flowed</link> が未設定)。
  </para>
  </listitem>
  <listitem>
  <para>
    もしも<link linkend="reflow-space-quotes">$reflow_space_quotes</link>
    が未設定の場合、mutt はページャ中で(返信時ではなく)すべての引用のあとに
    1つの空白を付与します。
  </para>
  </listitem>
</itemizedlist>

</sect3>

</sect2>

</sect1>

<sect1 id="forwarding-mail">
<title>メールの転送と中継</title>

<para>
中継と転送は、既存のメッセージを自分で指定した宛先に送信できる機能です。
メッセージの中継とは、Bcc ヘッダで指定された、メッセージのオリジナルな
受信者に送られるように、メッセージの冗長コピーを送信します。一方
メッセージの転送では、再送する前に、メッセージの修正ができます(たとえば、
コメントを追加するなど)。中継は、<quote>b</quote>にバインドされている
<literal>&lt;bounce&gt;</literal>機能を使い、転送は<quote>f</quote>に
バインドされている<literal>&lt;forward&gt;</literal>機能を使います。
</para>

<para>
転送は(指示線に囲まれた)新しいメッセージの本体中にオリジナルのメッーセージを
取り込むか、<link linkend="mime-forward">$mime_forward</link>変数の値に
依存しますが、MIME添付を含むことで行われます。
ページャがやるような添付のデコードは、
<link linkend="forward-decode">$forward_decode</link> と
<link linkend="mime-forward-decode">$mime_forward_decode</link>変数を
使って行われます。転送の形式は内容に依存するので、quadoption パラメータ
<link linkend="mime-forward">$mime_forward</link> を、たとえば、
<quote>ask-no</quote>に設定することができます。
</para>

<para>
Mutt の既定値(
<link linkend="mime-forward">$mime_forward</link>=<quote>no</quote>と
<link linkend="forward-decode">$forward_decode</link>=<quote>yes</quote>)
は標準のインライン転送の時に使います。このモードではすべてのテキストに
デコード可能な部分は新しいメッセージ本体に含まれます。
quadoption <link linkend="forward-attachments">$forward_attachments</link>
の状態によって、オリジナルメールのその他の添付は新しいメッセージに添付する
ことができます。
</para>

<para>
ヘッダを含めるかは、
<link linkend="mime-forward">$mime_forward</link> が設定されていない限り、
<link linkend="weed">$weed</link>変数の現在の設定によって制御されます。
</para>

<para>
転送時におけるメッセージの編集はメッセージの送信または返信と同じ方法ですが、
<link linkend="forward-edit">$forward_edit</link> quadoption で無効に
することもできます。
</para>

</sect1>

<sect1 id="postponing-mail">
<title>メール送信の延期</title>

<para>
たまに、メッセージをすでに書き始めたものの、 送信は後にしたいということがあります。
<literal>&lt;postpone-message&gt;</literal>機能を<emphasis>compose</emphasis>メニューで
使うと、メールの本文と添付は
<link linkend="postponed">$postponed</link>変数で指定されたメールボックス中に
格納されます。これはつまり、Mutt を終了して次回また起動したとしても、
そのメッセージを呼び出せるということです。 

</para>

<para>
メッセージを延期したあとで再開するには、いくつかの方法があります。
コマンドラインからは<quote>-p</quote>オプションが使えますし、
<emphasis>インデックス</emphasis>か<emphasis>ページャ</emphasis>から
新しいメッセージを編集する場合は、延期したメッセージがあるときには
再開するかどうか聞かれます。 延期メッセージが複数あるときは、
<emphasis>postponed</emphasis>メニューが出てきて、 どのメッセージを再開
したいか選択できます。 
</para>

<note>
<para>
メッセージに対する返信を延期したならば、返信済みフラグが 更新されるのは
返信メッセージを実際に完成させて送信したときだけだということに注意してください。
しかも、その親メッセージと同じフォルダにいなければ状態がきちんと更新されません。
</para>
</note>

<para>
<link linkend="postpone">$postpone</link> quad-option も参照してください。
</para>

</sect1>

<sect1 id="encryption">
<title>暗号化と署名</title>

<para>
OpenPGP と S/MIME は、<quote>クラシックモード</quote>と GPGME という2つの
方法で有効になります。最初の方は、種々の操作を実行する外部プログラムを
起動します。この方がテストに便利で、より柔軟性が高いのですが、若干の
設定が必要です。後者は GnuPG プロジェクトの GPGME ライブラリを使います。
</para>

<para>
<quote>クラシックモード</quote>を有効にするには、mutt GPGME を確実に無効にし、
同梱の<literal>gpg.rc</literal> または <literal>smime.rc</literal> ファイルを
使います。これらは通常<literal>/usr/local/share/doc/mutt/samples/</literal>
配下にインストールされています。それらを直接、あるいは、直接かコピーして
.mutt directory に置き、 souce コマンドを使って内容を反映させてください。
<literal>/usr/local/share/doc/mutt/samples/</literal> から直接 source コマンドで
内容を反映させる場合、コマンドに対して自動的に修正の適用と、セキュリティの向上が
行えますので、これが推奨です。
</para>

<screen>
unset crypt_use_gpgme
source /usr/local/share/doc/mutt/samples/gpg.rc
source /usr/local/share/doc/mutt/samples/smime.rc
</screen>

<para>
代わりに GPGME を使う場合は、単に .muttrc の中で以下を有効にするだけです:
</para>

<screen>
set crypt_use_gpgme
</screen>

<sect2 id="enc-pgp">
<title>OpenPGP の構成</title>

<para>
<link linkend="pgp-default-key">$pgp_default_key</link> と
<link linkend="pgp-sign-as">$pgp_sign_as</link> という2つの重要な
設定があります。暗号化を実行するためには最初の変数を設定しなければなりません。
分割した署名鍵を使う場合か、署名鍵のみがある場合は、2番目を設定します。
ほとんどの場合は、<link linkend="pgp-default-key">$pgp_default_key</link>
のみ設定すればよいです。
</para>

<para>
バージョン 2.1.0 から GnuPG は自動的にパスフレーズの入力要求のために、
<literal>エージェント</literal>を使うようになりました。それより古いバージョン
を使っている場合は、エージェントが動作しているようにしておく必要があります
(かわりに <link linkend="pgp-use-gpg-agent">$pgp_use_gpg_agent</link>
を未設定にすると Mutt はパスフレーズを聞いてきます)。次に、エージェントは、
<literal>pinentry</literal>プログラムを使ってプロンプトを表示します。
たとえば、qt、gtk2、gnome3、fltk や curses というような、使用可能な、
数多くの異なった pinentry プログラムがあります。Mutt は tty pinentry
プログラムではうまく動作<emphasis>しません</emphasis>。そのかわりに、
GUI または curses ベースの pinentry プログラム をインストールし、
システムで既定のものとして設定してください。
</para>
</sect2>

<sect2 id="enc-smime">
<title>S/MIME の設定</title>

<para>
OpenPGP と同様、2つの重要な設定、
<link linkend="smime-default-key">$smime_default_key</link> と
<link linkend="smime-sign-as">$smime_sign_as</link> があります。
暗号化と復号化を行うためには、最初の変数の設定が必要です。分割された
署名鍵あるいは署名鍵のみの場合は、2番目の設定が必要です。
ほとんどの場合は、<link linkend="smime-default-key">$smime_default_key</link>
のみの設定が必要でしょう。
</para>

<para>
<quote>クラシックモード</quote>では、キーと証明書は、mutt に同梱されている
<literal>smime_keys</literal>プログラムによって管理されます。既定値では、
それらは<literal>~/.smime/</literal>配下に格納されます。(これは
<literal>smime.rc</literal>ファイルの
<link linkend="smime-certificates">$smime_certificates</link> と
<link linkend="smime-keys">$smime_keys</link> によって設定されます。)
このディレクトリを初期化したい場合は、シェルプロンプトから、
<quote><literal>smime_keys init</literal></quote>コマンドを使います。
プログラムは、証明書のステータスフラグを更新するために、
<quote><literal>smime_keys refresh</literal></quote>を定期的に実行するのに
使われます。
</para>
</sect2>

</sect1>

</chapter>

<chapter id="configuration">
<title>設定</title>

<sect1 id="configuration-files">
<title>初期設定ファイルの位置</title>

<para>
既定の設定(又は<quote>preferences</quote>)は、Mutt を箱から出してすぐに
使えるようにしますが、自分の好みに応じて Mutt を仕立て上げる方が好ましいと
言えます。Mutt が最初に起動された時は、<quote>-n</quote>
<link linkend="commandline">command line</link>オプションが指定されていない
限り、まず<quote>システムの</quote>
設定ファイル(既定値はローカルの管理者によって設定されています)を読もうとします。
このファイルは通常
<literal>/usr/local/share/mutt/Muttrc</literal>か
<literal>/etc/Muttrc</literal>にあります。Mutt は次にホームディレクトリ中の
<literal>.muttrc</literal>という名前のファイルを検索します。
このファイルが存在しなく、ホームディレクトリに<literal>.mutt</literal>という
サブディレクトリがある場合は、Mutt は<literal>.mutt/muttrc</literal>という
ファイルをロードしようとします。もしもなければ、Mutt は
<literal>$XDG_CONFIG_HOME/mutt/muttrc</literal> を読もうと試みます。
</para>

<para>
<literal>.muttrc</literal>は、通常、Mutt を設定するための
<link linkend="commands">commands</link>を配置するファイルです。
</para>

<para>
さらに、Mutt は、上記で説明した、既定のファイルの代わりに実行する、
特定バージョン用の設定ファイルをサポートしています。たとえば、システムの
システム設定ディレクトリに Muttrc-0.88 というファイルがあり、
Mutt のバージョン 0.88 を使っているときには、このファイルは
<literal>Muttrc</literal>ファイルの代わりに読み込まれます。ユーザの
設定ファイルでも同様で、ホームディレクトリ中に
<literal>.muttrc-0.88.6</literal>というファイルがあり、Mutt バージョン 0.88.6
を実行している場合は、既定の<literal>.muttrc</literal>ファイルの代わりに
このファイルが読み込まれます。バージョン番号は、
<quote>-v</quote> <link linkend="commandline">command line</link>
を使ったり、インデックスメニューから、<literal>show-version</literal>キー
(既定値では V) を使って表示されるものと 同じです。 
</para>

</sect1>

<sect1 id="quickconfig">
<title>Muttrc 設定の始め方</title>

<para>
Mutt は、ニーズと好みにに合わせて高度に設定が変更可能です。
しかし、高度にカスタマイズが可能ということは、設定を変更し始めるのが
難しいということでもあります。いくつか <literal>doc/mutt/samples/</literal>
に、mutt に同梱されているmuttrc のサンプルがあります。その中で、
<ulink url="https://gitlab.com/muttmua/mutt/tree/master/contrib/sample.muttrc-starter">
sample.muttrc-starter</ulink>は基本的な config の例で、
いくつか推奨の設定と便利なプログラムへの情報が含まれています。
</para>
</sect1>

<sect1 id="muttrc-syntax" xreflabel="Syntax of Initialization Files">
<title>初期化ファイルの構文</title>

<para>
初期化ファイルは一連の<link linkend="commands">commands</link>から成っています。
ファイルの各行には、ひとつでも複数でもコマンドを入れられます。 複数コマンドを
使うときはセミコロン(<quote>;</quote>)で区切らなければなりません。
</para>

<example id="ex-rc-multiple-cmds">
<title>複数の設定コマンドを1行中に記述する例</title>
<screen>
set realname='Mutt user' ; ignore x-
</screen>
</example>

<para>
ハッシュマーク、別名ポンド記号(<quote>#</quote>) は<quote>comment</quote>文字
として使われます。これは初期化ファイルへの注釈に使えます。 コメント文字以降の
文章はすべて無視されます。
</para>

<example id="ex-ec-comment">
<title>設定ファイルにおけるコメントの例</title>
<screen>
my_hdr X-Disclaimer: Why are you listening to me? <emphasis role="comment"># This is a comment</emphasis>
</screen>
</example>

<para>
シングルクォート(<quote>'</quote>) と引用符(<quote>"</quote>)は、
空白または他の特別文字を含む文字列をくくるのに使います。
この二種類の引用符の違いは、多くの一般的なシェルプログラムに似ています。
つまり、シングルクォートはその字面どおりの (シェル変数にも変換されず、
バックスラッシュでの文字指定 [次の段落を参照] も変換されないままの)
文字列を指定するために使う一方、ダブルクォートは、中の文字列を解釈すべきだ
いうことを示します。例えば、バックティック(訳注:バッククォート "`") は
引用符の中では解釈されますが、シングルクォートの中では解釈されません。 
</para>

<para>
<quote>\</quote>は、その次の文字をそのまま指定 (原語:quote)します。ちょうど
bash や zsh のようなシェルと同じです。例えば引用符<quote>"</quote>を文字列の
中に入れて使いたいときに <quote>\</quote>を使って、解釈しない文字どおりの
引用符にすることができます。 
</para>

<example id="ex-rc-quote">
<title>設定ファイル中における quotes の例</title>
<screen>
set realname="Michael \"MuttDude\" Elkins"
</screen>
</example>

<para>
<quote>\\</quote>は<quote>\</quote>文字そのものを行に挿入することを意味します。
<quote>\n</quote>と<quote>\r</quote>は、通常の C での意味合いと同じで、それぞ
れ改行 (LF = linefeed) と復帰 (CR = carriage-return) を意味します。
</para>

<para>
行末に<quote>\</quote>を使えば、行の終わりを<quote>エスケープ</quote>するよう
にコマンドを複数の行に分割できます。ただし分割地点がコマンド名の途中であっては
なりません。文の解釈の前に行は結合されるので、複数行は最初の行のみコメントアウト
することでコメントになります。
</para>

<example id="ex-rc-split">
<title>複数行に長い設定コマンドを分割</title>
<screen>
set status_format="some very \
long value split \
over several lines"
</screen>
</example>

<para>
初期化ファイル中で一部を Unix コマンドの出力に 置き換えることも可能です。
これはコマンドをバッククォート二つ (``) ではさむことによって行なえます。
<xref linkend="ex-rc-backtick"/>では、Unix コマンド<quote>uname -a</quote>
の出力を、行が解釈される前に置き換えます。初期化ファイルは行単位に処理され
ますので、Unix コマンドの出力の最初の行のみしか置換されないということです。
</para>

<example id="ex-rc-backtick">
<title>設定ファイル中において外部コマンド出力を使う</title>
<screen>
my_hdr X-Operating-System: `uname -a`
</screen>
</example>

<para>
バッククォートの出力が走査されないようにするためには、引用符の中に
入れてください。<xref linkend="ex-backtick-dblquotes"/>で、gpg の
復号化結果が、直接 $imap_pass に割り当てられています。その結果
パスワード中の特殊文字(たとえば、<quote>'</quote>、<quote>#</quote>、
<quote>$</quote>は走査されず、mutt によって特別に解釈されることはありません。
</para>

<example id="ex-backtick-dblquotes">
<title>バッククォートでくくられた部分の解釈を防ぐ</title>
<screen>
set imap_pass="`gpg --batch -q --decrypt ~/.mutt/account.gpg`"
</screen>
</example>

<para>
環境変数と Mutt の変数は共に、変数名の先頭に<quote>$</quote>をつけることで
アクセス出来ます。たとえば、
</para>

<example id="ex-rc-env">
<title>設定フィル中での環境変数の利用</title>
<screen>
set record=+sent_on_$HOSTNAME
</screen>
</example>

<para>
は、環境変数<literal>$HOSTNAME</literal>が、<quote>kremvax</quote>
に設定されていた場合、Mutt は<quote>sent_on_kremvax</quote>という
名前のフォルダに送信メッセージを保存します(詳細は、
<link linkend="record">$record</link>を参照)。
</para>

<para>
Mutt は変数が使われた時ではなく、割り当てられた時に展開します。
式の右辺にある変数の値を割り当て後に変更した場合、左辺の変数の内容は
変化しません。
</para>

<para>
Mutt が解釈できるコマンドについては、次節以降で説明していきます。
全コマンド一覧は<link linkend="commands">コマンドリファレンス</link>
を参照してください。
</para>

<para>
すべての設定ファイルは、<link linkend="charset">$charset</link>変数によって
決まる現在のロケールであることが想定されています。この変数は、起動時に
Mutt によって決まるため、変数の既定値はありません。
設定ファイルが同じ文字セットでエンコードされていない場合、
<link linkend="config-charset">$config_charset</link>変数を使う必要があります。
その次の行からすべての行は、
<link linkend="config-charset">$config_charset</link> から
<link linkend="charset">$charset</link>まで記録(訳注 recorded)されます。
</para>

<para>
この機構は、以下のような意味を持つため、可能であれば避けるべきです。
</para>

<itemizedlist>

<listitem><para>これらの変数は設定ファイルの先頭の方で
<link linkend="config-charset">$config_charset</link>より前に
<link linkend="charset">$charset</link> を定義すべきです。
そうすると、Mutt はどの文字セットに変換するかを知ることができます。
</para></listitem>

<listitem><para><link linkend="config-charset">$config_charset</link>
が設定されている場合、値はグローバルで、設定ファイル毎では
<emphasis>ないため</emphasis>、各設定ファイル毎に設定する必要があります。
</para></listitem>

<listitem><para>
Mutt は走査する前に行を最初に記録するので、疑問符やその他の文字をエラーの一部
として導入する変換(変換不能な文字、音訳)は、構文エラーを引き起こしたり、
特定のトークン(例えば、正規表現中への疑問符の埋め込み)を勝手に変換する
可能性があります。
</para></listitem>

</itemizedlist>

</sect1>

<sect1 id="addrgroup">
<title>アドレスグループ</title>

<para>使用法:</para>

<cmdsynopsis>
<command>group</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain" rep="repeat">
<option>-rx</option>
<replaceable class="parameter">expr</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-addr</option>
<replaceable class="parameter">expr</replaceable>
</arg>
</group>

<command>ungroup</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-rx</option>
<replaceable class="parameter">expr</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-addr</option>
<replaceable class="parameter">expr</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
<quote>auto-encryption</quote> can be achieved easily.
Mutt は名前をつけたグループ中に、論理的にアドレスをグルーピングする機能をサポート
しています。アドレスまたはアドレスパターンは同時に複数のグループで
利用できます。それらのグループは<link linkend="patterns">patterns</link>
(検索、制限やタグ付け)と、グループパターンを使うフックの中で
使う事ができます。これは、メールのクラス分けと、メッセージがどのようなグループ
なのかに依存した特定の動作を行わせる時に便利です。たとえば、mutt の
ユーザメーリングリストは<quote>mailing list</quote> と <quote>mutt-related</quote>
というカテゴリに一致します。<link linkend="send-hook"><literal>send-hook</literal></link>
を使う事で、送信者をメーリングリストあてのメッセージを書くための専用の
ものとして設定でき、mutt メーリングリストに書くための、mutt-related なものとして
署名を設定できます。&mdash;
他のリストに対しては、リストへの送信者の設定は引き続き適用されますが、
異なった署名が選択されます。あるいは、暗号化メールを受け取れることが分かっている
受信者のみを含むグループについて、<quote>auto-encryption</quote>
を簡単に実現できます。
</para>

<para>
<command>group</command>コマンドはグループまたは複数のグループに、
アドレスまたは正規表現で直接追加するために使用されます。
<command>group</command>コマンドの異なったカテゴリの引数は、任意の順序で
指定できます。<literal>-rx</literal>と<literal>-addr</literal>フラグは、
その後の(ハイフンでは始まらない)文字列がそれぞれ正規表現か、単なるメールアドレス
として解釈されるべきかを指定します。
</para>

<para>
これらのアドレスグループはオプションの<literal>-group</literal>
オプションを指定することで、
<link linkend="alias"><command>alias</command></link>,
<link linkend="lists"><command>lists</command></link>,
<link linkend="lists"><command>subscribe</command></link> と
<link linkend="alternates"><command>alternates</command></link>
コマンドによって暗黙的に作成することもできます。たとえば、
</para>

<screen>
alternates -group me address1 address2
alternates -group me -group work address3
</screen>

<para>
は、すべての自分のアドレスと、作業用アドレス<emphasis>address3</emphasis>のみを
含む<quote>work</quote>という名前のグループを含む<quote>me</quote>
と言う名前のグループを作ります。他にも多くの可能性がありますが、
これを使って、読むために、メーリングリストフォルダ中の自分のメッセージに
自動的にマークを付けるのに使ったり、仕事に関連したメッセージに特別な署名を
使ったりすることができます。
</para>

<para>
<command>ungroup</command>コマンドは、指定されたグループまたは複数のグループ
から、アドレスまたは正規表現を指定されたものを取り除くのに使います。
文法は<command>group</command>とよく似ていますが、特別な文字<literal>*</literal>
をグループのすべての内容を空にするのに使えます。すべてのアドレスと正規表現が
削除されたため、グループが空になるとすぐに、それは内部的にも削除されます
(すなわち、空のグループは存在しません)。グループから正規表現を削除するときは、
<command>group</command> コマンドまたは <literal>-group</literal> 引数で
正確に指定しなければなりません。
</para>

</sect1>

<sect1 id="alias">
<title>エイリアスの定義と使用</title>

<para>使用法:</para>

<cmdsynopsis>
<command>alias</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">address</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">address</replaceable>
</arg>

<command>unalias</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">key</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
通信相手のアドレスを覚たり、入力したりするのは、普段はとても面倒です。
Mutt は完全なアドレスにマップする短い文字列 <quote>aliases</quote>を
作成できます。
</para>

<note>
<para>
一つ以上のアドレスのエイリアスを作成したい場合、アドレスは
カンマ(<quote>,</quote>)で<emphasis>くくらなければなりません</emphasis>。
</para>
</note>

<para>
<command>alias</command>のオプション<literal>-group</literal>引数は
別名アドレスを、<emphasis>group</emphasis>という名前に追加します。
</para>

<para>
別名を追加するには以下のように行います。
</para>

<screen>
alias muttdude me@cs.hmc.edu (Michael Elkins)
alias theguys manny, moe, jack
</screen>

<para>
別名あるいは複数の別名(<quote>*</quote>はすべてを意味します)を削除するには
以下のように行います。
</para>

<screen>
unalias muttdude
unalias *
</screen>

<para>
他のメーラとは違い、Mutt は 別名を特別のファイルに定義する必要がありません。
<command>alias</command>コマンドは、
<link linkend="source"><command>source</command>d</link> などで読み込まれるファイル
と同じように、設定ファイル中であればどこにでも書けます。 したがって、
複数の別名ファイルを使うこともできますし、<literal>.muttrc</literal>の中にすべて
定義してしまうこともできます。
</para>

<para>
その一方、<link linkend="create-alias"><literal>&lt;create-alias&gt;</literal></link>
機能は、
<link linkend="alias-file">$alias_file</link>変数(<literal>~/.muttrc</literal>が
既定値)によって指定される一つのファイルしか使えません。
しかし、このファイルは特別扱いされるわけではありません。 というのも、Mutt はどの
ファイルにでも別名を追加できますし、 このファイルもきちんと
<link linkend="source"><command>source</command></link>しなければ
新規エイリアスが有効にならないのです。 
</para>

<example id="ex-alias-external">
<title>外部別名ファイルの設定例</title>
<screen>
source /usr/local/share/Mutt.aliases
source ~/.mail_aliases
set alias_file=~/.mail_aliases
</screen>
</example>

<para>
別名を使うためには、単に、<emphasis>To:</emphasis> や <emphasis>Cc:</emphasis>の
プロンプトでアドレスを入力するときに、 エイリアスを入力するだけです。
また、<link linkend="edit-headers">$edit_headers</link>変数を設定しておけば、
エディタでも適切なヘッダに別名をを入力できます。
</para>

<para>

さらに、種々のアドレス入力プロンプトにおいて、Tab 文字を使えば、一部だけ入力
した別名ら完全な別名に展開させることができます。合致するものが複数あると、
Mutt は合致した別名のメニューを出します。 別名の完全な一覧を表示させるには、
書きかけの別名がない状態で Tab を入力しなくてはなりません。例えばプロンプトの
最初や、アドレスが複数あることを示すカンマの後です。  
</para>

<para>
別名メニューでは、<literal>select-entry</literal> キー(既定値では
default: &lt;Return&gt;)で好きなだけ別名を選択してから、
<emphasis>exit</emphasis>キー(既定値は q)を使ってアドレスのプロンプトに戻れます。 
</para>

</sect1>

<sect1 id="bind">
<title>既定のキー割り当ての変更</title>

<para>使用法:</para>

<cmdsynopsis>
<command>bind</command>
<arg choice="plain">
<replaceable class="parameter">map</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">function</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドで既定のキー割り当て (キーを押したときに起動する処理)を
変更することができます。 
</para>

<para>
<emphasis>map</emphasis> specifies in which menu the binding belongs.
Multiple maps may be specified by separating them with commas (no
additional whitespace is allowed). The currently defined maps are:
<emphasis>map</emphasis>は、その割り当てがどのメニューのものなのかを指定します。
複数のマップをカンマで区切って指定することもできます(ただし空白を入れてはいけません)。
現状で定義されているマップは以下の通りです。
</para>

<anchor id="maps"/>
<variablelist>

<varlistentry>
<term>generic</term>
<listitem>
<para>
これは実際のメニューではなく、ページャとエディタ以外の全メニューにおける
最終候補となるものです。Mutt は、キーが実際のメニューで定義されていないとき、
この割り当てを使います。これによって、関数を複数のメニューのキーに 割り当てる
ことができますので、同じ効果を得るためにいくつも <command>bind</command> を
書かなくて済みます。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>alias</term>
<listitem>
<para>
別名メニューは、<literal>.muttrc</literal>に定義されている個人的な別名の一覧で
す。短い別名から完全なメールアドレスへの割り当て一覧です。 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>attach</term>
<listitem>
<para>
この添付ファイルメニューは、受信したメッセージの添付ファイルにアクセス
するのに使います。 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>browser</term>
<listitem>
<para>
browserは、ローカルのディレクトリ構造を閲覧するためにも使いますし、 受信メール
ボックスを一覧表示するためにも使います。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>editor</term>
<listitem>
<para>
editor はユーザがテキストデータを入力する一行エディタで、<literal>compose</literal>
メニューでの<emphasis>To</emphasis> 又は <emphasis>Subject</emphasis> プロンプトで
使います。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>index</term>
<listitem>
<para>
インデックスとは、メールボックスに含まれているメッセージの一覧です。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>compose</term>
<listitem>
<para>
compose メニューは、新規メッセージを送信するときに使われる画面のことです。 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>pager</term>
<listitem>
<para>
pager は、メッセージおよび添付ファイルのデータや ヘルプ一覧を表示するために
使われるモードのことです。 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>pgp</term>
<listitem>
<para>
PGP メニューは、送信メッセージの暗号化に使う OpenPGP 鍵を選択します。 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>smime</term>
<listitem>
<para>
smime メニューは、送信メッセージの暗号化に使う OpenSSL の証明書を
選択します。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>postpone</term>
<listitem>
<para>
延期メニューはインデックスメニューに似ていますが、作成して送信せず
次回まで保存しておいたようなメッセージを復元するときに使うものです。 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>query</term>
<listitem>
<para>
query メニューは<link linkend="query-command">$query_command</link>
から返された結果を表示するための browser です。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>mix</term>
<listitem>
<para>
mixmaster 画面は、送信メッセージの再送信オプションを選択するのに使います
(Mutt が Mixmaster をサポートするようにコンパイルされている場合)。
</para>
</listitem>
</varlistentry>
</variablelist>

<para>
<emphasis>key</emphasis>は割り当てたいキー(またはキーシーケンス)です。
制御文字を指定したい際は、<emphasis>\Cx</emphasis>と記述します。ここで、
<emphasis>x</emphasis>は制御文字に対応する英字です(たとえば、
control-A を指定したい場合は、<quote>\Ca</quote>とします)。
<emphasis>x</emphasis>の大文字小文字状態は<emphasis>\C</emphasis>と
同じように無視されるため、
<emphasis>\CA</emphasis>, <emphasis>\Ca</emphasis>,
<emphasis>\cA</emphasis> と<emphasis>\ca</emphasis>は皆同じです。
別の書き方としては、キーに割り当てるのに、<quote>\</quote>を先頭につけた
3桁の8進数字を指定する方法があります(たとえば、
<emphasis>\177</emphasis>は<emphasis>\c?</emphasis>と同じです)。
さらに、<emphasis>key</emphasis>は<xref linkend="tab-key-names"/>で
示されているシンボル名でもかまいません。
</para>

<table id="tab-key-names">
<title>キーのシンボル名</title>
<tgroup cols="2">
<thead>
<row><entry>シンボル名</entry><entry>意味</entry></row>
</thead>
<tbody>
<row><entry>\t</entry><entry>tab</entry></row>
<row><entry>&lt;tab&gt;</entry><entry>tab</entry></row>
<row><entry>&lt;backtab&gt;</entry><entry>backtab / shift-tab</entry></row>
<row><entry>\r</entry><entry>carriage return</entry></row>
<row><entry>\n</entry><entry>newline</entry></row>
<row><entry>\e</entry><entry>escape</entry></row>
<row><entry>&lt;esc&gt;</entry><entry>escape</entry></row>
<row><entry>&lt;up&gt;</entry><entry>上矢印</entry></row>
<row><entry>&lt;down&gt;</entry><entry>下矢印</entry></row>
<row><entry>&lt;left&gt;</entry><entry>左矢印</entry></row>
<row><entry>&lt;right&gt;</entry><entry>右矢印</entry></row>
<row><entry>&lt;pageup&gt;</entry><entry>Page Up</entry></row>
<row><entry>&lt;pagedown&gt;</entry><entry>Page Down</entry></row>
<row><entry>&lt;backspace&gt;</entry><entry>Backspace</entry></row>
<row><entry>&lt;delete&gt;</entry><entry>Delete</entry></row>
<row><entry>&lt;insert&gt;</entry><entry>Insert</entry></row>
<row><entry>&lt;enter&gt;</entry><entry>Enter</entry></row>
<row><entry>&lt;return&gt;</entry><entry>Return</entry></row>
<row><entry>&lt;home&gt;</entry><entry>Home</entry></row>
<row><entry>&lt;end&gt;</entry><entry>End</entry></row>
<row><entry>&lt;space&gt;</entry><entry>スペース</entry></row>
<row><entry>&lt;f1&gt;</entry><entry>ファンクションキー 1</entry></row>
<row><entry>&lt;f10&gt;</entry><entry>ファンクションキー 10</entry></row>
</tbody>
</tgroup>
</table>

<para>
<literal>&lt;what-key&gt;</literal>機能はキーボード上の他のキーのキーコードと
シンボル名を調べるのに使えます。この機能を実行すると、<literal>^G</literal>
が押されるまで、押されたキーの情報を表示します。
</para>

<para>
<emphasis>key</emphasis>は空白(<quote>&nbsp;</quote>)またはセミコロン
(<quote>;</quote>)がない限り引用符でくくる必要はありません。
</para>

<para>
<emphasis>function</emphasis>は、<emphasis>key</emphasis>が押された時の
動作を指定します。 関数すべての一覧は<link linkend="functions">reference</link>を
参照してください。<command>bind</command>は<emphasis>function</emphasis>が
大括弧なしで指定されていることを前提としていることに注意してください。
</para>

<para>
特別な機能<literal>&lt;noop&gt;</literal>は、そのキーシーケンスへの
割り当てをなくします。
</para>

</sect1>

<sect1 id="charset-hook">
<title>文字セットの別名定義</title>

<para>使用法:</para>

<cmdsynopsis>
<command>charset-hook</command>
<arg choice="plain">
<replaceable class="parameter">alias</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">charset</replaceable>
</arg>

<command>iconv-hook</command>
<arg choice="plain">
<replaceable class="parameter">charset</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">local-charset</replaceable>
</arg>
</cmdsynopsis>

<para>
<command>charset-hook</command>コマンドは文字セット用の別名を定義します。
これは、Mutt の知らない文字セット名が付いたメッセージを 正しく表示するために使えます。 
</para>

<para>
The <command>iconv-hook</command> command defines a system-specific name
for a character set.  This is helpful when your systems character
conversion library insists on using strange, system-specific names for
character sets.
<command>iconv-hook</command>コマンドは文字セットに対してシステム固有の名前を
定義します。これは、システムの文字変換ライブラリが、文字セットに、システム固有の
おかしな名前を使うよう主張するときの助けになります。 
</para>

</sect1>

<sect1 id="folder-hook">
<title>メールボックスに基づく変数の設定</title>

<para>使用法:</para>

<cmdsynopsis>
<command>folder-hook</command>
<arg choice="plain">
<replaceable class="parameter">[!]regexp</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>

<para>
多くの場合、どのメールボックスを読んでいるかに合わせて 設定を変更できれば
便利です。<command>folder-hook</command>コマンドは、どんな設定コマンドでも
実行できる手法を提供します。<emphasis>regexp</emphasis>は、メールボックス中で、
読み出す前に<emphasis>command</emphasis>を実行するものを指定する正規表現です。
メールボックスが複数の<command>folder-hook</command>に一致する場合は、
<literal>.muttrc</literal>中で出て来る順番に実行されます。 
</para>

<para>
正規表現のパラメータは、
<link linkend="shortcuts">mailbox shortcut</link>展開が
最初の文字に対して行われます。
詳細は<xref linkend="mailbox-hook"/>を参照してください。
</para>

<note>
<para>
パターンの最初に、<link linkend="spoolfile">$spoolfile</link>への
ショートカットとして<quote>!</quote>を使うならば、 正規表現の否定演算子
<emphasis>not</emphasis>と区別するために、シングルかダブルの引用符で
くくらなければなりません。
</para>
</note>

<note>
<para>
Settings are <emphasis>not</emphasis> restored when you leave the
mailbox.  For example, a command action to perform is to change the
sorting method based upon the mailbox being read:
設定はメールボックスを出るときに復帰<emphasis>しません</emphasis>。
たとえば、実行したいコマンド動作が、読み出すメールボックスに合わせて
整列方法を変更することだとします。 
</para>

<screen>
folder-hook mutt "set sort=threads"</screen>

<para>
しかし、異なったメールボックスを読み出す時に、整列方法が以前の値に復帰する
わけではありません。<emphasis>既定の</emphasis>コマンドを指定するには、
<command>folder-hook</command>が設定ファイル中での順に評価されるので、
フォルダ毎に値を調節する前に、パターン<quote>.</quote>を使います。
</para>
</note>

<note>
<para>
キーボードバッファはすべてのホックが実行されたあとまで処理されません。
複数の<link linkend="push">push</link> 又は
<link linkend="exec">exec</link>コマンドは逆順で実行されることになります。
</para>
</note>

<para>
以下の例は、すべてのフォルダに対して<literal>date-sent</literal>
を行うように<link linkend="sort">sort</link>変数を設定しますが、
名前に <quote>mutt</quote> を含むすべてのフォルダの
<literal>threads</literal>を設定します。
</para>

<example id="ex-folder-sorting">
<title>メールボックス名ベースでの整列方式の設定</title>
<screen>
folder-hook . "set sort=date-sent"
folder-hook mutt "set sort=threads"
</screen>
</example>

</sect1>

<sect1 id="macro">
<title>キーボードマクロ</title>

<para>使用例:</para>

<cmdsynopsis>
<command>macro</command>
<arg choice="plain">
<replaceable class="parameter">menu</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">sequence</replaceable>
</arg>
<arg choice="opt">
<replaceable class="parameter">description</replaceable>
</arg>
</cmdsynopsis>

<para>
マクロは、キーひとつで連続作業を実行したいときに便利です。<emphasis>menu</emphasis>で
<emphasis>key</emphasis>を押すと、Mutt はキーを<emphasis>順番に</emphasis>
押したのと同じ動作をします。ですから、よく連続して入力するコマンドがあれば、
マクロを作成してキーひとつ又はごく少ないキー入力で、そのコマンドを実行する
ようにできます。
</para>

<para>
<emphasis>menu</emphasis>はマクロを割り当てる<link linkend="maps">map</link>です。
複数のマップは、カンマによって複数のメニューマップに分割して指定できます。
ただし、メニューとカンマの間に空白を使うことはできません。 
</para>

<para>
<emphasis>key</emphasis>と<emphasis>sequence</emphasis>は、いくつか追加が
ありますが、<link linkend="bind">key bindings</link>と同じルールで展開されます。
第一点は、<emphasis>sequence</emphasis>における制御文字を<emphasis>^x</emphasis>
とも指定できることです。サーカムフレックス(<quote>^</quote>)を使うためには
<emphasis>^^</emphasis>とする必要があります。 第二に、<emphasis>up</emphasis>や
機能を直接呼び出すような特定のキーを指定するためには、
<emphasis>&lt;key name&gt;</emphasis>と<emphasis>&lt;function name&gt;</emphasis>
というフォーマットを使います。キー名の一覧は、
<link linkend="bind">key bindings</link>を参照してください。
機能の一覧は<link linkend="functions">reference</link>にあります。
</para>

<para>
マクロに関数名を直接使う利点は、それによって 動作時のキー割り当てと関係なく
マクロが動くので、特定のキー定義をしてあるユーザでなくとも使えるということです。
これでマクロは堅固かつ(ポータブルになり、何人かで使うファイル (例えばシステムの
Muttrc) の中でマクロを定義するのも容易になります。
</para>

<para>
必須ではありませんが、説明文を<emphasis>sequence</emphasis>の後ろに指定できます。
これはヘルプ画面に表示されます。 
</para>

<note>
<para>
ヘルプ画面に表示されるマクロ定義 (定義されていればですが) は
自動的に画面の幅に切り取られてしまい、折り返し表示はされないことに
注意してください。
</para>
</note>

</sect1>

<sect1 id="color">
<title>色と白黒の画面属性の使用</title>

<para>使用法:</para>

<cmdsynopsis>
<command>color</command>
<arg choice="plain">
<replaceable class="parameter">object</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>

<command>color</command>
<group choice="req">
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>

<command>color</command>
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>

<command>color</command>
<arg choice="plain">
<option>compose</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">composeobject</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>

<command>uncolor</command>
<group choice="req">
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
端末がカラー表示をサポートしていれば、独自の色構成を創作して 一味ちがう
Mutt にすることができます。ある対象 (情報の型) の色を定義するには 前景色と
背景色の<emphasis>両方を</emphasis>指定しなければなりません (前景だけや
背景だけを指定することは不可能です)。 
</para>

<para>
<emphasis>header</emphasis>と<emphasis>body</emphasis>は
メッセージのヘッダ/本文で<emphasis><link linkend="regexp">regexp</link></emphasis>
に一致し、<emphasis>index</emphasis>は、メッセージインデックス中の
<emphasis><link linkend="patterns">pattern</link></emphasis>と一致します。
IMAP サーバサイドの検索(=b, =B, =h)はカラーインデックスパターン用には
サポートされていないことに注意してください。
</para>

<para>
<link linkend="header-color-partial">$header_color_partial</link>が未設定の
場合(既定値)、<emphasis>regexp</emphasis>に一致する<emphasis>header</emphasis>は、
すべてのヘッダに適用される色となります。設定されている場合は、
<emphasis>regexp</emphasis>に正確に一致するテキストのみに、色が適用されます。
</para>

<para>
<emphasis>object</emphasis> は以下のうちのどれかです:
</para>

<itemizedlist>
<listitem><para>attachment</para></listitem>
<listitem><para>bold (メッセージの本文の太字強調部分)</para></listitem>
<listitem><para>error (Mutt が出力するエラーメッセージ)</para></listitem>
<listitem><para>hdrdefault (ペイジャにおけるメッセージヘッダの既定の色)</para></listitem>
<listitem><para>indicator (メニューで現在の項目を指し示す矢印もしくはバー)</para></listitem>
<listitem><para>markers (ページャで折り返された行の行頭にある <quote>+</quote> マーカ)</para></listitem>
<listitem><para>message (informational messages)</para></listitem>
<listitem><para>normal</para></listitem>
<listitem><para>prompt</para></listitem>
<listitem><para>quoted (メッセージの本文で<link linkend="quote-regexp">$quote_regexp</link>に一致す
る文)</para></listitem>
<listitem><para>quoted1, quoted2, ..., quoted<emphasis>N</emphasis> (引用の階層レベル)</para></listitem>
<listitem><para>search (ページャでの検索語句の強調)</para></listitem>
<listitem><para>signature</para></listitem>
<listitem><para>status (メールボックスやメッセージに関する情報を表示するモード行)</para></listitem>
<listitem><para>tilde (ページャの空行を埋める <quote>~</quote>の部分)</para></listitem>
<listitem><para>tree (メッセージインデックスと添付ファイルメニューで描かれるスレッドツリー)</para></listitem>
<listitem><para>下線(メッセージ本文の下線つきパターンを強調)</para></listitem>
</itemizedlist>

<para>
<emphasis>composeobject</emphasis> は以下のうちのどれかです:
</para>

<itemizedlist>
<listitem><para>header</para></listitem>
<listitem><para>security_encrypt</para></listitem>
<listitem><para>security_sign</para></listitem>
<listitem><para>security_both</para></listitem>
<listitem><para>security_none</para></listitem>
</itemizedlist>

<para>
<emphasis>attribute</emphasis> には以下のうちどれかが後に付きます:
</para>

<itemizedlist>
<listitem><para>none</para></listitem>
<listitem><para>bold</para></listitem>
<listitem><para>underline</para></listitem>
<listitem><para>reverse</para></listitem>
<listitem><para>standout</para></listitem>
</itemizedlist>

<para>
<emphasis>foreground</emphasis> and <emphasis>background</emphasis> には
以下のうちどれかが後に付きます:
</para>

<itemizedlist>
<listitem><para>white</para></listitem>
<listitem><para>black</para></listitem>
<listitem><para>green</para></listitem>
<listitem><para>magenta</para></listitem>
<listitem><para>blue</para></listitem>
<listitem><para>cyan</para></listitem>
<listitem><para>yellow</para></listitem>
<listitem><para>red</para></listitem>
<listitem><para>default</para></listitem>
<listitem><para>color<emphasis>x</emphasis></para>
</listitem>
</itemizedlist>

<para>
色を太字又は細字(ライト)にするため、色の名前にオプションで
<literal>bright</literal>または<literal>light</literal>
(たとえば<literal>brightred</literal>)を付けることができます。
正確な動作は端末とその設定によって異なります。特に、太字/細字の違いと
そのような背景色は、環境変数<literal>$TERM</literal>で指定された、
少なくとも、16&nbsp;色に設定された端末でのみ有効です。
</para>

<para>
端末がそれらをサポートする場合、特別なキーワード<emphasis>default</emphasis>を、
透明色として使えます。また、<emphasis>brightdefault</emphasis>と言う値も有効です。
Mutt が<emphasis>S-Lang</emphasis>ライブラリにリンクされていれば、透明色が
正しく動作するように<literal>$COLORFGBG</literal>環境変数を端末の既定色として
設定しておく必要もあります。たとえば、(Bourne 系シェルの場合)以下のようになります。
</para>

<screen>
set COLORFGBG="green;black"
export COLORFGBG
</screen>

<note>
<para>
<emphasis>S-Lang</emphasis>では、この値を設定する時に、
<emphasis>white</emphasis> と <emphasis>yellow</emphasis> の代わりに
<emphasis>lightgray</emphasis> と <emphasis>brown</emphasis>という
キーワードを使う必要があります。 
</para>
</note>

<note>
<para>
<command>uncolor</command>コマンドは、index、ヘッダと本文のみに適用できます。
これは項目をリストから消去します。消去するには<emphasis>必ず</emphasis>
<command>color</command>コマンドで指定したのと同じパターンを指定しなければ
なりません。<quote>*</quote>特別な印で、 color index のリストを全項目消去
することを意味します。 
</para>
</note>

<para>
Mutt は<emphasis>color0</emphasis>,<emphasis>color1</emphasis>, ...,
<emphasis>color</emphasis><emphasis>N-1</emphasis>
(<emphasis>N</emphasis>は端末でサポートされている色の数) といったキーワードも
認識できます。これは、画面の色を (例えばxterm の<emphasis>color2</emphasis>に
関連付けてある色を変更したりして) 割り当て直したときに有用です。
色名が通常の意味を失ってしまうからです。
</para>

<anchor id="mono"/>
<para>
端末がカラー表示をサポートしていなくとも、画面属性を<quote>mono</quote>コマンドを
使う事で変更することが可能です。使用法は以下の通りです:
</para>

<cmdsynopsis>
<command>mono</command>
<arg choice="plain">
<replaceable class="parameter">object</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>

<command>mono</command>
<group choice="req">
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>

<command>mono</command>
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>

<command>mono</command>
<arg choice="plain">
<option>compose</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">composeobject</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>

<command>unmono</command>
<group choice="req">
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
<emphasis>object</emphasis>, <emphasis>composeobject</emphasis>と
<emphasis>attribute</emphasis>, see the <command>color</command>コマンド用です。
</para>
</sect1>

<sect1 id="msg-hdr-display">
<title>メッセージヘッダの表示</title>

<sect2 id="hdr-folding">
<title>ヘッダ表示</title>

<para>
ページャ中でメッセージを表示する時、Mutt は<link linkend="wrap">$wrap</link>カラムで、
長いヘッダを折り返します。どこでどのように折りたたむかについての厳密な
ルールはありますが、Mutt は常時可読性をよくするために、タブを使って
ヘッダを折りたたみます(送信時にはこれは適用されず、Mutt は標準に準拠した
折りたたみを実装しようとします)。
</para>

</sect2>

<sect2 id="ignore">
<title>ヘッダの選択</title>

<para>使用法:</para>

<cmdsynopsis>
<command>ignore</command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>

<command>unignore</command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
多くのメッセージには、自動処理システムによって付加された、すなわち、
画面に表示させても役に立つとは思えないようなヘッダフィールドがたくさん付いています。
このコマンドで、普段は見ないでいたいヘッダフィールドを指定することができます。 
</para>

<para>
ヘッダフィールド名全体を指定する必要はありません。 例えば
<quote>ignore content-</quote>は、<quote>content-</quote>で始まるすべてのヘッダを
無視します。
</para>

<para>
以前に追加した項目をリストから外すには、<quote>unignore</quote>コマンドを使用します。
Mutt は指定されたパターンでヘッダを表示します。たとえば、<quote>ignore x-</quote>を
指定すると、 <quote>unignore x-mailer</quote>とすることができます。
</para>

<para>
<quote>unignore *</quote>は、無視リストから全項目を消去します。
</para>

<example id="ex-header-weeding">
<title>ヘッダの間引き</title>
<screen>
<emphasis role="comment"># Sven's draconian header weeding</emphasis>
ignore *
unignore from date subject to cc
unignore organization organisation x-mailer: x-newsreader: x-mailing-list:
unignore posted-to:
</screen>
</example>

</sect2>

<sect2 id="hdr-order">
<title>表示されるヘッダの順番</title>

<para>使用法:</para>

<cmdsynopsis>
<command>hdr_order</command>
<arg choice="plain">
<replaceable class="parameter">header</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">header</replaceable>
</arg>

<command>unhdr_order</command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>header</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
<command>hdr_order</command>コマンドを使うと、メッセージを表示する時、
Mutt がヘッダを表示する時の順番を指定することができます。
</para>

<para>
<quote><command>unhdr_order</command> *</quote>は、順番リストから以前に定義した
すべてのヘッダを削除しますので、システム全体のスタートアップファイルで
設定したヘッダ順序効果がなくなります。
</para>

<example id="ex-hdr-order">
<title>ヘッダ表示順の設定</title>
<screen>
hdr_order From Date: From: To: Cc: Subject:
</screen>
</example>

</sect2>
</sect1>

<sect1 id="alternates">
<title>代替アドレス</title>

<para>使用法:</para>

<cmdsynopsis>
<command>alternates</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<arg choice="plain">
<replaceable>regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>regexp</replaceable>
</arg>

<command>unalternates</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>regexp</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
種々の機能において、Mutt は自分で送信したメッセージか、他人から受信した
メッセージかに応じて違う扱い方をします。たとえば、自分が別の相手へ送信した
メッセージに返信を書くとき、 Mutt は自動的にその元メッセージの宛先へ返事を
送るよう提案します。 多くの場合、自分に返事を書くなどということは意味をなさ
ないからです(<link linkend="reply-to">$reply_to</link>を参照)。
</para>

<para>
多くのユーザは複数の異なるアドレスでメールを受信します。Mutt の機能をフル
活用するには、どのアドレスで自分がメールを 受信するのかを Mutt が理解できる
ようにしなくてはなりません。このことが、<command>alternates</command>コマンドを
使う目的です。このコマンドは正規表現のリストを受け取り、それらを使って、 自分が
メールを受信するアドレスを識別します。 
</para>

<para>
厳密な比較ではなく、アドレスは正規表現を使って照合されるので、ミスマッチを
防ぐため、アドレスはできるだけ正確に指定する必要があります。
</para>

<screen>
alternates user@example
</screen>

<para>
Mutt は<quote><literal>some-user@example</literal></quote>が使うアドレスと
想定しますが、これは望ましくないかもしれません。解決方法として、そのような
場合には、以下のように指定します:
</para>

<screen>
alternates '^user@example$'
</screen>

<para>
<literal>-group</literal>フラグは、名前付きのグループに、すべての後続の正規表現を
追加します。
</para>

<para>
<command>unalternates</command>コマンドを使うと、<command>alternates</command>の
パターンに例外を作ることができます。あるアドレスが<command>alternates</command>
に一致していて、それを自分からのではないことにしたい場合には、
<command>unalternates</command>コマンド配下で、より正確なパターンをリストアップ
できます。
</para>

<para>
<command>alternates</command>リストから正規表現を削除するには、完全に同一の
<emphasis>regexp</emphasis>を<command>unalternates</command>で指定します。
同様に、ある<command>alternates</command>コマンドの<emphasis>regexp</emphasis>が
<command>unalternates</command>リストのエントリに一致したならば、
<command>unalternates</command>エントリは削除されます。
<command>unalternates</command>の<emphasis>regexp</emphasis>が<quote>*</quote>で
あれば、<command>alternates</command>の<emphasis>すべてのエントリ</emphasis>が
削除されます。
</para>

</sect1>

<sect1 id="lists">
<title>メーリングリスト</title>

<anchor id="subscribe"/>
<para>使用法:</para>

<cmdsynopsis>
<command>lists</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>

<command>unlists</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</group>

<command>subscribe</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>

<command>unsubscribe</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
Mutt は <link linkend="using-lists">メーリングリストを扱う</link>
ための、便利な機能がいくつかあります。その益にあずかるには、 どのアドレス
がメーリングリストに属するのか、 そして自分がどのメーリングリストを講読
しているのかを指定しなければなりません。Mutt はまた、自動的に検出した
への限定的なサポートもしています。これは、<command>lists</command>
コマンド(グループ機能を除く)で、メーリングリストのアドレスを指定するのと
同じ効果がある、共通の<literal>List-Post:</literal>ヘッダ中の
<literal>mailto:</literal>リンクを走査することで、サポートします。
一度これを行うと、
<link linkend="list-reply"><literal>&lt;list-reply&gt;</literal></link>
機能はすべての既知メーリングリストに対して動作するようになります。
そのうえ、購読しているメーリングリストにメッセージを送るときで、
<link linkend="followup-to">$followup_to</link>が設定されている場合は、
Mutt は Mail-Followup-To ヘッダを付与します。メーリングリストの購読を
中止する場合、これには自分のアドレスが含まれるので、返信のコピーを確実に受け取れる
ことができます。購読済みのメーリングリストでは、返信を自分のアドレスにも送ること
のないよう、他の人のメールユーザエージェントに伝えます。 
</para>

<note>
<para>
Mail-Followup-To header は、すべてのメールユーザエージェントでサポートされて
いない、非標準の拡張です。これを追加しても、メーリングリストのメッセージが
自分宛てに Cc: で来るのを防ぐ 防弾チョッキにはなりません。Mail-Followup-To の
生成は、設定ファイル中の<link linkend="followup-to">$followup_to</link> 変数に
よって制御されるのですが、一部のメーリングリストでは、返信時にCcを送るのが
一般的だからです(これは、メーリングリストへの返信と言うよりは、グループ
へ、だからです)。
</para>
</note>

<para>
さらに正確に言うと、Mutt が管理しているのは、 既知および購読中のメーリングリストの
アドレスを表すパターンのリストです。購読しているメーリングリストはすべて
既知になります。あるメーリングリストを既知にするには、<command>list</command>
コマンドを使います。購読中にするには、<command>subscribe</command>
コマンドを使います。
</para>

<para>
どちらのコマンドにも正規表現を使えます。例えば、Debian のバグトラッキング
システムにおけるバグレポートのアドレスに送信されたすべてのメッセージを、
メーリングリストのメールであるということにするには、たとえば、
</para>

<screen>
subscribe [0-9]+.*@bugs.debian.org</screen>

<para>
とします。くの場合は、単にリストのメールアドレスの一部分を指定するだけで十分です。
</para>

<para>
十分な長さでアドレスを指定して、あいまいさをなくしてください。 たとえば、
Mutt のメーリングリストを購読していれば、<literal>mutt-users@mutt.org</literal>
へのメールを受信することになります。 それで、このアドレスがメーリングリスト
だということを Mutt に教えるには、 初期化ファイルに
<literal>lists mutt-users@</literal>を追加します。これを購読していることを
Mutt に教えるには、代わりに
<literal><command>subscribe</command>mutt-users</literal>を追加します。
もし、<literal>mutt-users@example.com</literal>というアドレスの人からメールを
受診することがあるならば、
<literal><command>lists</command> ^mutt-users@mutt\\.org$</literal> か
<literal><command>subscribe</command> ^mutt-users@mutt\\.org$</literal>
を使って、実際にリストから来たメールにだけ一致させることができます。 
</para>

<para>
<literal>-group</literal>フラグは、指定されたアドレスリストに追加する
のに加えて、後続のすべての正規表現を
名前付き<link linkend="addrgroup">address group</link>に追加します。
</para>

<para>
<quote>unlists</quote>コマンドは、既知と購読中のメーリングリストのリストから
項目を消去するために使います。項目をすべて消去するには
<quote>unlists *</quote>を使ってください。
</para>

<para>
メーリングリストを、購読中のメーリングリストのリストからは消去しつつ、既知の
メーリングリストのリストに残しておくためには、<command>unsubscribe</command>
を使ってください。
</para>

</sect1>

<sect1 id="mbox-hook">
<title>複数のスプールメールボックスの使用</title>

<para>使用法:</para>

<cmdsynopsis>
<command>mbox-hook</command>
<arg choice="plain">
<replaceable class="parameter">[!]regexp</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドは、終了時やフォルダ変更時に、既読メッセージを、特定のメールボックス
から違うメールボックスへと、自動で移動させるのに使います。<emphasis>regexp</emphasis>は
<quote>spool</quote>メールボックスとして扱うメールボックスを指定する正規表現で、
<emphasis>mailbox</emphasis>は、既読時にメールをどこにセーブすべきかを指定します。 
</para>

<para>
regexp パラメータは、最初の文字上で展開が実行される
<link linkend="shortcuts">mailbox shortcut</link>機能があります。
詳しくは、<xref linkend="mailbox-hook"/>を参照してください。
</para>

<para>
mbox-hooks の実行は、<link linkend="move">$move</link> 変数に依存する
ことに注意してください。<quote>no</quote>(既定値)に設定すると、
mbox-hooks は実行されません。
</para>

<para>
一部の<emphasis>hook</emphasis>コマンドと異なり、<emphasis>最初に</emphasis>
パターンだけが 使われます (既読メールを一度に複数のメールボックスへセーブすることは
できません)。 
</para>

</sect1>

<sect1 id="mailboxes">
<title>受信メールのモニタ</title>

<para>使用法:</para>

<cmdsynopsis>
<command>mailboxes</command>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>

<command>unmailboxes</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
このコマンドは、メールを受信し、定期的に新しいメールが来ているかをチェックする
フォルダを指定します。
</para>

<para>
<emphasis>folder</emphasis>はローカルファイルかディレクトリのどちらかです
(Mbox/Mmdf 又は Maildir/Mh)。Mutt が POP 又は IMAP をサポートするように
コンパイルされている場合、<emphasis>folder</emphasis>には POP/IMAP フォルダ URLも
使えます。URL の文法は、<xref linkend="url-syntax"/> にあり、POP と
IMAP はそれぞれ <xref linkend="pop"/>と<xref linkend="imap"/> に説明があります。
</para>

<para>
Mutt は(おそらく多くの)フォルダとその中の新しいメールを扱うための、多くの
高度な機能を提供しています。詳細は<xref linkend="new-mail"/>を参照してください
(どのような状況でどのくらいの頻度で Mutt が新しいメールをチェックするかを
含みます)。
</para>

<para>
<quote>unmailboxes</quote>はメールを受信したフォルダリストからトークンを
削除するのに使います。<quote>unmailboxes *</quote>を使うと、すべてのトークンを
削除します。
</para>

<note>
<para>
<command>mailboxes</command>コマンド中のフォルダは、コマンドが実行される時に
解決されるので、<link linkend="shortcuts">shortcut characters</link>
(例えば<quote>=</quote>文字と<quote>!</quote>のようなもの)が名前に含まれている
場合、それらの文字(like <link linkend="folder">$folder</link>と
<link linkend="spoolfile">$spoolfile</link> のようなもの)に影響する
変数定義は、<command>mailboxes</command>コマンドの前で定義する必要があります。
それらのショートカットが使われていない場合、そうしないと Mutt は Mutt が起動した
ディレクトリからの相対パスを探そうとするので、ローカルパスは絶対パスにする
必要があります。
</para>
</note>

</sect1>

<sect1 id="my-hdr">
<title>ユーザ定義のヘッダ</title>

<para>使用法:</para>

<cmdsynopsis>
<command>my_hdr</command>
<arg choice="plain">
<replaceable class="parameter">string</replaceable>
</arg>

<command>unmy_hdr</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">field</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
<command>my_hdr</command>コマンドで、すべてのメールに付加され、
<link linkend="edit-headers">$edit_headers</link> が設定されている場合、
エディタ中に表示される自分独自のヘッダフィールドを定義できます。

</para>

<para>
たとえば、<quote>Organization:</quote>ヘッダを送信メッセージすべてに付与したい
場合は、<literal>.muttrc</literal>に、<xref linkend="ex-my-hdr"/> で
示されるようなコマンドを記述できます。
</para>

<example id="ex-my-hdr">
<title>カスタムヘッダの定義</title>
<screen>
my_hdr Organization: A Really Big Company, Anytown, USA
</screen>
</example>

<note>
<para>
空白文字は、キーワードとコロン(<quote>:</quote>)の間には
<emphasis>置けません</emphasis>。電子メールの標準(RFC2822)では
空白をそこに置くのは不正であり、Mutt もこのルールを強制します。
</para>
</note>

<para>
もしも単一のメッセージにヘッダフィールドを追加したいならば、
<link linkend="edit-headers">$edit_headers</link>変数を定義するか、
<literal>&lt;edit-headers&gt;</literal>機能(既定値: <quote>E</quote>)
を編集メニューで使う事のどちらかで、メッセージの本文と一緒にヘッダを編集できます。
</para>

<para>
ユーザ定義のヘッダフィールドを消去するには、<command>unmy_hdr</command>を
使ってください。アスタリスク(<quote>*</quote>)を指定してすべてのヘッダ
フィールドを消去することもできますし、 消去するフィールドを指定することも
できます。例えば、<quote>To</quote> と <quote>Cc</quote> ヘッダフィールドを
すべて削除するには、以下のようにします。
</para>

<screen>
unmy_hdr to cc
</screen>

</sect1>

<sect1 id="save-hook">
<title>既定のセーブ用メールボックスの指定</title>

<para>使用法:</para>

<cmdsynopsis>
<command>save-hook</command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドは、メッセージをセーブするときに使うファイル名の既定値を上書き
するのに使います。<emphasis>mailbox</emphasis>は<emphasis>pattern</emphasis>に
メッセージが一致する時に使われます。正確なフォーマットの情報については、
<xref linkend="pattern-hook"/> を参照してください。
</para>

<para>
<emphasis>mailbox</emphasis> after it was expanded.
より柔軟性が高くて、よい既定値を提供するため、Mutt は、
<link linkend="index-format">$index_format</link>の展開結果を
展開したあとの<emphasis>mailbox</emphasis> に適用します。
</para>

<example id="ex-save-hook-exando">
<title><command>save-hook</command>中で %-expandos を使う</title>
<screen>
<emphasis role="comment"># default: save all to ~/Mail/&lt;author name&gt;</emphasis>
save-hook . ~/Mail/%F

<emphasis role="comment"># save from me@turing.cs.hmc.edu and me@cs.hmc.edu to $folder/elkins</emphasis>
save-hook me@(turing\\.)?cs\\.hmc\\.edu$ +elkins

<emphasis role="comment"># save from aol.com to $folder/spam</emphasis>
save-hook aol\\.com$ +spam
</screen>
</example>

<para>
<link linkend="fcc-save-hook"><command>fcc-save-hook</command></link>
コマンドも参照してください。
</para>

</sect1>

<sect1 id="fcc-hook">
<title>編集時に既定の Fcc: Mailbox を指定</title>

<para>使用法:</para>

<cmdsynopsis>
<command>fcc-hook</command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドは送信メッセージを<link linkend="record">$record</link>以外の
メールボックスに保存するために使います。Mutt はまず、メッセージ宛先リストの中で
<emphasis>pattern</emphasis>を検索して、最初に合致したものの
<emphasis>mailbox</emphasis>を 既定の Fcc: メールボックスとして使います。
一致するものが見付からなければ、メッセージは<link linkend="record">$record</link> 
メールボックスにセーブされます。
</para>

<para>
より柔軟性が高くて、よい既定値を提供するため、Mutt は、
<link linkend="index-format">$index_format</link>の展開結果を
展開したあとの<emphasis>mailbox</emphasis> に適用します。
</para>

<para>
正確なフォーマットの情報については、
<xref linkend="pattern-hook"/> を参照してください。
</para>

<screen>fcc-hook [@.]aol\\.com$ +spammers</screen>

<para>
これは、既定で aol.com ドメインに送られるすべてのメッセージのコピーを
`+spammers' メールボックスにセーブします。
<link linkend="fcc-save-hook"><command>fcc-save-hook</command></link>
コマンドも参照してください。
</para>

</sect1>

<sect1 id="fcc-save-hook">
<title>既定のセーブファイル名と既定の Fcc: メールボックスを同時に指定</title>

<para>Usage:</para>

<cmdsynopsis>
<command>fcc-save-hook</command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドはショートカットであり、同じ引数で
<link linkend="fcc-hook"><command>fcc-hook</command></link> と
<link linkend="save-hook"><command>save-hook</command></link>
を両方とも実行するのと等価です。また、
<link linkend="index-format">$index_format</link>による
<emphasis>mailbox</emphasis>の %-expansion を含みます。
</para>

</sect1>

<sect1 id="send-hook">
<title>メッセージの宛先による設定の変更</title>

<anchor id="reply-hook"/>
<anchor id="send2-hook"/>

<para>使用法:</para>

<cmdsynopsis>
<command>reply-hook</command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>

<command>send-hook</command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>

<command>send2-hook</command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>

<para>
これらのコマンドは、メッセージの宛先に基づいて任意のコマンドを実行するのに
使います。<emphasis>pattern</emphasis>はメッセージに一致するのに使われます。
<emphasis>pattern</emphasis>が一致した時のコマンドの実行についての詳細は
<xref linkend="pattern-hook"/> を参照してください。
</para>

<para>
<command>reply-hook</command>は<emphasis>送信する</emphasis>メッセージの
代わりに、<emphasis>返信する</emphasis>メッセージに対して一致します。
<command>send-hook</command>は<emphasis>新規</emphasis>と<emphasis>返信</emphasis>
両方のすべてのメッセージに対して一致します。
</para>

<note>
<para>
<command>reply-hook</command>は、ユーザの設定ファイル中の順番には
<emphasis>関係なく</emphasis>、<command>send-hook</command>の<emphasis>前に</emphasis>
一致します。しかし、返信時に、<command>reply-hook</command>がいつ実行されたを
<command>send-hook</command>中でパターン <literal>'! ~Q'</literal>
(<emphasis>返信しない</emphasis>、<xref linkend="pattern-hook"/>を参照)を
使う事によって<command>send-hook</command>を抑制することができます。
</para>
</note>

<para>
<command>send2-hook</command>はメッセージが変更されるたびに実行されます。
すなわち、編集したか、編集メニューで宛先や題名を変更したときです。
<command>send2-hook</command>は<command>send-hook</command>のあとに実行されるので、
たとえば、<link linkend="sendmail">$sendmail</link>変数のようなパラメータを、
メッセージの送信アドレスに応じたものとするように設定するのに使えます。
</para>

<para>
<command>send-hook</command>または<command>reply-hook</command> の各タイプとも、
複数の一致が発生した場合、コマンドは<literal>.muttrc</literal>(のそのタイプの
hook)に記載されている順で実行されます。
</para>

<para>
例: <literal><command>send-hook</command> mutt
"<command>set</command> mime_forward signature=''"</literal>
</para>

<para>
このコマンドの別の典型的な使い方は、<link linkend="attribution">$attribution</link>、
<link linkend="attribution-locale">$attribution_locale</link>と
<link linkend="signature">$signature</link>変数を、
宛先に応じて属性と署名の言語を変更するために使うということがあります。

</para>

<note>
<para>
<command>send-hook</command>は初期受信者リストを取得したあとに1回だけ実行されます。
これは、保存された(訳注:postponed)ドラフトを復帰した時には実行されません。
返信またはメッセージの編集後に追加された受信者は、
<command>send-hook</command>では何も実行されません。これは、
<link linkend="autoedit">$autoedit</link>が設定された時と似ています
(受信者リストが空のように)。さらに、受信者ヘッダやメッセージの題名を修正する
<link linkend="my-hdr"><command>my_hdr</command></link>コマンドは、
<command>send-hook</command>から実行された時には、現在のメッセージには何の影響も
与えないことに注意してください。
</para>
</note>

</sect1>

<sect1 id="message-hook">
<title>メッセージ整形前に設定を変更する</title>

<para>使用法:</para>

<cmdsynopsis>
<command>message-hook</command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドを使って、メッセージの閲覧や整形の前に、そのメッセージに関する情報に
基づいて任意の設定コマンドを実行できます。 表示しようとしているメッセージに
<emphasis>pattern</emphasis>が一致していれば<emphasis>command</emphasis>が実行されます。
複数一致した場合は、<literal>.muttrc</literal>に記載されている順に
コマンドが実行されます。
</para>

<para>
<emphasis>pattern</emphasis>の正確なフォーマットについては<xref linkend="pattern-hook"/>
を参照してください。
</para>

<para>
例:
</para>

<screen>
message-hook ~A 'set pager=builtin'
message-hook '~f freshmeat-news' 'set pager="less \"+/^  subject: .*\""'
</screen>

</sect1>

<sect1 id="crypt-hook">
<title>受信者の暗号鍵の選択</title>

<para>Usage:</para>

<cmdsynopsis>
<command>crypt-hook</command>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">keyid</replaceable>
</arg>
</cmdsynopsis>

<para>
PGP/GnuPG 又は OpenSSL でメッセージを暗号化する時、
送信先のアドレスから受信者の公開鍵が推測できない場合や、何らかの理由で、
Mutt が通常使う鍵をオーバライドする必要がある場合には、指定された電子メール
アドレスに特定のキーを結び付けたいでしょう。<command>crypt-hook</command>
コマンドは、特定の宛先へのメッセージを暗号化するときに使う公開鍵の ID を指定する
手段を提供するものです。同じ regexp を 複数の crypt-hooks で使う事ができます。
複数の crypt-hooks に一致する場合は、受信者に対して複数の keyid を使用することに
なります。キーの選択中、Mutt は、どの crypt-hook で使うかを確認してきます
(<link linkend="crypt-confirmhook">$crypt_confirmhook</link> が設定されていない限り)。
受信者に対するすべての crypt-hooks が指定されない場合、Mutt は鍵選択の代わりに、
もとの受信者アドレスを使います。
</para>

<para>
ここでは、広い意味で<emphasis>keyid</emphasis>と言っています。数字の鍵 ID や
フィンガープリントを入れることもできますし、メールアドレスも使えます。本名でも
構いません。
</para>

</sect1>

<sect1 id="index-format-hook">
<title>パターンを使った $index_format の動的変更</title>

<para>使用法:</para>

<cmdsynopsis>
<command>index-format-hook</command>
<arg choice="plain">
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">format-string</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドは、現在のメッセージに対するパターンマッチングを基にして、
動的に、<link  linkend="index-format">$index_format</link>にフォーマット
文字列を挟み込むのに使います。
</para>

<para>
<link linkend="index-format">$index_format</link>は、
プレースフォルダとして指定した<emphasis>%@name@</emphasis>に
展開されます。同じ<emphasis>name</emphasis>を持つ Index-format-hooks は、
現在のメッセージに対して
<link linkend="patterns"><emphasis>pattern</emphasis></link>を使う事で、
一致します。比較は .muttrc 中で指定された順に一致し、最初に一致したものが
使われます。hook の<emphasis>format-string</emphasis>が次に置換されて評価されます。
</para>

<para>
最初に一致したものが使われるので、最後の hook として、すべてに一致する
<emphasis>~A</emphasis>というパターンを配置するのはよい方法です。
以下は、どのようにして動的な日付フォーマットを実装するかの例です。
</para>

<screen>
set index_format="%4C %-6@date@ %-15.15F %Z (%4c) %s"

index-format-hook  date  "~d&lt;1d"    "%[%H:%M]"
index-format-hook  date  "~d&lt;1m"    "%[%a %d]"
index-format-hook  date  "~d&lt;1y"    "%[%b %d]"
index-format-hook  date  "~A"       "%[%m/%y]"
</screen>

<para>
もう一つの例としては、題名に付加する例を示します。すべてに一致する ~A
パターンがない場合、何も一致しないと、展開処理では空白文字列で置き換わ
る事に注意してください。
</para>

<screen>
set index_format="%4C %@subj_flags@%s"

index-format-hook  subj_flags  "~f boss@example.com"    "** BOSS ** "
index-format-hook  subj_flags  "~f spouse@example.com"  ":-) "
</screen>
</sect1>

<sect1 id="push">
<title>キーボードバッファへのキーシーケンスの追加</title>

<para>使用法:</para>

<cmdsynopsis>
<command>push</command>
<arg choice="plain">
<replaceable class="parameter">string</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドは、指名した文字列をキーボードバッファに入れます。この文字列には、
<link linkend="macro">macro</link>コマンドのシーケンスのように、制御文字、
キーの名前、関数名を含められます。これを使って、起動時や特定のフォルダへの
移動時に、 複数のコマンドを連続実行することもできます。たとえば、
<xref linkend="ex-folder-hook-push"/>では、フォルダに入った時に、自動的に
すべてのスレッドをたたむかを示しています。
</para>

<example id="ex-folder-hook-push">
<title><command>folder-hook</command> 中での<command>push</command>の組み込み</title>
<screen>
folder-hook . 'push &lt;collapse-all&gt;'
</screen>
</example>

<para>
例で示したような機能の利用では、機能名としてMutt が入力を理解するために、
波括弧(<quote>&lt;</quote> and <quote>&gt;</quote>)を使う事が重要です。
それ以外は、独立したキーストロークをシミュレートします。すなわち、
<quote><literal>push collapse-all</literal></quote> は、
<quote>c</quote>、<quote>o</quote>、<quote>l</quote> .... とタイプしたように
解釈されるので、望ましくない、非常に予想外の動作に繋がる可能性があります。
</para>

<para>
キーストロークも使う事ができますが、キーバインディングが変更になる可能性があるため、
ポータビリティがあまりありません。既定のバインディングでは、これは上記の例と
同じです。
</para>

<screen>
folder-hook . 'push \eV'
</screen>

<para>
これは、Esc+V が押されたのをシミュレートします(これは
<literal>&lt;collapse-all&gt;</literal> の既定のバインディングです)。
</para>

</sect1>

<sect1 id="exec">
<title>機能の実行</title>

<para>使用法:</para>

<cmdsynopsis>
<command>exec</command>
<arg choice="plain">
<replaceable class="parameter">function</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">function</replaceable>
</arg>
</cmdsynopsis>

<para>
このコマンドは、あらゆる機能の実行に使えます。 機能の一覧は
<link linkend="functions">function reference</link>にあります。
<quote><command>exec</command> <literal>function</literal></quote>は
<quote><literal>push &lt;function&gt;</literal></quote>と等価です。
</para>

</sect1>

<sect1 id="score-command">
<title>メッセージのスコア付け</title>

<para>使用法:</para>

<cmdsynopsis>
<command>score</command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">value</replaceable>
</arg>

<command>unscore</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
<command>score</command>コマンドは、<emphasis>pattern</emphasis>に
一致したならば、<emphasis>value</emphasis>をメッセージに追加します。
<emphasis>pattern</emphasis>は、<link linkend="patterns">patterns</link>節で
説明したようなフォーマットの文字列です(効率上の理由から、インデックスで扱えない
情報を走査するパターン、 例えば<literal>~b</literal>, <literal>~B</literal>,
<literal>~h</literal>, <literal>~M</literal>, 又は <literal>~X</literal>
などは使えません)。<emphasis>value</emphasis>は正又は負の整数です。
メッセージの最終的なスコアは、<command>score</command>エントリに一致した
すべての合計値です。しかしながら、<emphasis>value</emphasis>の前に等号
(<quote>=</quote>)を付けることで、特定のエントリに一致した時点で評価を終了
させることができます。負の最終スコアは 0 に丸められます。
</para>

<para>
<command>unscore</command>コマンドは、リストからスコアエントリを削除します。
削除するには、<command>score</command>コマンドで指定したのと同じパターンを
指定<emphasis>しなければなりません</emphasis>。パターン<quote>*</quote>は、
特別なトークンで、リスト中のすべてのスコアエントリを削除します。
</para>

<para>
スコアリングは、メールボックスが整列される前、メールが読み出される前に行われます。
この理由により、
<emphasis>~=</emphasis>, <emphasis>~$</emphasis>,と <emphasis>~()</emphasis>のような、
スレッドに依存したパターン、は既定値では動きません。回避策は、 folder hook で
スコアリングコマンドを push することです。これで、メールボックスが開かれ、入力が
処理されたあとに、メールボックスが再スコアリングされます。
</para>

<screen>
folder-hook . 'push "&lt;enter-command&gt;score ~= 10&lt;enter&gt;"'
</screen>

</sect1>

<sect1 id="spam">
<title>スパムの検出</title>

<para>使用法:</para>

<cmdsynopsis>
<command>spam</command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">format</replaceable>
</arg>

<command>nospam</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
Mutt には、外部のスパム得点フィルタに対する一般化されたサポートがあります。
<command>spam</command>と<literal>nospam</literal>を使って、固有の
スパムパターンを定義でき、外部フィルタによって定義されたスパム属性に基づいて
メールを<emphasis>制限</emphasis>,<emphasis>検索</emphasis>,
<emphasis>整列</emphasis>できます。さらに、
<link linkend="index-format">$index_format</link>変数中で、
<literal>%H</literal>セレクタを使う事により、
スパム属性をインデックス画面に 表示することもできます
(便利ワザ:<literal>%?H?[%H] ?</literal>としてみると、スパムタグが、メッセージに
定義されている場合のみ表示されます)。
</para>

<para>
<literal>%H</literal>によって表示され、<literal>~H</literal>によって
注意: 検索された値は<link linkend="caching">header cache</link>に格納されます。
Mutt は<literal>spam</literal>ルールの変更に基づいてヘッダキャッシュエントリを
無効にするほど賢くはないので、正しい<literal>%H</literal>の値が表示されない
場合は、ヘッダキャッシュを一時的に OFF にしてみてください。これで問題が解決
すれば、スパムルールを好みに設定後、古いヘッダキャッシュファイルを削除して、
再度キャッシュを ON に戻してください。
</para>

<para>
最初のステップとして、<command>spam</command>コマンドを使い、外部フィルタの
スパムパターンを定義することです。<emphasis>pattern</emphasis>は正規表現で、
メールメッセージのヘッダに 一致させます。メールボックス中のメッセージは、この
正規表現に一致すると、<quote>spam tag</quote> 又は <quote>spam attribute</quote>
を受け取ります(<command>nospam</command>パターンに一致しない限り&mdash;
以下を参照)。この属性の表示方法は、自分で完全に制御することができ、
その制御を行うのは<emphasis>format</emphasis>パラメータです。
<emphasis>format</emphasis>パラメータは任意の静的なテキストが使えますが、
<emphasis>pattern</emphasis>正規表現からの後方参照を含めることもできます
(正規表現<quote>back-reference</quote>は、括弧の中に含まれた部分式(訳注:
sub-expression)を参照します)。<literal>%1</literal>は正規表現中の
後方参照に置換され、<literal>%2</literal>は、二番目の後方参照に置換され
ます。あとは同様です。
</para>

<para>
スパムタグに一致するため、 mutt は、ローカルと POP フォルダの場合は常時
対応するヘッダ情報を必要としますが、既定の設定では IMAP では必要としません。
解析されるスパムヘッダに依存しますが、
<link linkend="imap-headers">$imap_headers</link> を調整する必要が
あるかもしれません。
</para>

<para>
複数のスパムフィルタを利用していると、メッセージに複数のスパム関連ヘッダが付く
ことがあります。そこで、<command>spam</command>パターンを、おのおのに対して
設定することができます。メッセージが二つ以上のパターンに一致した場合で、
<link linkend="spam-separator">$spam_separator</link>変数が文字列に
設定されていれば、メッセージのスパムタグは、
<link linkend="spam-separator">$spam_separator</link>変数の値で項目を分割した、
すべての<emphasis>format</emphasis>文字列を連結したものとなります。
</para>

<para>
例えば、DCC, SpamAssassin と PureMessage を使っている場合は、
設定は<xref linkend="ex-spam"/>のようになるかもしれません。
</para>

<example id="ex-spam">
<title>スパム検出のための設定</title>
<screen>
spam "X-DCC-.*-Metrics:.*(....)=many"         "90+/DCC-%1"
spam "X-Spam-Status: Yes"                     "90+/SA"
spam "X-PerlMX-Spam: .*Probability=([0-9]+)%" "%1/PM"
set spam_separator=", "
</screen>
</example>

<para>
この場合、<quote>Fuz2</quote>チェックサムで<quote>たくさん</quote>
一致した事をDCCに登録したことと、PureMessage が 97% スパムであるという
事を登録したことと、メッセージのスパムタグが
<literal>90+/DCC-Fuz2,97/PM</literal>であるメッセージを受信します。
(DCC レポートの<quote>=many</quote>の4文字は、&mdash; を使ってチェックサムを
表示しています。この場合は<quote>Fuz2</quote>です。)
</para>

<para>
<link linkend="spam-separator">$spam_separator</link>変数が設定されていない場合、
各スパムパターンは前のパターンに優先します。結局、結合された
<emphasis>format</emphasis>文字列の代わりに、最後のものに一致した結果が
得られます。
</para>

<para>
The spam tag is what will be displayed in the index when you use
<literal>%H</literal> in the <link
linkend="index-format">$index_format</link> variable. It's also the
string that the <literal>~H</literal> pattern-matching expression
matches against for <literal>&lt;search&gt;</literal> and
<literal>&lt;limit&gt;</literal> functions. And it's what sorting by
spam attribute will use as a sort key.
</para>

<para>
That's a pretty complicated example, and most people's actual
environments will have only one spam filter. The simpler your
configuration, the more effective Mutt can be, especially when it comes
to sorting.
</para>

<para>
Generally, when you sort by spam tag, Mutt will sort
<emphasis>lexically</emphasis> &mdash; that is, by ordering strings
alphanumerically. However, if a spam tag begins with a number, Mutt will
sort numerically first, and lexically only when two numbers are equal in
value. (This is like UNIX's <literal>sort -n</literal>.) A message with
no spam attributes at all &mdash; that is, one that didn't match
<emphasis>any</emphasis> of your <command>spam</command> patterns
&mdash; is sorted at lowest priority. Numbers are sorted next, beginning
with 0 and ranging upward. Finally, non-numeric strings are sorted, with
<quote>a</quote> taking lower priority than <quote>z</quote>. Clearly,
in general, sorting by spam tags is most effective when you can coerce
your filter to give you a raw number. But in case you can't, Mutt can
still do something useful.
</para>

<para>
The <command>nospam</command> command can be used to write exceptions to
<command>spam</command> patterns. If a header pattern matches something
in a <command>spam</command> command, but you nonetheless do not want it
to receive a spam tag, you can list a more precise pattern under a
<command>nospam</command> command.
</para>

<para>
If the <emphasis>pattern</emphasis> given to <command>nospam</command>
is exactly the same as the <emphasis>pattern</emphasis> on an existing
<command>spam</command> list entry, the effect will be to remove the
entry from the spam list, instead of adding an exception.  Likewise, if
the <emphasis>pattern</emphasis> for a <command>spam</command> command
matches an entry on the <command>nospam</command> list, that nospam
entry will be removed. If the <emphasis>pattern</emphasis> for
<command>nospam</command> is <quote>*</quote>, <emphasis>all entries on
both lists</emphasis> will be removed. This might be the default action
if you use <command>spam</command> and <command>nospam</command> in
conjunction with a <command>folder-hook</command>.
</para>

<para>
You can have as many <command>spam</command> or
<command>nospam</command> commands as you like.  You can even do your
own primitive <command>spam</command> detection within Mutt &mdash; for
example, if you consider all mail from <literal>MAILER-DAEMON</literal>
to be spam, you can use a <command>spam</command> command like this:
</para>

<screen>
spam "^From: .*MAILER-DAEMON"       "999"
</screen>

</sect1>

<sect1 id="set">
<title>Setting and Querying Variables</title>

<sect2 id="var-types">
<title>Variable Types</title>

<para>
Mutt supports these types of configuration variables:
</para>

<variablelist>
<varlistentry>
<term>boolean</term>
<listitem>
<para>
A boolean expression, either <quote>yes</quote> or <quote>no</quote>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>number</term>
<listitem>
<para>
A signed integer number in the range -32768 to 32767.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>number (long)</term>
<listitem>
<para>
A signed integer number in the range -2147483648 to 2147483647.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>string</term>
<listitem>
<para>
Arbitrary text.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>path</term>
<listitem>
<para>
A specialized string for representing paths including support for
mailbox shortcuts (see <xref linkend="shortcuts"/>) as well as tilde
(<quote>~</quote>) for a user's home directory and more.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>quadoption</term>
<listitem>
<para>
Like a boolean but triggers a prompt when set to <quote>ask-yes</quote>
or <quote>ask-no</quote> with <quote>yes</quote> and <quote>no</quote>
preselected respectively.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>sort order</term>
<listitem>
<para>
A specialized string allowing only particular words as values depending
on the variable.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>regular expression</term>
<listitem>
<para>
A regular expression, see <xref linkend="regexp"/> for an introduction.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>folder magic</term>
<listitem>
<para>
Specifies the type of folder to use: <emphasis>mbox</emphasis>,
<emphasis>mmdf</emphasis>, <emphasis>mh</emphasis> or
<emphasis>maildir</emphasis>.  Currently only used to determine the type
for newly created folders.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>e-mail address</term>
<listitem>
<para>
An e-mail address either with or without realname. The older
<quote><literal>user@example.org (Joe User)</literal></quote> form is
supported but strongly deprecated.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>user-defined</term>
<listitem>
<para>
Arbitrary text, see <xref linkend="set-myvar"/> for details.
</para>
</listitem>
</varlistentry>
</variablelist>

</sect2>

<sect2 id="set-commands">
<title>Commands</title>

<para>
The following commands are available to manipulate and query variables:
</para>

<para>Usage:</para>

<cmdsynopsis>
<command>set</command>
<group choice="req">
<arg choice="plain">
<group choice="opt">
<arg choice="plain"><option>no</option></arg>
<arg choice="plain"><option>inv</option></arg>
</group>
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">variable=value</replaceable>
</arg>
</group>
<arg choice="opt" rep="repeat"></arg>

<command>toggle</command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>

<command>unset</command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>

<command>reset</command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>
</cmdsynopsis>

<para>
This command is used to set (and unset) <link
linkend="variables">configuration variables</link>.  There are four
basic types of variables: boolean, number, string and quadoption.
<emphasis>boolean</emphasis> variables can be <emphasis>set</emphasis>
(true) or <emphasis>unset</emphasis> (false).
<emphasis>number</emphasis> variables can be assigned a positive integer
value.  <emphasis>string</emphasis> variables consist of any number of
printable characters and must be enclosed in quotes if they contain
spaces or tabs.  You may also use the escape sequences <quote>\n</quote>
and <quote>\t</quote> for newline and tab, respectively.
<emphasis>quadoption</emphasis> variables are used to control whether or
not to be prompted for certain actions, or to specify a default action.
A value of <emphasis>yes</emphasis> will cause the action to be carried
out automatically as if you had answered yes to the question.
Similarly, a value of <emphasis>no</emphasis> will cause the action to
be carried out as if you had answered <quote>no.</quote> A value of
<emphasis>ask-yes</emphasis> will cause a prompt with a default answer
of <quote>yes</quote> and <emphasis>ask-no</emphasis> will provide a
default answer of <quote>no.</quote>
</para>

<para>
Prefixing a variable with <quote>no</quote> will unset it.  Example:
<literal><command>set</command> noaskbcc</literal>.
</para>

<para>
For <emphasis>boolean</emphasis> variables, you may optionally prefix
the variable name with <literal>inv</literal> to toggle the value (on or
off).  This is useful when writing macros.  Example:
<literal><command>set</command> invsmart_wrap</literal>.
</para>

<para>
The <command>toggle</command> command automatically prepends the
<literal>inv</literal> prefix to all specified variables.
</para>

<para>
The <command>unset</command> command automatically prepends the
<literal>no</literal> prefix to all specified variables.
</para>

<para>
Using the <literal>&lt;enter-command&gt;</literal> function in the
<emphasis>index</emphasis> menu, you can query the value of a variable
by prefixing the name of the variable with a question mark:
</para>

<screen>
set ?allow_8bit
</screen>

<para>
The question mark is actually only required for boolean and quadoption
variables.
</para>

<para>
The <command>reset</command> command resets all given variables to the
compile time defaults (hopefully mentioned in this manual). If you use
the command <command>set</command> and prefix the variable with
<quote>&amp;</quote> this has the same behavior as the
<command>reset</command> command.
</para>

<para>
With the <command>reset</command> command there exists the special
variable <quote>all</quote>, which allows you to reset all variables to
their system defaults.
</para>

</sect2>

<sect2 id="set-myvar">
<title>User-Defined Variables</title>

<sect3 id="set-myvar-intro">
<title>Introduction</title>

<para>
Along with the variables listed in the <link
linkend="variables">Configuration variables</link> section, Mutt
supports user-defined variables with names starting with
<literal>my_</literal> as in, for example, <literal>my_cfgdir</literal>.
</para>

<para>
The <command>set</command> command either creates a custom
<literal>my_</literal> variable or changes its value if it does exist
already. The <command>unset</command> and <command>reset</command>
commands remove the variable entirely.
</para>

<para>
Since user-defined variables are expanded in the same way that
environment variables are (except for the <link
linkend="shell-escape">shell-escape</link> command and backtick
expansion), this feature can be used to make configuration files more
readable.
</para>

</sect3>

<sect3 id="set-myvar-examples">
<title>Examples</title>

<para>
The following example defines and uses the variable
<literal>my_cfgdir</literal> to abbreviate the calls of the <link
linkend="source"><command>source</command></link> command:
</para>

<example id="ex-myvar1">
<title>Using user-defined variables for config file readability</title>
<screen>
set my_cfgdir = $HOME/mutt/config

source $my_cfgdir/hooks
source $my_cfgdir/macros
<emphasis role="comment"># more source commands...</emphasis>
</screen>
</example>

<para>
A custom variable can also be used in macros to backup the current value
of another variable. In the following example, the value of the <link
linkend="delete">$delete</link> is changed temporarily while its
original value is saved as <literal>my_delete</literal>.  After the
macro has executed all commands, the original value of <link
linkend="delete">$delete</link> is restored.
</para>

<example id="ex-myvar2">
<title>Using user-defined variables for backing up other config option values</title>
<screen>
macro pager ,x '\
&lt;enter-command&gt;set my_delete=$delete&lt;enter&gt;\
&lt;enter-command&gt;set delete=yes&lt;enter&gt;\
...\
&lt;enter-command&gt;set delete=$my_delete&lt;enter&gt;'
</screen>
</example>

<para>
Since Mutt expands such values already when parsing the configuration
file(s), the value of <literal>$my_delete</literal> in the
last example would be the value of <link linkend="delete">$delete</link> exactly
as it was at that point during parsing the configuration file. If
another statement would change the value for <link linkend="delete">$delete</link>
later in the same or another file, it would have no effect on
<literal>$my_delete</literal>. However, the expansion can
be deferred to runtime, as shown in the next example, when escaping the
dollar sign.
</para>

<example id="ex-myvar3">
<title>Deferring user-defined variable expansion to runtime</title>
<screen>
macro pager &lt;PageDown&gt; "\
&lt;enter-command&gt; set my_old_pager_stop=\$pager_stop pager_stop&lt;Enter&gt;\
&lt;next-page&gt;\
&lt;enter-command&gt; set pager_stop=\$my_old_pager_stop&lt;Enter&gt;\
&lt;enter-command&gt; unset my_old_pager_stop&lt;Enter&gt;"
</screen>
</example>

<para>
Note that there is a space between
<literal>&lt;enter-command&gt;</literal> and the <command>set</command>
configuration command, preventing Mutt from recording the
<command>macro</command>'s commands into its history.
</para>

</sect3>

</sect2>

<sect2 id="set-conversions">
<title>Type Conversions</title>

<para>
Variables are always assigned string values which Mutt parses into its
internal representation according to the type of the variable, for
example an integer number for numeric types. For all queries (including
$-expansion) the value is converted from its internal type back into
string. As a result, any variable can be assigned any value given that
its content is valid for the target. This also counts for custom
variables which are of type string. In case of parsing errors, Mutt will
print error messages. <xref linkend="ex-myvar4"/> demonstrates type
conversions.
</para>

<example id="ex-myvar4">
<title>Type conversions using variables</title>
<screen>
set my_lines = "5"                <emphasis role="comment"># value is string "5"</emphasis>
set pager_index_lines = $my_lines <emphasis role="comment"># value is integer 5</emphasis>

set my_sort = "date-received"     <emphasis role="comment"># value is string "date-received"</emphasis>
set sort = "last-$my_sort"        <emphasis role="comment"># value is sort last-date-received</emphasis>

set my_inc = $read_inc            <emphasis role="comment"># value is string "10" (default of $read_inc)</emphasis>
set my_foo = $my_inc              <emphasis role="comment"># value is string "10"</emphasis>
</screen>
</example>

<para>
These assignments are all valid. If, however, the value of
<literal>$my_lines</literal> would have been
<quote>five</quote> (or something else that cannot be parsed into a
number), the assignment to
<literal>$pager_index_lines</literal> would have
produced an error message.
</para>

<para>
Type conversion applies to all configuration commands which take
arguments. But please note that every expanded value of a variable is
considered just a single token. A working example is:
</para>

<screen>
set my_pattern = "~A"
set my_number = "10"

<emphasis role="comment"># same as: score ~A +10</emphasis>
score $my_pattern +$my_number</screen>

<para>
What does <emphasis>not</emphasis> work is:
</para>

<screen>
set my_mx = "+mailbox1 +mailbox2"
mailboxes $my_mx +mailbox3</screen>

<para>
because the value of <literal>$my_mx</literal> is interpreted as a
single mailbox named <quote>+mailbox1 +mailbox2</quote> and not two
distinct mailboxes.
</para>

</sect2>

</sect1>

<sect1 id="source">
<title>Reading Initialization Commands From Another File</title>

<para>Usage:</para>

<cmdsynopsis>
<command>source</command>
<arg choice="plain">
<replaceable class="parameter">filename</replaceable>
</arg>
</cmdsynopsis>

<para>
This command allows the inclusion of initialization commands from other
files.  For example, I place all of my aliases in
<literal>~/.mail_aliases</literal> so that I can make my
<literal>~/.muttrc</literal> readable and keep my aliases private.
</para>

<para>
If the filename begins with a tilde (<quote>~</quote>), it will be
expanded to the path of your home directory.
</para>

<para>
If the filename ends with a vertical bar (<quote>|</quote>), then
<emphasis>filename</emphasis> is considered to be an executable program
from which to read input (e.g.  <literal><command>source</command>
~/bin/myscript|</literal>).
</para>

</sect1>

<sect1 id="unhook">
<title>Removing Hooks</title>

<para>Usage:</para>

<cmdsynopsis>
<command>unhook</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">hook-type</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
This command permits you to flush hooks you have previously defined.
You can either remove all hooks by giving the <quote>*</quote> character
as an argument, or you can remove all hooks of a specific type by saying
something like <literal><command>unhook</command> send-hook</literal>.
</para>

</sect1>

<sect1 id="formatstrings">
<title>Format Strings</title>

<sect2 id="formatstrings-basics">
<title>Basic usage</title>

<para>
Format strings are a general concept you'll find in several locations
through the Mutt configuration, especially in the <link
linkend="index-format">$index_format</link>, <link
linkend="pager-format">$pager_format</link>, <link
linkend="status-format">$status_format</link>, and other related
variables. These can be very straightforward, and it's quite possible
you already know how to use them.
</para>

<para>
The most basic format string element is a percent symbol followed by
another character. For example, <literal>%s</literal> represents a
message's Subject: header in the <link
linkend="index-format">$index_format</link> variable. The
<quote>expandos</quote> available are documented with each format
variable, but there are general modifiers available with all formatting
expandos, too. Those are our concern here.
</para>

<para>
Some of the modifiers are borrowed right out of C (though you might know
them from Perl, Python, shell, or another language). These are the
<literal>[-]m.n</literal> modifiers, as in
<literal>%-12.12s</literal>. As with such programming languages, these
modifiers allow you to specify the minimum and maximum size of the
resulting string, as well as its justification. If the <quote>-</quote>
sign follows the percent, the string will be left-justified instead of
right-justified. If there's a number immediately following that, it's
the minimum amount of space the formatted string will occupy &mdash; if
it's naturally smaller than that, it will be padded out with spaces.  If
a decimal point and another number follow, that's the maximum space
allowable &mdash; the string will not be permitted to exceed that width,
no matter its natural size. Each of these three elements is optional, so
that all these are legal format strings: <literal>%-12s</literal>,
<literal>%4c</literal>, <literal>%.15F</literal> and
<literal>%-12.15L</literal>.
</para>

<para>
Mutt adds some other modifiers to format strings. If you use an equals
symbol (<literal>=</literal>) as a numeric prefix (like the minus
above), it will force the string to be centered within its minimum space
range. For example, <literal>%=14y</literal> will reserve 14 characters
for the %y expansion &mdash; that's the X-Label: header, in <link
linkend="index-format">$index_format</link>. If the expansion results in
a string less than 14 characters, it will be centered in a 14-character
space.  If the X-Label for a message were <quote>test</quote>, that
expansion would look like
<quote>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</quote>.
</para>

<para>
There are two very little-known modifiers that affect the way that an
expando is replaced. If there is an underline (<quote>_</quote>)
character between any format modifiers (as above) and the expando
letter, it will expands in all lower case. And if you use a colon
(<quote>:</quote>), it will replace all decimal points with underlines.
</para>

</sect2>

<sect2 id="formatstrings-conditionals">
<title>Conditionals</title>

<para>
Depending on the format string variable, some of its sequences can be
used to optionally print a string if their value is nonzero. For
example, you may only want to see the number of flagged messages if such
messages exist, since zero is not particularly meaningful. To optionally
print a string based upon one of the above sequences, the following
construct is used:
</para>

<screen>
%?&lt;sequence_char&gt;?&lt;optional_string&gt;?</screen>

<para>
where <emphasis>sequence_char</emphasis> is an expando, and
<emphasis>optional_string</emphasis> is the string you would like
printed if <emphasis>sequence_char</emphasis> is nonzero.
<emphasis>optional_string</emphasis> may contain other sequences as well
as normal text, but you may not nest optional strings.
</para>

<para>
Here is an example illustrating how to optionally print the number of
new messages in a mailbox in <link
linkend="status-format">$status_format</link>:
</para>

<screen>
%?n?%n new messages.?</screen>

<para>
You can also switch between two strings using the following construct:
</para>

<screen>
%?&lt;sequence_char&gt;?&lt;if_string&gt;&amp;&lt;else_string&gt;?</screen>

<para>
If the value of <emphasis>sequence_char</emphasis> is non-zero,
<emphasis>if_string</emphasis> will be expanded, otherwise
<emphasis>else_string</emphasis> will be expanded.
</para>

</sect2>

<sect2 id="formatstrings-filters">
<title>Filters</title>

<para>
Any format string ending in a vertical bar (<quote>|</quote>) will be
expanded and piped through the first word in the string, using spaces as
separator. The string returned will be used for display.  If the
returned string ends in %, it will be passed through the formatter a
second time. This allows the filter to generate a replacement format
string including % expandos.
</para>

<para>
All % expandos in a format string are expanded before the script is
called so that:
</para>

<example id="ex-fmtpipe">
<title>Using external filters in format strings</title>
<screen>
set status_format="script.sh '%r %f (%L)'|"
</screen>
</example>

<para>
will make Mutt expand <literal>%r</literal>, <literal>%f</literal> and
<literal>%L</literal> before calling the script. The example also shows
that arguments can be quoted: the script will receive the expanded
string between the single quotes as the only argument.
</para>

<para>
A practical example is the <literal>mutt_xtitle</literal> script
installed in the <literal>samples</literal> subdirectory of the Mutt
documentation: it can be used as filter for <link
linkend="status-format">$status_format</link> to set the current
terminal's title, if supported.
</para>

</sect2>

<sect2 id="formatstrings-padding">
<title>Padding</title>

<para>
In most format strings, Mutt supports different types of padding using
special %-expandos:
</para>

<variablelist>
<varlistentry>
<term><literal>%|X</literal></term>
<listitem>
<para>
When this occurs, Mutt will fill the rest of the line with the character
<literal>X</literal>. For example, filling the rest of the line with
dashes is done by setting:
</para>
<screen>
set status_format = "%v on %h: %B: %?n?%n&amp;no? new messages %|-"</screen>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>%&gt;X</literal>
</term>
<listitem>
<para>
Since the previous expando stops at the end of line, there must be a way
to fill the gap between two items via the <literal>%&gt;X</literal>
expando: it puts as many characters <literal>X</literal> in between two
items so that the rest of the line will be right-justified. For example,
to not put the version string and hostname the above example on the left
but on the right and fill the gap with spaces, one might use (note the
space after <literal>%&gt;</literal>):
</para>
<screen>
set status_format = "%B: %?n?%n&amp;no? new messages %&gt; (%v on %h)"</screen>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>%*X</literal>
</term>
<listitem>
<para>
Normal right-justification will print everything to the left of the
<literal>%&gt;</literal>, displaying padding and whatever lies to the
right only if there's room. By contrast, <quote>soft-fill</quote> gives
priority to the right-hand side, guaranteeing space to display it and
showing padding only if there's still room. If necessary, soft-fill will
eat text leftwards to make room for rightward text. For example, to
right-justify the subject making sure as much as possible of it fits on
screen, one might use (note two spaces after <literal>%* </literal>: the
second ensures there's a space between the truncated right-hand side and
the subject):
</para>
<screen>
set index_format="%4C %Z %{%b %d} %-15.15L (%?l?%4l&amp;%4c?)%*  %s"</screen>
</listitem>
</varlistentry>
</variablelist>

</sect2>

<sect2 id="formatstrings-size">
<title>Bytes size display</title>

<para>
Various format strings contain expandos that display the size of
messages in bytes.  This includes
<literal>%s</literal> in <link linkend="attach-format">$attach_format</link>,
<literal>%l</literal> in <link linkend="compose-format">$compose_format</link>,
<literal>%s</literal> in <link linkend="folder-format">$folder_format</link>,
<literal>%c</literal> in <link linkend="index-format">$index_format</link>,
and %l and %L in <link linkend="status-format">$status_format</link>.
There are four configuration variables that can be used to customize
how the numbers are displayed.
</para>

<para>
  <link linkend="size-show-bytes">$size_show_bytes</link>
  will display the number of bytes when the size is &lt; 1
  kilobyte.  When unset, kilobytes will be displayed instead.
</para>

<para>
  <link linkend="size-show-mb">$size_show_mb</link> will display the
  number of megabytes when the size is &gt;= 1 megabyte.  When
  unset, kilobytes will be displayed instead (which could be a large
  number).
</para>

<para>
  <link linkend="size-show-fractions">$size_show_fractions</link>,
  will display numbers with a single decimal place for values from
  0 to 10 kilobytes, and 1 to 10 megabytes.
</para>

<para>
  <link linkend="size-units-on-left">$size_units_on_left</link> will
  display the unit (<quote>K</quote> or <quote>M</quote>) to the left
  of the number, instead of the right if unset.
</para>

<para>
  These variables also affect size display in a few other places, such
  as progress indicators and attachment delimeters in the pager.
</para>
</sect2>

</sect1>

<sect1 id="mailto-allow">
<title>Control allowed header fields in a mailto: URL</title>

<para>Usage:</para>

<cmdsynopsis>
<command>mailto_allow</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">header-field</replaceable>
</arg>
</group>

<command>unmailto_allow</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">header-field</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
As a security measure, Mutt will only add user-approved header fields from a
<literal>mailto:</literal> URL.  This is necessary since Mutt will handle
certain header fields, such as <literal>Attach:</literal>, in a special way.
The <literal>mailto_allow</literal> and <literal>unmailto_allow</literal>
commands allow the user to modify the list of approved headers.
</para>
<para>
Mutt initializes the default list to contain only the <literal>Subject</literal>
and <literal>Body</literal> header fields, which are the only requirement specified
by the <literal>mailto:</literal> specification in RFC2368.
</para>
</sect1>

</chapter>

<chapter id="advancedusage">
<title>Advanced Usage</title>

<sect1 id="charset-handling">
<title>Character Set Handling</title>

<para>
A <quote>character set</quote> is basically a mapping between bytes and
glyphs and implies a certain character encoding scheme. For example, for
the ISO 8859 family of character sets, an encoding of 8bit per character
is used. For the Unicode character set, different character encodings
may be used, UTF-8 being the most popular. In UTF-8, a character is
represented using a variable number of bytes ranging from 1 to 4.
</para>

<para>
Since Mutt is a command-line tool run from a shell, and delegates
certain tasks to external tools (such as an editor for composing/editing
messages), all of these tools need to agree on a character set and
encoding. There exists no way to reliably deduce the character set a
plain text file has. Interoperability is gained by the use of
well-defined environment variables. The full set can be printed by
issuing <literal>locale</literal> on the command line.
</para>

<para>
Upon startup, Mutt determines the character set on its own using
routines that inspect locale-specific environment variables. Therefore,
it is generally not necessary to set the <literal>$charset</literal>
variable in Mutt. It may even be counter-productive as Mutt uses system
and library functions that derive the character set themselves and on
which Mutt has no influence. It's safest to let Mutt work out the locale
setup itself.
</para>

<para>
If you happen to work with several character sets on a regular basis,
it's highly advisable to use Unicode and an UTF-8 locale. Unicode can
represent nearly all characters in a message at the same time.  When not
using a Unicode locale, it may happen that you receive messages with
characters not representable in your locale. When displaying such a
message, or replying to or forwarding it, information may get lost
possibly rendering the message unusable (not only for you but also for
the recipient, this breakage is not reversible as lost information
cannot be guessed).
</para>

<para>
A Unicode locale makes all conversions superfluous which eliminates the
risk of conversion errors. It also eliminates potentially wrong
expectations about the character set between Mutt and external programs.
</para>

<para>
The terminal emulator used also must be properly configured for the
current locale. Terminal emulators usually do <emphasis>not</emphasis>
derive the locale from environment variables, they need to be configured
separately. If the terminal is incorrectly configured, Mutt may display
random and unexpected characters (question marks, octal codes, or just
random glyphs), format strings may not work as expected, you may not be
abled to enter non-ascii characters, and possible more.  Data is always
represented using bytes and so a correct setup is very important as to
the machine, all character sets <quote>look</quote> the same.
</para>

<para>
Warning: A mismatch between what system and library functions think the
locale is and what Mutt was told what the locale is may make it behave
badly with non-ascii input: it will fail at seemingly random places.
This warning is to be taken seriously since not only local mail handling
may suffer: sent messages may carry wrong character set information the
<emphasis>receiver</emphasis> has too deal with. The need to set
<literal>$charset</literal> directly in most cases points at terminal
and environment variable setup problems, not Mutt problems.
</para>

<para>
A list of officially assigned and known character sets can be found at
<ulink url="http://www.iana.org/assignments/character-sets">IANA</ulink>,
a list of locally supported locales can be obtained by running
<literal>locale -a</literal>.
</para>

</sect1>

<sect1 id="regexp">
<title>Regular Expressions</title>

<para>
All string patterns in Mutt including those in more complex <link
linkend="patterns">patterns</link> must be specified using regular
expressions (regexp) in the <quote>POSIX extended</quote> syntax (which
is more or less the syntax used by egrep and GNU awk).  For your
convenience, we have included below a brief description of this syntax.
</para>

<para>
The search is case sensitive if the pattern contains at least one upper
case letter, and case insensitive otherwise.
</para>

<note>
<para>
<quote>\</quote> must be quoted if used for a regular expression in an
initialization command: <quote>\\</quote>.
</para>
</note>

<para>
A regular expression is a pattern that describes a set of strings.
Regular expressions are constructed analogously to arithmetic
expressions, by using various operators to combine smaller expressions.
</para>

<note>
<para>
The regular expression can be enclosed/delimited by either " or ' which
is useful if the regular expression includes a white-space character.
See <xref linkend="muttrc-syntax"/> for more information on " and '
delimiter processing.  To match a literal " or ' you must preface it
with \ (backslash).
</para>
</note>

<para>
The fundamental building blocks are the regular expressions that match a
single character.  Most characters, including all letters and digits,
are regular expressions that match themselves.  Any metacharacter with
special meaning may be quoted by preceding it with a backslash.
</para>

<para>
The period <quote>.</quote> matches any single character.  The caret
<quote>^</quote> and the dollar sign <quote>$</quote> are metacharacters
that respectively match the empty string at the beginning and end of a
line.
</para>

<para>
A list of characters enclosed by <quote>[</quote> and <quote>]</quote>
matches any single character in that list; if the first character of the
list is a caret <quote>^</quote> then it matches any character
<emphasis>not</emphasis> in the list.  For example, the regular
expression <emphasis>[0123456789]</emphasis> matches any single digit.
A range of ASCII characters may be specified by giving the first and
last characters, separated by a hyphen <quote>-</quote>.  Most
metacharacters lose their special meaning inside lists.  To include a
literal <quote>]</quote> place it first in the list.  Similarly, to
include a literal <quote>^</quote> place it anywhere but first.
Finally, to include a literal hyphen <quote>-</quote> place it last.
</para>

<para>
Certain named classes of characters are predefined.  Character classes
consist of <quote>[:</quote>, a keyword denoting the class, and
<quote>:]</quote>.  The following classes are defined by the POSIX
standard in
<xref linkend="posix-regex-char-classes"/>
</para>

<table id="posix-regex-char-classes">
<title>POSIX regular expression character classes</title>
<tgroup cols="2">
<thead>
<row><entry>Character class</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>[:alnum:]</entry><entry>Alphanumeric characters</entry></row>
<row><entry>[:alpha:]</entry><entry>Alphabetic characters</entry></row>
<row><entry>[:blank:]</entry><entry>Space or tab characters</entry></row>
<row><entry>[:cntrl:]</entry><entry>Control characters</entry></row>
<row><entry>[:digit:]</entry><entry>Numeric characters</entry></row>
<row><entry>[:graph:]</entry><entry>Characters that are both printable and visible. (A space is printable, but not visible, while an <quote>a</quote> is both)</entry></row>
<row><entry>[:lower:]</entry><entry>Lower-case alphabetic characters</entry></row>
<row><entry>[:print:]</entry><entry>Printable characters (characters that are not control characters)</entry></row>
<row><entry>[:punct:]</entry><entry>Punctuation characters (characters that are not letter, digits, control characters, or space characters)</entry></row>
<row><entry>[:space:]</entry><entry>Space characters (such as space, tab and formfeed, to name a few)</entry></row>
<row><entry>[:upper:]</entry><entry>Upper-case alphabetic characters</entry></row>
<row><entry>[:xdigit:]</entry><entry>Characters that are hexadecimal digits</entry></row>
</tbody>
</tgroup>
</table>

<para>
A character class is only valid in a regular expression inside the
brackets of a character list.
</para>

<note>
<para>
Note that the brackets in these class names are part of the symbolic
names, and must be included in addition to the brackets delimiting the
bracket list. For example, <emphasis>[[:digit:]]</emphasis> is
equivalent to <emphasis>[0-9]</emphasis>.
</para>
</note>

<para>
Two additional special sequences can appear in character lists.  These
apply to non-ASCII character sets, which can have single symbols (called
collating elements) that are represented with more than one character,
as well as several characters that are equivalent for collating or
sorting purposes:
</para>

<variablelist>

<varlistentry>
<term>Collating Symbols</term>
<listitem>
<para>
A collating symbol is a multi-character collating element enclosed in
<quote>[.</quote> and <quote>.]</quote>.  For example, if
<quote>ch</quote> is a collating element, then
<emphasis>[[.ch.]]</emphasis> is a regexp that matches this collating
element, while <emphasis>[ch]</emphasis> is a regexp that matches either
<quote>c</quote> or <quote>h</quote>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Equivalence Classes</term>
<listitem>
<para>
An equivalence class is a locale-specific name for a list of characters
that are equivalent. The name is enclosed in <quote>[=</quote> and
<quote>=]</quote>.  For example, the name <quote>e</quote> might be used
to represent all of <quote>e</quote> with grave
(<quote>&egrave;</quote>), <quote>e</quote> with acute
(<quote>&eacute;</quote>) and <quote>e</quote>.  In this case,
<emphasis>[[=e=]]</emphasis> is a regexp that matches any of:
<quote>e</quote> with grave (<quote>&egrave;</quote>), <quote>e</quote>
with acute (<quote>&eacute;</quote>) and <quote>e</quote>.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>
A regular expression matching a single character may be followed by one
of several repetition operators described in <xref
linkend="regex-repeat"/>.
</para>

<table id="regex-repeat">
<title>Regular expression repetition operators</title>
<tgroup cols="2">
<thead>
<row><entry>Operator</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>?</entry><entry>The preceding item is optional and matched at most once</entry></row>
<row><entry>*</entry><entry>The preceding item will be matched zero or more times</entry></row>
<row><entry>+</entry><entry>The preceding item will be matched one or more times</entry></row>
<row><entry>{n}</entry><entry>The preceding item is matched exactly <emphasis>n</emphasis> times</entry></row>
<row><entry>{n,}</entry><entry>The preceding item is matched <emphasis>n</emphasis> or more times</entry></row>
<row><entry>{,m}</entry><entry>The preceding item is matched at most <emphasis>m</emphasis> times</entry></row>
<row><entry>{n,m}</entry><entry>The preceding item is matched at least <emphasis>n</emphasis> times, but no more than <emphasis>m</emphasis> times</entry></row>
</tbody>
</tgroup>
</table>

<para>
Two regular expressions may be concatenated; the resulting regular
expression matches any string formed by concatenating two substrings
that respectively match the concatenated subexpressions.
</para>

<para>
Two regular expressions may be joined by the infix operator
<quote>|</quote>; the resulting regular expression matches any string
matching either subexpression.
</para>

<para>
Repetition takes precedence over concatenation, which in turn takes
precedence over alternation.  A whole subexpression may be enclosed in
parentheses to override these precedence rules.
</para>

<note>
<para>
If you compile Mutt with the included regular expression engine, the
following operators may also be used in regular expressions as described
in <xref linkend="regex-gnu-ext"/>.
</para>
</note>

<table id="regex-gnu-ext">
<title>GNU regular expression extensions</title>
<tgroup cols="2">
<thead>
<row><entry>Expression</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>\\y</entry><entry>Matches the empty string at either the beginning or the end of a word</entry></row>
<row><entry>\\B</entry><entry>Matches the empty string within a word</entry></row>
<row><entry>\\&lt;</entry><entry>Matches the empty string at the beginning of a word</entry></row>
<row><entry>\\&gt;</entry><entry>Matches the empty string at the end of a word</entry></row>
<row><entry>\\w</entry><entry>Matches any word-constituent character (letter, digit, or underscore)</entry></row>
<row><entry>\\W</entry><entry>Matches any character that is not word-constituent</entry></row>
<row><entry>\\`</entry><entry>Matches the empty string at the beginning of a buffer (string)</entry></row>
<row><entry>\\'</entry><entry>Matches the empty string at the end of a buffer</entry></row>
</tbody>
</tgroup>
</table>

<para>
Please note however that these operators are not defined by POSIX, so
they may or may not be available in stock libraries on various systems.
</para>

</sect1>

<sect1 id="patterns">
<title>Patterns: Searching, Limiting and Tagging</title>

<sect2 id="patterns-modifier">
<title>Pattern Modifier</title>

<para>
Many of Mutt's commands allow you to specify a pattern to match
(<literal>limit</literal>, <literal>tag-pattern</literal>,
<literal>delete-pattern</literal>, etc.). <xref linkend="tab-patterns"/>
shows several ways to select messages.
</para>

<table id="tab-patterns">
<title>Pattern modifiers</title>
<tgroup cols="2">
<thead>
<row><entry>Pattern modifier</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>~A</entry><entry>all messages</entry></row>
<row><entry>~b <emphasis>EXPR</emphasis></entry><entry>messages which contain <emphasis>EXPR</emphasis> in the message body ***)</entry></row>
<row><entry>=b <emphasis>STRING</emphasis></entry><entry>If IMAP is enabled, like ~b but searches for <emphasis>STRING</emphasis> on the server, rather than downloading each message and searching it locally.</entry></row>
<row><entry>~B <emphasis>EXPR</emphasis></entry><entry>messages which contain <emphasis>EXPR</emphasis> in the whole message ***)</entry></row>
<row><entry>=B <emphasis>STRING</emphasis></entry><entry>If IMAP is enabled, like ~B but searches for <emphasis>STRING</emphasis> on the server, rather than downloading each message and searching it locally.</entry></row>
<row><entry>~c <emphasis>EXPR</emphasis></entry><entry>messages carbon-copied to <emphasis>EXPR</emphasis></entry></row>
<row><entry>%c <emphasis>GROUP</emphasis></entry><entry>messages carbon-copied to any member of <emphasis>GROUP</emphasis></entry></row>
<row><entry>~C <emphasis>EXPR</emphasis></entry><entry>messages either to: or cc: <emphasis>EXPR</emphasis></entry></row>
<row><entry>%C <emphasis>GROUP</emphasis></entry><entry>messages either to: or cc: to any member of <emphasis>GROUP</emphasis></entry></row>
<row><entry>~d [<emphasis>MIN</emphasis>]-[<emphasis>MAX</emphasis>]</entry><entry>messages with <quote>date-sent</quote> in a Date range</entry></row>
<row><entry>~D</entry><entry>deleted messages</entry></row>
<row><entry>~e <emphasis>EXPR</emphasis></entry><entry>messages which contains <emphasis>EXPR</emphasis> in the <quote>Sender</quote> field</entry></row>
<row><entry>%e <emphasis>GROUP</emphasis></entry><entry>messages which contain a member of <emphasis>GROUP</emphasis> in the <quote>Sender</quote> field</entry></row>
<row><entry>~E</entry><entry>expired messages</entry></row>
<row><entry>~F</entry><entry>flagged messages</entry></row>
<row><entry>~f <emphasis>EXPR</emphasis></entry><entry>messages originating from <emphasis>EXPR</emphasis></entry></row>
<row><entry>%f <emphasis>GROUP</emphasis></entry><entry>messages originating from any member of <emphasis>GROUP</emphasis></entry></row>
<row><entry>~g</entry><entry>cryptographically signed messages</entry></row>
<row><entry>~G</entry><entry>cryptographically encrypted messages</entry></row>
<row><entry>~h <emphasis>EXPR</emphasis></entry><entry>messages which contain <emphasis>EXPR</emphasis> in the message header ***)</entry></row>
<row><entry>=h <emphasis>STRING</emphasis></entry><entry>If IMAP is enabled, like ~h but searches for <emphasis>STRING</emphasis> on the server, rather than downloading each message and searching it locally; <emphasis>STRING</emphasis> must be of the form <quote>header: substring</quote> (see below).</entry></row>
<row><entry>~H <emphasis>EXPR</emphasis></entry><entry>messages with a spam attribute matching <emphasis>EXPR</emphasis></entry></row>
<row><entry>~i <emphasis>EXPR</emphasis></entry><entry>messages which match <emphasis>EXPR</emphasis> in the <quote>Message-ID</quote> field</entry></row>
<row><entry>~k</entry><entry>messages which contain PGP key material</entry></row>
<row><entry>~L <emphasis>EXPR</emphasis></entry><entry>messages either originated or received by <emphasis>EXPR</emphasis></entry></row>
<row><entry>%L <emphasis>GROUP</emphasis></entry><entry>message either originated or received by any member of <emphasis>GROUP</emphasis></entry></row>
<row><entry>~l</entry><entry>messages addressed to a known mailing list</entry></row>
<row><entry>~m [<emphasis>MIN</emphasis>]-[<emphasis>MAX</emphasis>]</entry><entry>messages in the range <emphasis>MIN</emphasis> to <emphasis>MAX</emphasis> *)</entry></row>
<row><entry>~M <emphasis>EXPR</emphasis></entry><entry>messages which contain a mime Content-Type matching <emphasis>EXPR</emphasis> ***)</entry></row>
<row><entry>~n [<emphasis>MIN</emphasis>]-[<emphasis>MAX</emphasis>]</entry><entry>messages with a score in the range <emphasis>MIN</emphasis> to <emphasis>MAX</emphasis> *)</entry></row>
<row><entry>~N</entry><entry>new messages</entry></row>
<row><entry>~O</entry><entry>old messages</entry></row>
<row>
<entry>~p</entry>
<entry>messages addressed to you (consults <link linkend="from">$from</link>, <command>alternates</command>, and local account/hostname information)</entry>
</row>
<row>
<entry>~P</entry>
<entry>messages from you (consults <link linkend="from">$from</link>, <command>alternates</command>, and local account/hostname information)</entry>
</row>
<row><entry>~Q</entry><entry>messages which have been replied to</entry></row>
<row><entry>~r [<emphasis>MIN</emphasis>]-[<emphasis>MAX</emphasis>]</entry><entry>messages with <quote>date-received</quote> in a Date range</entry></row>
<row><entry>~R</entry><entry>read messages</entry></row>
<row><entry>~s <emphasis>EXPR</emphasis></entry><entry>messages having <emphasis>EXPR</emphasis> in the <quote>Subject</quote> field.</entry></row>
<row><entry>~S</entry><entry>superseded messages</entry></row>
<row><entry>~t <emphasis>EXPR</emphasis></entry><entry>messages addressed to <emphasis>EXPR</emphasis></entry></row>
<row><entry>~T</entry><entry>tagged messages</entry></row>
<row><entry>~u</entry><entry>messages addressed to a subscribed mailing list</entry></row>
<row><entry>~U</entry><entry>unread messages</entry></row>
<row><entry>~v</entry><entry>messages part of a collapsed thread.</entry></row>
<row><entry>~V</entry><entry>cryptographically verified messages</entry></row>
<row><entry>~x <emphasis>EXPR</emphasis></entry><entry>messages which contain <emphasis>EXPR</emphasis> in the <quote>References</quote> or <quote>In-Reply-To</quote> field</entry></row>
<row><entry>~X [<emphasis>MIN</emphasis>]-[<emphasis>MAX</emphasis>]</entry><entry>messages with <emphasis>MIN</emphasis> to <emphasis>MAX</emphasis> attachments *) ***)</entry></row>
<row><entry>~y <emphasis>EXPR</emphasis></entry><entry>messages which contain <emphasis>EXPR</emphasis> in the <quote>X-Label</quote> field</entry></row>
<row><entry>~z [<emphasis>MIN</emphasis>]-[<emphasis>MAX</emphasis>]</entry><entry>messages with a size in the range <emphasis>MIN</emphasis> to <emphasis>MAX</emphasis> *) **)</entry></row>
<row><entry>~=</entry><entry>duplicated messages (see <link linkend="duplicate-threads">$duplicate_threads</link>)</entry></row>
<row><entry>~$</entry><entry>unreferenced messages (requires threaded view)</entry></row>
<row><entry>~(<emphasis>PATTERN</emphasis>)</entry><entry>messages in threads
containing messages matching <emphasis>PATTERN</emphasis>, e.g. all
threads containing messages from you: ~(~P)</entry></row>
<row><entry>~&lt;(<emphasis>PATTERN</emphasis>)</entry><entry>messages
whose immediate parent matches <emphasis>PATTERN</emphasis>,
e.g. replies to your messages: ~&lt;(~P)</entry></row>
<row><entry>~&gt;(<emphasis>PATTERN</emphasis>)</entry><entry>messages
having an immediate child matching <emphasis>PATTERN</emphasis>,
e.g. messages you replied to: ~&gt;(~P)</entry></row>
</tbody>
</tgroup>
</table>

<para>
Where <emphasis>EXPR</emphasis> is a <link linkend="regexp">regular expression</link>, and <emphasis>GROUP</emphasis> is an
<link linkend="addrgroup">address group</link>.
</para>

<para>
*) The forms <quote>&lt;[<emphasis>MAX</emphasis>]</quote>,
<quote>&gt;[<emphasis>MIN</emphasis>]</quote>,
<quote>[<emphasis>MIN</emphasis>]-</quote> and
<quote>-[<emphasis>MAX</emphasis>]</quote> are allowed, too.
</para>

<para>
**) The suffixes <quote>K</quote> and <quote>M</quote> are allowed to
specify kilobyte and megabyte respectively.
</para>

<para>
***) These patterns read each message in, and can therefore be much
slower.  Over IMAP this will entail downloading each message.  They
can not be used for <link linkend="score-command">message
scoring</link>, and it is recommended to avoid using them for index
coloring.
</para>

<para>
Special attention has to be paid when using regular expressions inside
of patterns.  Specifically, Mutt's parser for these patterns will strip
one level of backslash (<quote>\</quote>), which is normally used for
quoting.  If it is your intention to use a backslash in the regular
expression, you will need to use two backslashes instead
(<quote>\\</quote>).
</para>

<para>
You can force Mutt to treat
<emphasis>EXPR</emphasis> as a simple string instead of a regular
expression by using = instead of ~ in the pattern name. For example,
<literal>=b *.*</literal> will find all messages that contain the
literal string <quote>*.*</quote>. Simple string matches are less
powerful than regular expressions but can be considerably faster.
</para>

<para>
For IMAP folders, string matches <literal>=b</literal>,
<literal>=B</literal>, and <literal>=h</literal> will be performed on
the server instead of by fetching every message. IMAP treats
<literal>=h</literal> specially: it must be of the form <quote>header:
substring</quote> and will not partially match header names. The
substring part may be omitted if you simply wish to find messages
containing a particular header without regard to its value.
</para>

<para>
Patterns matching lists of addresses (notably c, C, p, P and t) match if
there is at least one match in the whole list. If you want to make sure
that all elements of that list match, you need to prefix your pattern
with <quote>^</quote>.  This example matches all mails which only has
recipients from Germany.
</para>

<example id="ex-recips">
<title>Matching all addresses in address lists</title>
<screen>
^~C \.de$
</screen>
</example>

<para>
You can restrict address pattern matching to aliases that you have
defined with the "@" modifier.  This example matches messages whose
recipients are all from Germany, and who are known to your alias list.
</para>

<example id="ex-restrict-to-aliases">
<title>Matching restricted to aliases</title>
<screen>
^@~C \.de$
</screen>
</example>

<para>
To match any defined alias, use a regular expression that matches any
string.  This example matches messages whose senders are known aliases.
</para>

<example id="ex-match-alias">
<title>Matching any defined alias</title>
<screen>
@~f .
</screen>
</example>

</sect2>

<sect2 id="simple-searches">
<title>Simple Searches</title>

<para>
Mutt supports two versions of so called <quote>simple
searches</quote>. These are issued if the query entered for searching,
limiting and similar operations does not seem to contain a valid pattern
modifier (i.e. it does not contain one of these characters:
<quote>~</quote>, <quote>=</quote> or <quote>%</quote>). If the query is
supposed to contain one of these special characters, they must be
escaped by prepending a backslash (<quote>\</quote>).
</para>

<para>
The first type is by checking whether the query string equals
a keyword case-insensitively from <xref linkend="tab-simplesearch-keywords"/>:
If that is the case, Mutt will use the shown pattern modifier instead.
If a keyword would conflict with your search keyword, you need to turn
it into a regular expression to avoid matching the keyword table. For
example, if you want to find all messages matching <quote>flag</quote>
(using <link linkend="simple-search">$simple_search</link>)
but don't want to match flagged messages, simply search for
<quote><literal>[f]lag</literal></quote>.
</para>

<table id="tab-simplesearch-keywords">
<title>Simple search keywords</title>
<tgroup cols="2">
<thead>
<row><entry>Keyword</entry><entry>Pattern modifier</entry></row>
</thead>
<tbody>
<row><entry>all</entry><entry>~A</entry></row>
<row><entry>.</entry><entry>~A</entry></row>
<row><entry>^</entry><entry>~A</entry></row>
<row><entry>del</entry><entry>~D</entry></row>
<row><entry>flag</entry><entry>~F</entry></row>
<row><entry>new</entry><entry>~N</entry></row>
<row><entry>old</entry><entry>~O</entry></row>
<row><entry>repl</entry><entry>~Q</entry></row>
<row><entry>read</entry><entry>~R</entry></row>
<row><entry>tag</entry><entry>~T</entry></row>
<row><entry>unread</entry><entry>~U</entry></row>
</tbody>
</tgroup>
</table>

<para>
The second type of simple search is to build a complex search pattern
using <link linkend="simple-search">$simple_search</link> as a
template. Mutt will insert your query properly quoted and search for the
composed complex query.
</para>

</sect2>

<sect2 id="complex-patterns">
<title>Nesting and Boolean Operators</title>

<para>
Logical AND is performed by specifying more than one criterion.  For
example:
</para>

<screen>
~t mutt ~f elkins
</screen>

<para>
would select messages which contain the word <quote>mutt</quote> in the
list of recipients <emphasis>and</emphasis> that have the word
<quote>elkins</quote> in the <quote>From</quote> header field.
</para>

<para>
Mutt also recognizes the following operators to create more complex
search patterns:
</para>

<itemizedlist>
<listitem>

<para>
! &mdash; logical NOT operator
</para>
</listitem>
<listitem>

<para>
| &mdash; logical OR operator
</para>
</listitem>
<listitem>

<para>
() &mdash; logical grouping operator
</para>
</listitem>

</itemizedlist>

<para>
Here is an example illustrating a complex search pattern.  This pattern
will select all messages which do not contain <quote>mutt</quote> in the
<quote>To</quote> or <quote>Cc</quote> field and which are from
<quote>elkins</quote>.
</para>

<example id="ex-pattern-bool">
<title>Using boolean operators in patterns</title>
<screen>
!(~t mutt|~c mutt) ~f elkins
</screen>
</example>

<para>
Here is an example using white space in the regular expression (note the
<quote>'</quote> and <quote>"</quote> delimiters).  For this to match,
the mail's subject must match the <quote>^Junk +From +Me$</quote> and it
must be from either <quote>Jim +Somebody</quote> or <quote>Ed
+SomeoneElse</quote>:
</para>

<screen>
'~s "^Junk +From +Me$" ~f ("Jim +Somebody"|"Ed +SomeoneElse")'
</screen>

<note>
<para>
If a regular expression contains parenthesis, or a vertical bar ("|"),
you <emphasis>must</emphasis> enclose the expression in double or single
quotes since those characters are also used to separate different parts
of Mutt's pattern language.  For example: <literal>~f
"me@(mutt\.org|cs\.hmc\.edu)"</literal> Without the quotes, the
parenthesis wouldn't end.  This would be separated to two OR'd patterns:
<emphasis>~f me@(mutt\.org</emphasis> and
<emphasis>cs\.hmc\.edu)</emphasis>. They are never what you want.
</para>
</note>

</sect2>

<sect2 id="date-patterns">
<title>Searching by Date</title>

<para>
Mutt supports two types of dates, <emphasis>absolute</emphasis> and
<emphasis>relative</emphasis>.
</para>

<sect3 id="date-absolute">
<title>Absolute Dates</title>

<para>
Dates <emphasis>must</emphasis> be in DD/MM/YY format (month and year
are optional, defaulting to the current month and year).  An example of
a valid range of dates is:
</para>

<screen>
Limit to messages matching: ~d 20/1/95-31/10
</screen>

<para>
If you omit the minimum (first) date, and just specify
<quote>-DD/MM/YY</quote>, all messages <emphasis>before</emphasis> the
given date will be selected.  If you omit the maximum (second) date, and
specify <quote>DD/MM/YY-</quote>, all messages
<emphasis>after</emphasis> the given date will be selected.  If you
specify a single date with no dash (<quote>-</quote>), only messages
sent on the given date will be selected.
</para>

<para>
You can add error margins to absolute dates.  An error margin is a sign
(+ or -), followed by a digit, followed by one of the units in <xref
linkend="tab-date-units"/>. As a special case, you can replace the sign
by a <quote>*</quote> character, which is equivalent to giving identical
plus and minus error margins.
</para>

<table id="tab-date-units">
<title>Date units</title>
<tgroup cols="2">
<thead>
<row><entry>Unit</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>y</entry><entry>Years</entry></row>
<row><entry>m</entry><entry>Months</entry></row>
<row><entry>w</entry><entry>Weeks</entry></row>
<row><entry>d</entry><entry>Days</entry></row>
</tbody>
</tgroup>
</table>

<para>
Example: To select any messages two weeks around January 15, 2001, you'd
use the following pattern:
</para>

<screen>
Limit to messages matching: ~d 15/1/2001*2w
</screen>

</sect3>

<sect3 id="dates-relative">
<title>Relative Dates</title>

<para>
This type of date is relative to the current date, and may be specified
as:
</para>

<itemizedlist>
<listitem>

<para>
&gt;<emphasis>offset</emphasis> for messages older than
<emphasis>offset</emphasis> units
</para>
</listitem>
<listitem>

<para>
&lt;<emphasis>offset</emphasis> for messages newer than
<emphasis>offset</emphasis> units
</para>
</listitem>
<listitem>

<para>
=<emphasis>offset</emphasis> for messages exactly
<emphasis>offset</emphasis> units old
</para>
</listitem>

</itemizedlist>

<para>
<emphasis>offset</emphasis> is specified as a positive number with one
of the units from <xref linkend="tab-rel-date-units"/>.
</para>

<table id="tab-rel-date-units">
<title>Relative date units</title>
<tgroup cols="2">
<thead>
<row><entry>Unit</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>y</entry><entry>Years</entry></row>
<row><entry>m</entry><entry>Months</entry></row>
<row><entry>w</entry><entry>Weeks</entry></row>
<row><entry>d</entry><entry>Days</entry></row>
<row><entry>H</entry><entry>Hours</entry></row>
<row><entry>M</entry><entry>Minutes</entry></row>
<row><entry>S</entry><entry>Seconds</entry></row>
</tbody>
</tgroup>
</table>

<para>
Example: to select messages less than 1 month old, you would use
</para>

<screen>
Limit to messages matching: ~d &lt;1m
</screen>

<note>
<para>
All dates used when searching are relative to the
<emphasis>local</emphasis> time zone, so unless you change the setting
of your <link linkend="index-format">$index_format</link> to include a
<literal>%[...]</literal> format, these are <emphasis>not</emphasis> the
dates shown in the main index.
</para>
</note>

</sect3>

</sect2>

</sect1>

<sect1 id="markmsg">
<title>Marking Messages</title>

<para>
There are times that it's useful to ask Mutt to "remember" which message
you're currently looking at, while you move elsewhere in your mailbox.
You can do this with the <quote>mark-message</quote> operator, which
is bound to the <quote>~</quote> key by default.  Press this key to
enter an identifier for the marked message. When you want to return to
this message, press <quote>'</quote> and the name that you previously
entered.
</para>

<para>
(Message marking is really just a shortcut for defining a macro
that returns you to the current message by searching for its
Message-ID.  You can choose a different prefix by setting the <link
linkend="mark-macro-prefix">$mark_macro_prefix</link> variable.)
</para>
</sect1>

<sect1 id="tags">
<title>Using Tags</title>

<para>
Sometimes it is desirable to perform an operation on a group of messages
all at once rather than one at a time.  An example might be to save
messages to a mailing list to a separate folder, or to delete all
messages with a given subject.  To tag all messages matching a pattern,
use the <literal>&lt;tag-pattern&gt;</literal> function, which is bound
to <quote>shift-T</quote> by default.  Or you can select individual
messages by hand using the <literal>&lt;tag-message&gt;</literal>
function, which is bound to <quote>t</quote> by default.  See <link
linkend="patterns">patterns</link> for Mutt's pattern matching syntax.
</para>

<para>
Once you have tagged the desired messages, you can use the
<quote>tag-prefix</quote> operator, which is the <quote>;</quote>
(semicolon) key by default.  When the <quote>tag-prefix</quote> operator
is used, the <emphasis>next</emphasis> operation will be applied to all
tagged messages if that operation can be used in that manner.  If the
<link linkend="auto-tag">$auto_tag</link> variable is set, the next
operation applies to the tagged messages automatically, without
requiring the <quote>tag-prefix</quote>.
</para>

<para>
In <link linkend="macro"><command>macro</command>s</link> or <link
linkend="push"><command>push</command></link> commands, you can use the
<literal>&lt;tag-prefix-cond&gt;</literal> operator.  If there are no
tagged messages, Mutt will <quote>eat</quote> the rest of the macro to
abort it's execution.  Mutt will stop <quote>eating</quote> the macro
when it encounters the <literal>&lt;end-cond&gt;</literal> operator;
after this operator the rest of the macro will be executed as normal.
</para>

</sect1>

<sect1 id="hooks">
<title>Using Hooks</title>

<para>
A <emphasis>hook</emphasis> is a concept found in many other programs
which allows you to execute arbitrary commands before performing some
operation.  For example, you may wish to tailor your configuration based
upon which mailbox you are reading, or to whom you are sending mail.  In
the Mutt world, a <emphasis>hook</emphasis> consists of a <link
linkend="regexp">regular expression</link> or <link
linkend="patterns">pattern</link> along with a configuration
option/command.  See:

<itemizedlist>

<listitem>
<para>
<link linkend="account-hook"><command>account-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="charset-hook"><command>charset-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="crypt-hook"><command>crypt-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="fcc-hook"><command>fcc-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="fcc-save-hook"><command>fcc-save-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="folder-hook"><command>folder-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="charset-hook"><command>iconv-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="index-format-hook"><command>index-format-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="mbox-hook"><command>mbox-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="message-hook"><command>message-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="reply-hook"><command>reply-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="save-hook"><command>save-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="send-hook"><command>send-hook</command></link>
</para>
</listitem>

<listitem>
<para>
<link linkend="send2-hook"><command>send2-hook</command></link>
</para>
</listitem>

</itemizedlist>

for specific details on each type of <emphasis>hook</emphasis> available.
Also see <link linkend="compose-flow">Message Composition Flow</link> for
an overview of the composition process.
</para>

<note>
<para>
If a hook changes configuration settings, these changes remain effective
until the end of the current Mutt session. As this is generally not
desired, a <quote>default</quote> hook needs to be added before all
other hooks of that type to restore configuration defaults.
</para>
</note>

<example id="ex-default-hook">
<title>Specifying a <quote>default</quote> hook</title>
<screen>
send-hook . 'unmy_hdr From:'
send-hook ~C'^b@b\.b$' my_hdr from: c@c.c
</screen>
</example>

<para>
In <xref linkend="ex-default-hook"/>, by default the value of <link
linkend="from">$from</link> and <link
linkend="realname">$realname</link> is not overridden. When sending
messages either To: or Cc: to <literal>&lt;b@b.b&gt;</literal>, the
From: header is changed to <literal>&lt;c@c.c&gt;</literal>.
</para>

<sect2 id="pattern-hook" xreflabel="Message Matching in Hooks">
<title>Message Matching in Hooks</title>

<para>
Hooks that act upon messages (<command>message-hook</command>,
<command>reply-hook</command>, <command>send-hook</command>,
<command>send2-hook</command>, <command>save-hook</command>,
<command>fcc-hook</command>, <command>index-format-hook</command>)
are evaluated in a slightly different
manner. For the other types of hooks, a <link linkend="regexp">regular
expression</link> is sufficient.  But in dealing with messages a finer
grain of control is needed for matching since for different purposes you
want to match different criteria.
</para>

<para>
Mutt allows the use of the <link linkend="patterns">search
pattern</link> language for matching messages in hook commands.  This
works in exactly the same way as it would when
<emphasis>limiting</emphasis> or <emphasis>searching</emphasis> the
mailbox, except that you are restricted to those operators which match
information Mutt extracts from the header of the message (i.e., from,
to, cc, date, subject, etc.).
</para>

<para>
For example, if you wanted to set your return address based upon sending
mail to a specific address, you could do something like:
</para>

<screen>
send-hook '~t ^me@cs\.hmc\.edu$' 'my_hdr From: Mutt User &lt;user@host&gt;'
</screen>

<para>
which would execute the given command when sending mail to
<emphasis>me@cs.hmc.edu</emphasis>.
</para>

<para>
However, it is not required that you write the pattern to match using
the full searching language.  You can still specify a simple
<emphasis>regular expression</emphasis> like the other hooks, in which
case Mutt will translate your pattern into the full language, using the
translation specified by the <link
linkend="default-hook">$default_hook</link> variable.  The pattern is
translated at the time the hook is declared, so the value of <link
linkend="default-hook">$default_hook</link> that is in effect at that
time will be used.
</para>

</sect2>

<sect2 id="mailbox-hook" xreflabel="Mailbox Matching in Hooks">
<title>Mailbox Matching in Hooks</title>

<para>
Hooks that match against mailboxes (<command>folder-hook</command>,
<command>mbox-hook</command>) apply both <link linkend="regexp">regular
expression</link> syntax as well as <link linkend="shortcuts">mailbox
shortcut</link> expansion on the regexp parameter.  There is some
overlap between these, so special attention should be paid to the first
character of the regexp.
</para>

<screen>
# Here, ^ will expand to "the current mailbox" not "beginning of string":
folder-hook ^/home/user/Mail/bar "set sort=threads"

# If you want ^ to be interpreted as "beginning of string", one workaround
# is to enclose the regexp in parenthesis:
folder-hook (^/home/user/Mail/bar) "set sort=threads"

# This will expand to the default save folder for the alias "imap.example.com", which
# is probably not what you want:
folder-hook @imap.example.com "set sort=threads"

# A workaround is to use parenthesis or a backslash:
folder-hook (@imap.example.com) "set sort=threads"
folder-hook '\@imap.example.com' "set sort=threads"
</screen>

<para>
Keep in mind that mailbox shortcut expansion on the regexp parameter
takes place when the hook is initially parsed, not when the hook is
matching against a mailbox.  When Mutt starts up and is reading the
.muttrc, some mailbox shortcuts may not be usable.  For example, the
"current mailbox" shortcut, ^, will expand to an empty string because no
mailbox has been opened yet.  Mutt will issue an error for this case or
if the mailbox shortcut results in an empty regexp.
</para>

</sect2>

</sect1>

<sect1 id="setenv">
<title>Managing the Environment</title>

<para>
You can alter the environment that Mutt passes on to its child processes
using the <quote>setenv</quote> and <quote>unsetenv</quote> operators.
(N.B. These follow Mutt-style syntax, not shell-style!)  You can also
query current environment values by prefixing a <quote>?</quote> character.
</para>

<screen>
setenv TERM vt100
setenv ORGANIZATION "The Mutt Development Team"
unsetenv DISPLAY
setenv ?LESS
</screen>
</sect1>

<sect1 id="query">
<title>External Address Queries</title>

<para>
Mutt supports connecting to external directory databases such as LDAP,
ph/qi, bbdb, or NIS through a wrapper script which connects to Mutt
using a simple interface.  Using the <link
linkend="query-command">$query_command</link> variable, you specify the
wrapper command to use.  For example:
</para>

<screen>
set query_command = "mutt_ldap_query.pl %s"
</screen>

<para>
The wrapper script should accept the query on the command-line.  It
should return a one line message, then each matching response on a
single line, each line containing a tab separated address then name then
some other optional information.  On error, or if there are no matching
addresses, return a non-zero exit code and a one line error message.
</para>

<para>
An example multiple response output:
</para>

<screen>
Searching database ... 20 entries ... 3 matching:
me@cs.hmc.edu           Michael Elkins  mutt dude
blong@fiction.net       Brandon Long    mutt and more
roessler@does-not-exist.org        Thomas Roessler mutt pgp
</screen>

<para>
There are two mechanisms for accessing the query function of Mutt.  One
is to do a query from the index menu using the
<literal>&lt;query&gt;</literal> function (default: Q).  This will
prompt for a query, then bring up the query menu which will list the
matching responses.  From the query menu, you can select addresses to
create aliases, or to mail.  You can tag multiple addresses to mail,
start a new query, or have a new query appended to the current
responses.
</para>

<para>
The other mechanism for accessing the query function is for address
completion, similar to the alias completion.  In any prompt for address
entry, you can use the <literal>&lt;complete-query&gt;</literal>
function (default: ^T) to run a query based on the current address you
have typed.  Like aliases, Mutt will look for what you have typed back
to the last space or comma.  If there is a single response for that
query, Mutt will expand the address in place.  If there are multiple
responses, Mutt will activate the query menu.  At the query menu, you
can select one or more addresses to be added to the prompt.
</para>

</sect1>

<sect1 id="mailbox-formats">
<title>Mailbox Formats</title>

<para>
Mutt supports reading and writing of four different local mailbox
formats: mbox, MMDF, MH and Maildir.  The mailbox type is auto detected,
so there is no need to use a flag for different mailbox types.  When
creating new mailboxes, Mutt uses the default specified with the <link
linkend="mbox-type">$mbox_type</link> variable. A short description of
the formats follows.
</para>

<para>
<emphasis>mbox</emphasis>.  This is a widely used mailbox format for
UNIX.  All messages are stored in a single file.  Each message has a
line of the form:
</para>

<screen>
From me@cs.hmc.edu Fri, 11 Apr 1997 11:44:56 PST
</screen>

<para>
to denote the start of a new message (this is often referred to as the
<quote>From_</quote> line). The mbox format requires mailbox locking, is
prone to mailbox corruption with concurrently writing clients or
misinterpreted From_ lines. Depending on the environment, new mail
detection can be unreliable. Mbox folders are fast to open and easy to
archive.
</para>

<para>
<emphasis>MMDF</emphasis>.  This is a variant of the
<emphasis>mbox</emphasis> format.  Each message is surrounded by lines
containing <quote>^A^A^A^A</quote> (four times control-A's). The same
problems as for mbox apply (also with finding the right message
separator as four control-A's may appear in message bodies).
</para>

<para>
<emphasis>MH</emphasis>. A radical departure from
<emphasis>mbox</emphasis> and <emphasis>MMDF</emphasis>, a mailbox
consists of a directory and each message is stored in a separate file.
The filename indicates the message number (however, this is may not
correspond to the message number Mutt displays). Deleted messages are
renamed with a comma (<quote>,</quote>) prepended to the filename. Mutt
detects this type of mailbox by looking for either
<literal>.mh_sequences</literal> or <literal>.xmhcache</literal> files
(needed to distinguish normal directories from MH mailboxes). MH is more
robust with concurrent clients writing the mailbox, but still may suffer
from lost flags; message corruption is less likely to occur than with
mbox/mmdf. It's usually slower to open compared to mbox/mmdf since many
small files have to be read (Mutt provides <xref
linkend="header-caching"/> to greatly speed this process up).  Depending
on the environment, MH is not very disk-space efficient.
</para>

<para>
<emphasis>Maildir</emphasis>.  The newest of the mailbox formats, used
by the Qmail MTA (a replacement for sendmail).  Similar to
<emphasis>MH</emphasis>, except that it adds three subdirectories of the
mailbox: <emphasis>tmp</emphasis>, <emphasis>new</emphasis> and
<emphasis>cur</emphasis>.  Filenames for the messages are chosen in such
a way they are unique, even when two programs are writing the mailbox
over NFS, which means that no file locking is needed and corruption is
very unlikely. Maildir maybe slower to open without caching in Mutt, it
too is not very disk-space efficient depending on the environment. Since
no additional files are used for metadata (which is embedded in the
message filenames) and Maildir is locking-free, it's easy to sync across
different machines using file-level synchronization tools.
</para>

</sect1>

<sect1 id="shortcuts">
<title>Mailbox Shortcuts</title>

<para>
There are a number of built in shortcuts which refer to specific
mailboxes.  These shortcuts can be used anywhere you are prompted for a
file or mailbox path or in path-related configuration variables. Note
that these only work at the beginning of a string.
</para>

<table id="tab-mailbox-shortcuts">
<title>Mailbox shortcuts</title>
<tgroup cols="2">
<thead>
<row><entry>Shortcut</entry><entry>Refers to...</entry></row>
</thead>
<tbody>
<row><entry><literal>!</literal></entry><entry>your <link linkend="spoolfile">$spoolfile</link> (incoming) mailbox</entry></row>
<row><entry><literal>&gt;</literal></entry><entry>your <link linkend="mbox">$mbox</link> file</entry></row>
<row><entry><literal>&lt;</literal></entry><entry>your <link linkend="record">$record</link> file</entry></row>
<row><entry><literal>^</literal></entry><entry>the current mailbox</entry></row>
<row><entry><literal>-</literal> or <literal>!!</literal></entry><entry>the file you've last visited</entry></row>
<row><entry><literal>~</literal></entry><entry>your home directory</entry></row>
<row><entry><literal>=</literal> or <literal>+</literal></entry><entry>your <link linkend="folder">$folder</link> directory</entry></row>
<row><entry><emphasis>@alias</emphasis></entry><entry>to the <link linkend="save-hook">default save folder</link> as determined by the address of the alias</entry></row>
</tbody>
</tgroup>
</table>

<para>
For example, to store a copy of outgoing messages in the folder they
were composed in, a <link
linkend="folder-hook"><command>folder-hook</command></link> can be used
to set <link linkend="record">$record</link>:
</para>

<screen>
folder-hook . 'set record=^'</screen>

</sect1>

<sect1 id="using-lists">
<title>Handling Mailing Lists</title>

<para>
Mutt has a few configuration options that make dealing with large
amounts of mail easier.  The first thing you must do is to let Mutt know
what addresses you consider to be mailing lists (technically this does
not have to be a mailing list, but that is what it is most often used
for), and what lists you are subscribed to.  This is accomplished
through the use of the <link linkend="lists"><command>lists</command>
and <command>subscribe</command></link> commands in your
<literal>.muttrc</literal>.  Alternatively or additionally, you can set
<link linkend="auto-subscribe">$auto_subscribe</link> to automatically
subscribe addresses found in a <literal>List-Post</literal> header.
</para>

<para>
Now that Mutt knows what your mailing lists are, it can do several
things, the first of which is the ability to show the name of a list
through which you received a message (i.e., of a subscribed list) in the
<emphasis>index</emphasis> menu display.  This is useful to distinguish
between personal and list mail in the same mailbox.  In the <link
linkend="index-format">$index_format</link> variable, the expando
<quote>%L</quote> will print the string <quote>To &lt;list&gt;</quote>
when <quote>list</quote> appears in the <quote>To</quote> field, and
<quote>Cc &lt;list&gt;</quote> when it appears in the <quote>Cc</quote>
field (otherwise it prints the name of the author).
</para>

<para>
Often times the <quote>To</quote> and <quote>Cc</quote> fields in
mailing list messages tend to get quite large. Most people do not bother
to remove the author of the message they reply to from the list,
resulting in two or more copies being sent to that person.  The
<literal>&lt;list-reply&gt;</literal> function, which by default is
bound to <quote>L</quote> in the <emphasis>index</emphasis> menu and
<emphasis>pager</emphasis>, helps reduce the clutter by only replying to
the known mailing list addresses instead of all recipients (except as
specified by <literal>Mail-Followup-To</literal>, see below).
</para>

<para>
Mutt also supports the <literal>Mail-Followup-To</literal> header.  When
you send a message to a list of recipients which includes one or several
known mailing lists, and if the <link
linkend="followup-to">$followup_to</link> option is set, Mutt will
generate a Mail-Followup-To header.  If any of the recipients are
subscribed mailing lists, this header will contain all the recipients
to whom you send this message, but not your address. This indicates that
group-replies or list-replies (also known as <quote>followups</quote>)
to this message should only be sent to the original recipients of the
message, and not separately to you - you'll receive your copy through
one of the mailing lists you are subscribed to.  If none of the
recipients are subscribed mailing lists, the header will also contain
your address, ensuring you receive a copy of replies.
</para>

<para>
Conversely, when group-replying or list-replying to a message which has
a <literal>Mail-Followup-To</literal> header, Mutt will respect this
header if the <link
linkend="honor-followup-to">$honor_followup_to</link> configuration
variable is set.  Using <link linkend="list-reply">list-reply</link>
will in this case also make sure that the reply goes to the mailing
list, even if it's not specified in the list of recipients in the
<literal>Mail-Followup-To</literal>.
</para>

<note>
<para>
When header editing is enabled, you can create a
<literal>Mail-Followup-To</literal> header manually.  Mutt will only
auto-generate this header if it doesn't exist when you send the message.
</para>
</note>

<para>
The other method some mailing list admins use is to generate a
<quote>Reply-To</quote> field which points back to the mailing list
address rather than the author of the message.  This can create problems
when trying to reply directly to the author in private, since most mail
clients will automatically reply to the address given in the
<quote>Reply-To</quote> field.  Mutt uses the <link
linkend="reply-to">$reply_to</link> variable to help decide which
address to use.  If set to <emphasis>ask-yes</emphasis> or
<emphasis>ask-no</emphasis>, you will be prompted as to whether or not
you would like to use the address given in the <quote>Reply-To</quote>
field, or reply directly to the address given in the <quote>From</quote>
field.  When set to <emphasis>yes</emphasis>, the
<quote>Reply-To</quote> field will be used when present.
</para>

<para>
The <quote>X-Label:</quote> header field can be used to further identify
mailing lists or list subject matter (or just to annotate messages
individually).  The <link linkend="index-format">$index_format</link>
variable's <quote>%y</quote> and <quote>%Y</quote> expandos can be used
to expand <quote>X-Label:</quote> fields in the index, and Mutt's
pattern-matcher can match regular expressions to <quote>X-Label:</quote>
fields with the <quote>~y</quote> selector.  <quote>X-Label:</quote> is
not a standard message header field, but it can easily be inserted by
procmail and other mail filtering agents.
</para>

<para>
You can change or delete the <quote>X-Label:</quote> field within
Mutt using the <quote>edit-label</quote> command, bound to the
<quote>y</quote> key by default.  This works for tagged messages, too.
While in the edit-label function, pressing the &lt;complete&gt;
binding (TAB, by default) will perform completion against all labels
currently in use.
</para>

<para>
Lastly, Mutt has the ability to <link linkend="sort">sort</link> the
mailbox into <link linkend="threads">threads</link>.  A thread is a
group of messages which all relate to the same subject.  This is usually
organized into a tree-like structure where a message and all of its
replies are represented graphically.  If you've ever used a threaded
news client, this is the same concept.  It makes dealing with large
volume mailing lists easier because you can easily delete uninteresting
threads and quickly find topics of value.
</para>

</sect1>

<sect1 id="display-munging">
<title>Display Munging</title>

<para>
Working within the confines of a console or terminal window, it is
often useful to be able to modify certain information elements in a
non-destructive way -- to change how they display, without changing
the stored value of the information itself.  This is especially so of
message subjects, which may often be polluted with extraneous metadata
that either is reproduced elsewhere, or is of secondary interest.
</para>

<cmdsynopsis>
<command>subjectrx</command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">replacement</replaceable>
</arg>

<command>unsubjectrx</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
<literal>subjectrx</literal> specifies a regular expression
<quote>pattern</quote> which, if detected in a message subject, causes
the subject to be replaced with the <quote>replacement</quote> value.
The replacement is subject to substitutions in the same way as for the
<link linkend="spam">spam</link> command: <literal>%L</literal> for the text
to the left of the match, <literal>%R</literal> for text to the right of the
match, and <literal>%1</literal> for the first subgroup in the match (etc).
If you simply want to erase the match, set it to <quote>%L%R</quote>.
Any number of <literal>subjectrx</literal> commands may coexist.
</para>

<para>
Note this well: the <quote>replacement</quote> value replaces the
entire subject, not just the match!
</para>

<para>
<literal>unsubjectrx</literal> removes a given subjectrx from the
substitution list.  If <literal>*</literal> is used as the pattern,
all substitutions will be removed.
</para>

<example id="ex-subjectrx">
<title>Subject Munging</title>
<screen>
# Erase [rt #12345] tags from Request Tracker (RT) e-mails
subjectrx '\[rt #[0-9]+\] *' '%L%R'

# Servicedesk is another RT that sends more complex subjects.
# Keep the ticket number.
subjectrx '\[servicedesk #([0-9]+)\] ([^.]+)\.([^.]+) - (new|open|pending|update) - ' '%L[#%1] %R'

# Strip out annoying [listname] prefixes in subjects
subjectrx '\[[^]]*\]:? *' '%L%R'
</screen>
</example>

</sect1>

<sect1 id="new-mail">
<title>New Mail Detection</title>

<para>
Mutt supports setups with multiple folders, allowing all of them to be
monitored for new mail (see <xref linkend="mailboxes"/> for details).
</para>

<sect2 id="new-mail-formats">
<title>How New Mail Detection Works</title>

<para>
For Mbox and Mmdf folders, new mail is detected by comparing access
and/or modification times of files: Mutt assumes a folder has new mail
if it wasn't accessed after it was last modified. Utilities like
<literal>biff</literal> or <literal>frm</literal> or any other program
which accesses the mailbox might cause Mutt to never detect new mail for
that mailbox if they do not properly reset the access time. Other
possible causes of Mutt not detecting new mail in these folders are
backup tools (updating access times) or filesystems mounted without
access time update support (for Linux systems, see the
<literal>relatime</literal> option).
</para>

<note>
<para>
Contrary to older Mutt releases, it now maintains the new mail status of
a folder by properly resetting the access time if the folder contains at
least one message which is neither read, nor deleted, nor marked as old.
</para>
</note>

<para>
In cases where new mail detection for Mbox or Mmdf folders appears to be
unreliable, the <link linkend="check-mbox-size">$check_mbox_size</link>
option can be used to make Mutt track and consult file sizes for new
mail detection instead which won't work for size-neutral changes.
</para>

<para>
New mail for Maildir is assumed if there is one message in the
<literal>new/</literal> subdirectory which is not marked deleted (see
<link linkend="maildir-trash">$maildir_trash</link>). For MH folders, a
mailbox is considered having new mail if there's at least one message in
the <quote>unseen</quote> sequence as specified by <link
linkend="mh-seq-unseen">$mh_seq_unseen</link>.
</para>

<para>
Mutt does not poll POP3 folders for new mail, it only periodically
checks the currently opened folder (if it's a POP3 folder).
</para>

<para>
For IMAP, by default Mutt uses recent message counts provided by the
server to detect new mail. If the <link
linkend="imap-idle">$imap_idle</link> option is set, it'll use the IMAP
IDLE extension if advertised by the server.
</para>

<para>
The <link linkend="mail-check-recent">$mail_check_recent</link>
option changes whether Mutt will notify you of new mail in an
already visited mailbox.  When set (the default) it will only notify
you of new mail received since the last time you opened the mailbox.
When unset, Mutt will notify you of any new mail in the mailbox.
</para>

</sect2>

<sect2 id="new-mail-polling">
<title>Polling For New Mail</title>

<para>
When in the index menu and being idle (also see <link
linkend="timeout">$timeout</link>), Mutt periodically checks for new
mail in all folders which have been configured via the
<command>mailboxes</command> command. The interval depends on the folder
type: for local/IMAP folders it consults <link
linkend="mail-check">$mail_check</link> and <link
linkend="pop-checkinterval">$pop_checkinterval</link> for POP folders.
</para>

<para>
Outside the index menu the directory browser supports checking for new
mail using the <literal>&lt;check-new&gt;</literal> function which is
unbound by default. Pressing TAB will bring up a menu showing the files
specified by the <command>mailboxes</command> command, and indicate
which contain new messages. Mutt will automatically enter this mode when
invoked from the command line with the <literal>-y</literal> option.
</para>

<para>
For the pager, index and directory browser menus, Mutt contains the
<literal>&lt;buffy-list&gt;</literal> function (bound to
<quote>.</quote> by default) which will print a list of folders with new
mail in the command line at the bottom of the screen.
</para>

<para>
For the index, by default Mutt displays the number of mailboxes with new
mail in the status bar, please refer to the <link
linkend="status-format">$status_format</link> variable for details.
</para>

<para>
When changing folders, Mutt fills the prompt with the first folder from
the mailboxes list containing new mail (if any), pressing
<literal>&lt;Space&gt;</literal> will cycle through folders with new
mail.  The (by default unbound) function
<literal>&lt;next-unread-mailbox&gt;</literal> in the index can be used
to immediately open the next folder with unread mail (if any).
</para>

</sect2>

<sect2 id="new-mail-monitoring">
<title>Monitoring New Mail</title>

<para>
When the <emphasis>Inotify</emphasis> mechanism for monitoring of
files is supported (Linux only) and not disabled at compilation time,
Mutt immediately notifies about new mail for all folders configured via
the <link linkend="mailboxes"><command>mailboxes</command></link>
command.  Dependent on
<link linkend="mailbox-formats">mailbox format</link> also added
<emphasis>old</emphasis> mails are tracked (not for Maildir).
</para>

<para>
No configuration variables are available.  Trace output is given when
debugging is enabled via <link linkend="tab-commandline-options">command
line option</link> <literal>-d3</literal>.  The lower level 2 only shows
errors, the higher level 5 all including raw Inotify events.
</para>

<note>
<para>
Getting events about new mail is limited to the capabilities of the
underlying mechanism.  <emphasis>Inotify</emphasis> only reports local
changes, i. e. new mail notification works for mails delivered by an
agent on the same machine as Mutt, but not when delivered remotely on
a network file system as NFS.  Also the monitoring handles might fail
in rare conditions, so you better don't completely rely on this
feature.
</para>
</note>

</sect2>

<sect2 id="calc-mailbox-counts">
<title>Calculating Mailbox Message Counts</title>

<para>
If <link linkend="mail-check-stats">$mail_check_stats</link> is set,
Mutt will periodically calculate the unread, flagged, and total
message counts for each mailbox watched by the
<command>mailboxes</command> command.  This calculation takes place at
the same time as new mail polling, but is controlled by a separate
timer: <link
linkend="mail-check-stats-interval">$mail_check_stats_interval</link>.
</para>

<para>
The sidebar can display these message counts.  See <link
linkend="sidebar-format">$sidebar_format</link>.
</para>

</sect2>

</sect1>

<sect1 id="editing-threads">
<title>Editing Threads</title>

<para>
Mutt has the ability to dynamically restructure threads that are broken
either by misconfigured software or bad behavior from some
correspondents. This allows to clean your mailboxes from these
annoyances which make it hard to follow a discussion.
</para>

<sect2 id="link-threads">
<title>Linking Threads</title>

<para>
Some mailers tend to <quote>forget</quote> to correctly set the
<quote>In-Reply-To:</quote> and <quote>References:</quote> headers when
replying to a message. This results in broken discussions because Mutt
has not enough information to guess the correct threading.  You can fix
this by tagging the reply, then moving to the parent message and using
the <literal>&lt;link-threads&gt;</literal> function (bound to &amp; by
default). The reply will then be connected to this parent message.
</para>

<para>
You can also connect multiple children at once, tagging them and using
the <literal>&lt;tag-prefix&gt;</literal> command (<quote>;</quote>) or
the <link linkend="auto-tag">$auto_tag</link> option.
</para>

</sect2>

<sect2 id="break-threads">
<title>Breaking Threads</title>

<para>
On mailing lists, some people are in the bad habit of starting a new
discussion by hitting <quote>reply</quote> to any message from the list
and changing the subject to a totally unrelated one.  You can fix such
threads by using the <literal>&lt;break-thread&gt;</literal> function
(bound by default to #), which will turn the subthread starting from the
current message into a whole different thread.
</para>

</sect2>

</sect1>

<sect1 id="dsn">
<title>Delivery Status Notification (DSN) Support</title>

<para>
RFC1894 defines a set of MIME content types for relaying information
about the status of electronic mail messages.  These can be thought of
as <quote>return receipts.</quote>
</para>

<para>
To support DSN, there are two variables. <link
linkend="dsn-notify">$dsn_notify</link> is used to request receipts for
different results (such as failed message, message delivered, etc.).
<link linkend="dsn-return">$dsn_return</link> requests how much of your
message should be returned with the receipt (headers or full message).
</para>

<para>
When using <link linkend="sendmail">$sendmail</link> for mail delivery,
you need to use either Berkeley sendmail 8.8.x (or greater) a MTA
supporting DSN command line options compatible to Sendmail: The -N and
-R options can be used by the mail client to make requests as to what
type of status messages should be returned. Please consider your MTA
documentation whether DSN is supported.
</para>

<para>
For SMTP delivery using <link linkend="smtp-url">$smtp_url</link>, it
depends on the capabilities announced by the server whether Mutt will
attempt to request DSN or not.
</para>

</sect1>

<sect1 id="urlview">
<title>Start a WWW Browser on URLs</title>

<para>
If a message contains URLs, it is efficient to get a menu with all the
URLs and start a WWW browser on one of them.  This functionality is
provided by the external urlview program which can be retrieved at
<ulink
url="https://github.com/sigpipe/urlview">https://github.com/sigpipe/urlview</ulink>
and the configuration commands:
</para>

<screen>
macro index \cb |urlview\n
macro pager \cb |urlview\n
</screen>

</sect1>

<sect1 id="echo">
<title>Echoing Text</title>

<para>
Usage:
</para>

<cmdsynopsis>
<command>echo</command>
<arg choice="plain">
<replaceable class="parameter">message</replaceable>
</arg>
</cmdsynopsis>

<para>
You can print messages to the message window using the "echo" command.
This might be useful after a macro finishes executing.  After printing
the message, echo will pause for the number of seconds specified by
<link linkend="sleep-time">$sleep_time</link>.
</para>

<screen>
echo "Sourcing muttrc file"

unset confirmappend
macro index ,a "&lt;save-message&gt;=archive&lt;enter&gt;&lt;enter-command&gt;echo 'Saved to archive'&lt;enter&gt;"
</screen>

</sect1>

<sect1 id="compose-flow">
  <title>Message Composition Flow</title>

  <para>
    This is a brief overview of the steps Mutt takes during message
    composition.  It also shows the order and timing of hook execution.
  </para>

  <itemizedlist>
    <listitem>
      <para>
        Reply envelope settings.  <link
        linkend="reverse-name">$reverse_name</link> processing.  To,
        Cc, Subject, References header defaults.
      </para>
    </listitem>
    <listitem>
      <para>
        <link linkend="my-hdr">my_hdr</link> processing for To, Cc,
        Bcc, Subject headers.
      </para>
    </listitem>
    <listitem>
      <para>
        Prompts for To, Cc, Bcc, Subject headers.
        See <link linkend="askcc">$askcc</link>,
        <link linkend="askbcc">$askbcc</link>,
        <link linkend="fast-reply">$fast_reply</link>.
      </para>
    </listitem>
    <listitem>
      <para>
        From header setting.  Note: this is so <link
        linkend="send-hook">send-hook</link>s below can match ~P, but
        From is re-set further below in case a send-hook changes the
        value.
      </para>
    </listitem>
    <listitem>
      <para>
        <link linkend="reply-hook">reply-hook</link>
      </para>
    </listitem>
    <listitem>
      <para>
        <link linkend="send-hook">send-hook</link>
      </para>
    </listitem>
    <listitem>
      <para>
        From header setting.
      </para>
    </listitem>
    <listitem>
      <para>
        <link linkend="my-hdr">my_hdr</link> processing for From,
        Reply-To, Message-ID and user-defined headers.  The To, Cc,
        Bcc, Subject, and Return-Path headers are ignored at this
        stage.
      </para>
    </listitem>
    <listitem>
      <para>
        Message body and signature generation.
      </para>
    </listitem>
    <listitem>
      <para>
        <link linkend="send2-hook">send2-hook</link>
      </para>
    </listitem>
    <listitem>
      <para>
        <link linkend="realname">$realname</link> part of From header setting.
      </para>
    </listitem>
    <listitem>
      <para>
        <link linkend="editor">$editor</link> invocation for the
        message.
      </para>
    </listitem>
    <listitem>
      <para>
        <link linkend="send2-hook">send2-hook</link>
      </para>
    </listitem>
    <listitem>
      <para>
        Cryptographic settings.
      </para>
    </listitem>
    <listitem>
      <para>
        <link linkend="fcc-hook">fcc-hook</link>.  Fcc setting.
      </para>
    </listitem>
    <listitem>
      <para>
        <link linkend="compose-menu">Compose menu</link>.  Note: <link
        linkend="send2-hook">send2-hook</link> is evaluated each time
        the headers are changed.
      </para>
    </listitem>
    <listitem>
      <para>
        Message encryption and signing.  Key selection.
      </para>
    </listitem>
    <listitem>
      <para>
        Fcc saving if <link
        linkend="fcc-before-send">$fcc_before_send</link> is set.  (Note the
        variable documentation for caveats of Fcc'ing before sending.)
      </para>
    </listitem>
    <listitem>
      <para>
        Message sending.
      </para>
    </listitem>
    <listitem>
      <para>
        Fcc saving if <link
        linkend="fcc-before-send">$fcc_before_send</link> is unset
        (the default).  Note: prior to version 1.12, the Fcc was saved
        before sending the message.  It is now by default saved
        afterwards, but if the saving fails, the user is prompted.
      </para>
    </listitem>
  </itemizedlist>
</sect1>

<sect1 id="misc-topics">
<title>Miscellany</title>

<para>
This section documents various features that fit nowhere else.
</para>

<variablelist>
<varlistentry>
<term>
Address normalization
</term>
<listitem>
<para>
Mutt normalizes all e-mail addresses to the simplest form possible. If
an address contains a realname, the form <emphasis>Joe User
&lt;joe@example.com&gt;</emphasis> is used and the pure e-mail address
without angle brackets otherwise, i.e. just
<emphasis>joe@example.com</emphasis>.
</para>
<para>
This normalization affects all headers Mutt generates including aliases.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
Initial folder selection
</term>
<listitem>
<para>
The folder Mutt opens at startup is determined as follows: the folder
specified in the <literal>$MAIL</literal> environment variable if
present. Otherwise, the value of <literal>$MAILDIR</literal> is taken
into account. If that isn't present either, Mutt takes the user's
mailbox in the mailspool as determined at compile-time (which may also
reside in the home directory). The <link
linkend="spoolfile">$spoolfile</link> setting overrides this
selection. Highest priority has the mailbox given with the
<literal>-f</literal> command line option.
</para>
</listitem>
</varlistentry>
</variablelist>

</sect1>

</chapter>

<chapter id="mimesupport">
<title>Mutt's MIME Support</title>

<para>
Quite a bit of effort has been made to make Mutt the premier text-mode
MIME MUA.  Every effort has been made to provide the functionality that
the discerning MIME user requires, and the conformance to the standards
wherever possible.  When configuring Mutt for MIME, there are two extra
types of configuration files which Mutt uses.  One is the
<literal>mime.types</literal> file, which contains the mapping of file
extensions to IANA MIME types.  The other is the
<literal>mailcap</literal> file, which specifies the external commands
to use for handling specific MIME types.
</para>

<sect1 id="using-mime">
<title>Using MIME in Mutt</title>

<sect2 id="mime-overview">
<title>MIME Overview</title>

<para>
MIME is short for <quote>Multipurpose Internet Mail Extension</quote>
and describes mechanisms to internationalize and structure mail
messages. Before the introduction of MIME, messages had a single text
part and were limited to us-ascii header and content. With MIME,
messages can have attachments (and even attachments which itself have
attachments and thus form a tree structure), nearly arbitrary characters
can be used for sender names, recipients and subjects.
</para>

<para>
Besides the handling of non-ascii characters in message headers, to Mutt
the most important aspect of MIME are so-called MIME types. These are
constructed using a <emphasis>major</emphasis> and
<emphasis>minor</emphasis> type separated by a forward slash.  These
specify details about the content that follows. Based upon these, Mutt
decides how to handle this part. The most popular major type is
<quote><literal>text</literal></quote> with minor types for plain text,
HTML and various other formats. Major types also exist for images,
audio, video and of course general application data (e.g. to separate
cryptographically signed data with a signature, send office documents,
and in general arbitrary binary data). There's also the
<literal>multipart</literal> major type which represents the root of a
subtree of MIME parts. A list of supported MIME types can be found in
<xref linkend="supported-mime-types"/>.
</para>

<para>
MIME also defines a set of encoding schemes for transporting MIME
content over the network: <literal>7bit</literal>,
<literal>8bit</literal>, <literal>quoted-printable</literal>,
<literal>base64</literal> and <literal>binary</literal>. There're some
rules when to choose what for encoding headers and/or body (if needed),
and Mutt will in general make a good choice.
</para>

<para>
Mutt does most of MIME encoding/decoding behind the scenes to form
messages conforming to MIME on the sending side. On reception, it can be
flexibly configured as to how what MIME structure is displayed (and if
it's displayed): these decisions are based on the content's MIME type.
There are three areas/menus in dealing with MIME: the pager (while
viewing a message), the attachment menu and the compose menu.
</para>

</sect2>

<sect2 id="mime-pager">
<title>Viewing MIME Messages in the Pager</title>

<para>
When you select a message from the index and view it in the pager, Mutt
decodes as much of a message as possible to a text representation.  Mutt
internally supports a number of MIME types, including the
<literal>text</literal> major type (with all minor types), the
<literal>message/rfc822</literal> (mail messages) type and some
<literal>multipart</literal> types. In addition, it recognizes a variety
of PGP MIME types, including PGP/MIME and
<literal>application/pgp</literal>.
</para>

<para>
Mutt will denote attachments with a couple lines describing them.
These lines are of the form:
</para>

<screen>
[-- Attachment #1: Description --]
[-- Type: text/plain, Encoding: 7bit, Size: 10000 --]
</screen>

<para>
Where the <emphasis>Description</emphasis> is the description or
filename given for the attachment, and the <emphasis>Encoding</emphasis>
is one of the already mentioned content encodings.
</para>

<para>
If Mutt cannot deal with a MIME type, it will display a message like:
</para>

<screen>
[-- image/gif is unsupported (use 'v' to view this part) --]
</screen>

</sect2>

<sect2 id="attach-menu">
<title>The Attachment Menu</title>

<para>
The default binding for <literal>&lt;view-attachments&gt;</literal> is
<quote>v</quote>, which displays the attachment menu for a message.  The
attachment menu displays a list of the attachments in a message.  From
the attachment menu, you can save, print, pipe, delete, and view
attachments.  You can apply these operations to a group of attachments
at once, by tagging the attachments and by using the
<literal>&lt;tag-prefix&gt;</literal> operator.  You can also reply to
the current message from this menu, and only the current attachment (or
the attachments tagged) will be quoted in your reply.  You can view
attachments as text, or view them using the mailcap viewer definition
(the mailcap mechanism is explained later in detail).
</para>

<para>
Finally, you can apply the usual message-related functions (like <link
linkend="resend-message"><literal>&lt;resend-message&gt;</literal></link>,
and the <literal>&lt;reply&gt;</literal> and
<literal>&lt;forward&gt;</literal> functions) to attachments of type
<literal>message/rfc822</literal>.
</para>

<para>
See table <xref linkend="tab-attachment-bindings"/> for all available
functions.
</para>

</sect2>

<sect2 id="compose-menu">
<title>The Compose Menu</title>

<para>
The compose menu is the menu you see before you send a message.  It
allows you to edit the recipient list, the subject, and other aspects of
your message.  It also contains a list of the attachments of your
message, including the main body.  From this menu, you can print, copy,
filter, pipe, edit, compose, review, and rename an attachment or a list
of tagged attachments.  You can also modifying the attachment
information, notably the type, encoding and description.
</para>

<para>
Attachments appear as follows by default:
</para>

<screen>
- 1 [text/plain, 7bit, 1K]           /tmp/mutt-euler-8082-0 &lt;no description&gt;
  2 [applica/x-gunzip, base64, 422K] ~/src/mutt-0.85.tar.gz &lt;no description&gt;
</screen>

<para>
The <quote>-</quote> denotes that Mutt will delete the file after
sending (or postponing, or canceling) the message.  It can be toggled
with the <literal>&lt;toggle-unlink&gt;</literal> command (default: u).
The next field is the MIME content-type, and can be changed with the
<literal>&lt;edit-type&gt;</literal> command (default: ^T).  The next
field is the encoding for the attachment, which allows a binary message
to be encoded for transmission on 7bit links.  It can be changed with
the <literal>&lt;edit-encoding&gt;</literal> command (default: ^E).  The
next field is the size of the attachment, rounded to kilobytes or
megabytes.  The next field is the filename, which can be changed with
the <literal>&lt;rename-file&gt;</literal> command (default: R).  The
final field is the description of the attachment, and can be changed
with the <literal>&lt;edit-description&gt;</literal> command (default:
d). See <link linkend="attach-format">$attach_format</link> for a full
list of available expandos to format this display to your needs.
</para>

</sect2>

</sect1>

<sect1 id="mime-types">
<title>MIME Type Configuration with <literal>mime.types</literal></title>

<para>
To get most out of MIME, it's important that a MIME part's content type
matches the content as closely as possible so that the recipient's
client can automatically select the right viewer for the
content. However, there's no reliable for Mutt to know how to detect
every possible file type. Instead, it uses a simple plain text mapping
file that specifies what file extension corresponds to what MIME
type. This file is called <literal>mime.types</literal>.
</para>

<para>
When you add an attachment to your mail message, Mutt searches your
personal <literal>mime.types</literal> file at
<literal>$HOME/.mime.types</literal>, and then the system
<literal>mime.types</literal> file at
<literal>/usr/local/share/mutt/mime.types</literal> or
<literal>/etc/mime.types</literal>
</para>

<para>
Each line starts with the full MIME type, followed by a space and
space-separated list of file extensions. For example you could use:
</para>

<example id="ex-mime-types">
<title><literal>mime.types</literal></title>
<screen>
application/postscript          ps eps
application/pgp                 pgp
audio/x-aiff                    aif aifc aiff
</screen>
</example>

<para>
A sample <literal>mime.types</literal> file comes with the Mutt
distribution, and should contain most of the MIME types you are likely
to use.
</para>

<para>
If Mutt can not determine the MIME type by the extension of the file you
attach, it will run the command specified in
<link linkend="mime-type-query-command">$mime_type_query_command</link>.
If that command is not specified, Mutt will look at the file.  If the file
is free of binary information, Mutt will assume that the file is plain text,
and mark it as <literal>text/plain</literal>.  If the file contains binary
information, then Mutt will mark it as
<literal>application/octet-stream</literal>.  You can change the MIME
type that Mutt assigns to an attachment by using the
<literal>&lt;edit-type&gt;</literal> command from the compose menu
(default: ^T), see <xref linkend="supported-mime-types"/> for supported
major types. Mutt recognizes all of these if the appropriate entry is
found in the <literal>mime.types</literal> file. Non-recognized mime
types should only be used if the recipient of the message is likely to
be expecting such attachments.
</para>

<table id="supported-mime-types">
<title>Supported MIME types</title>
<tgroup cols="3">
<thead>
<row><entry>MIME major type</entry><entry>Standard</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>application</literal></entry><entry>yes</entry><entry>General application data</entry></row>
<row><entry><literal>audio</literal></entry><entry>yes</entry><entry>Audio data</entry></row>
<row><entry><literal>image</literal></entry><entry>yes</entry><entry>Image data</entry></row>
<row><entry><literal>message</literal></entry><entry>yes</entry><entry>Mail messages, message status information</entry></row>
<row><entry><literal>model</literal></entry><entry>yes</entry><entry>VRML and other modeling data</entry></row>
<row><entry><literal>multipart</literal></entry><entry>yes</entry><entry>Container for other MIME parts</entry></row>
<row><entry><literal>text</literal></entry><entry>yes</entry><entry>Text data</entry></row>
<row><entry><literal>video</literal></entry><entry>yes</entry><entry>Video data</entry></row>
<row><entry><literal>chemical</literal></entry><entry>no</entry><entry>Mostly molecular data</entry></row>
</tbody>
</tgroup>
</table>

<para>
MIME types are not arbitrary, they need to be assigned by <ulink
url="http://www.iana.org/assignments/media-types/">IANA</ulink>.
</para>

</sect1>

<sect1 id="mailcap">
<title>MIME Viewer Configuration with Mailcap</title>

<para>
Mutt supports RFC 1524 MIME Configuration, in particular the Unix
specific format specified in Appendix A of RFC 1524.  This file format
is commonly referred to as the <quote>mailcap</quote> format.  Many MIME
compliant programs utilize the mailcap format, allowing you to specify
handling for all MIME types in one place for all programs.  Programs
known to use this format include Firefox, lynx and metamail.
</para>

<para>
In order to handle various MIME types that Mutt doesn't have built-in
support for, it parses a series of external configuration files to find
an external handler. The default search string for these files is a
colon delimited list containing the following files:
</para>

<orderedlist>
<listitem><para><literal>$HOME/.mailcap</literal></para></listitem>
<listitem><para><literal>$PKGDATADIR/mailcap</literal></para></listitem>
<listitem><para><literal>$SYSCONFDIR/mailcap</literal></para></listitem>
<listitem><para><literal>/etc/mailcap</literal></para></listitem>
<listitem><para><literal>/usr/etc/mailcap</literal></para></listitem>
<listitem><para><literal>/usr/local/etc/mailcap</literal></para></listitem>
</orderedlist>

<para>
where <literal>$HOME</literal> is your home directory. The
<literal>$PKGDATADIR</literal> and the <literal>$SYSCONFDIR</literal>
directories depend on where Mutt is installed: the former is the default
for shared data, the latter for system configuration files.
</para>

<para>
The default search path can be obtained by running the following
command:
</para>

<screen>
mutt -nF /dev/null -Q mailcap_path
</screen>

<para>
In particular, the metamail distribution will install a mailcap file,
usually as <literal>/usr/local/etc/mailcap</literal>, which contains
some baseline entries.
</para>

<sect2 id="mailcap-basics">
<title>The Basics of the Mailcap File</title>

<para>
A mailcap file consists of a series of lines which are comments, blank,
or definitions.
</para>

<para>
A comment line consists of a # character followed by anything you want.
</para>

<para>
A blank line is blank.
</para>

<para>
A definition line consists of a content type, a view command, and any
number of optional fields.  Each field of a definition line is divided
by a semicolon <quote>;</quote> character.
</para>

<para>
The content type is specified in the MIME standard
<quote>type/subtype</quote> notation.  For example,
<literal>text/plain</literal>, <literal>text/html</literal>,
<literal>image/gif</literal>, etc.  In addition, the mailcap format
includes two formats for wildcards, one using the special
<quote>*</quote> subtype, the other is the implicit wild, where you only
include the major type.  For example, <literal>image/*</literal>, or
<literal>video</literal> will match all image types and video types,
respectively.
</para>

<para>
The view command is a Unix command for viewing the type specified. There
are two different types of commands supported. The default is to send
the body of the MIME message to the command on stdin. You can change
this behavior by using <literal>%s</literal> as a parameter to your view
command.  This will cause Mutt to save the body of the MIME message to a
temporary file, and then call the view command with the
<literal>%s</literal> replaced by the name of the temporary file. In
both cases, Mutt will turn over the terminal to the view program until
the program quits, at which time Mutt will remove the temporary file if
it exists. This means that mailcap does <emphasis>not</emphasis> work
out of the box with programs which detach themselves from the terminal
right after starting, like <literal>open</literal> on Mac OS X. In order
to nevertheless use these programs with mailcap, you probably need
custom shell scripts.
</para>

<para>
So, in the simplest form, you can send a <literal>text/plain</literal>
message to the external pager more on standard input:
</para>

<screen>
text/plain; more
</screen>

<para>
Or, you could send the message as a file:
</para>

<screen>
text/plain; more %s
</screen>

<para>
Perhaps you would like to use lynx to interactively view a
<literal>text/html</literal> message:
</para>

<screen>
text/html; lynx %s
</screen>

<para>
In this case, lynx does not support viewing a file from standard input,
so you must use the <literal>%s</literal> syntax.
</para>

<note>
<para>
<emphasis>Some older versions of lynx contain a bug where they will
check the mailcap file for a viewer for <literal>text/html</literal>.
They will find the line which calls lynx, and run it.  This causes lynx
to continuously spawn itself to view the object.</emphasis>
</para>
</note>

<para>
On the other hand, maybe you don't want to use lynx interactively, you
just want to have it convert the <literal>text/html</literal> to
<literal>text/plain</literal>, then you can use:
</para>

<screen>
text/html; lynx -dump %s | more
</screen>

<para>
Perhaps you wish to use lynx to view <literal>text/html</literal> files,
and a pager on all other text formats, then you would use the following:
</para>

<screen>
text/html; lynx %s
text/*; more
</screen>

</sect2>

<sect2 id="secure-mailcap">
<title>Secure Use of Mailcap</title>

<para>
The interpretation of shell meta-characters embedded in MIME parameters
can lead to security problems in general.  Mutt tries to quote
parameters in expansion of <literal>%s</literal> syntaxes properly, and
avoids risky characters by substituting them, see the <link
linkend="mailcap-sanitize">$mailcap_sanitize</link> variable.
</para>

<para>
Although Mutt's procedures to invoke programs with mailcap seem to be
safe, there are other applications parsing mailcap, maybe taking less
care of it.  Therefore you should pay attention to the following rules:
</para>

<para>
<emphasis>Keep the %-expandos away from shell quoting.</emphasis> Don't
quote them with single or double quotes.  Mutt does this for you, the
right way, as should any other program which interprets mailcap.  Don't
put them into backtick expansions.  Be highly careful with evil
statements, and avoid them if possible at all.  Trying to fix broken
behavior with quotes introduces new leaks &mdash; there is no
alternative to correct quoting in the first place.
</para>

<para>
If you have to use the %-expandos' values in context where you need
quoting or backtick expansions, put that value into a shell variable and
reference the shell variable where necessary, as in the following
example (using <literal>$charset</literal> inside the backtick expansion
is safe, since it is not itself subject to any further expansion):
</para>

<screen>
text/test-mailcap-bug; cat %s; copiousoutput; test=charset=%{charset} \
        &amp;&amp; test "`echo $charset | tr '[A-Z]' '[a-z]'`" != iso-8859-1
</screen>

</sect2>

<sect2 id="advanced-mailcap">
<title>Advanced Mailcap Usage</title>

<sect3 id="optional-mailcap-fields">
<title>Optional Fields</title>

<para>
In addition to the required content-type and view command fields, you
can add semi-colon <quote>;</quote> separated fields to set flags and
other options.  Mutt recognizes the following optional fields:
</para>

<variablelist>

<varlistentry>
<term>copiousoutput</term>
<listitem>
<para>
This flag tells Mutt that the command passes possibly large amounts of
text on standard output.  This causes Mutt to invoke a pager (either
the internal pager or the external pager defined by the pager variable)
on the output of the view command.  Without this flag, Mutt assumes that
the command is interactive.  One could use this to replace the pipe to
<literal>more</literal> in the <literal>lynx -dump</literal> example in
the Basic section:
</para>

<screen>
text/html; lynx -dump %s ; copiousoutput
</screen>

<para>
This will cause lynx to format the <literal>text/html</literal> output
as <literal>text/plain</literal> and Mutt will use your standard pager
to display the results.
</para>

<para>
Mutt will set the <literal>COLUMNS</literal> environment variable to
the width of the pager.  Some programs make use of this environment
variable automatically.  Others provide a command line argument that
can use this to set the output width:
</para>

<screen>
text/html; lynx -dump -width ${COLUMNS:-80} %s; copiousoutput
</screen>

<para>
Note that when using the built-in pager, <emphasis>only</emphasis>
entries with this flag will be considered a handler for a MIME type
&mdash; all other entries will be ignored.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>needsterminal</term>
<listitem>
<para>
Mutt uses this flag when viewing attachments with <link
linkend="auto-view"><command>auto_view</command></link>, in order to
decide whether it should honor the setting of the <link
linkend="wait-key">$wait_key</link> variable or not.  When an attachment
is viewed using an interactive program, and the corresponding mailcap
entry has a <emphasis>needsterminal</emphasis> flag, Mutt will use <link
linkend="wait-key">$wait_key</link> and the exit status of the program
to decide if it will ask you to press a key after the external program
has exited.  In all other situations it will not prompt you for a key.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>compose=&lt;command&gt;</term>
<listitem>
<para>
This flag specifies the command to use to create a new attachment of a
specific MIME type.  Mutt supports this from the compose menu.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>composetyped=&lt;command&gt;</term>
<listitem>
<para>
This flag specifies the command to use to create a new attachment of a
specific MIME type.  This command differs from the compose command in
that Mutt will expect standard MIME headers on the data.  This can be
used to specify parameters, filename, description, etc. for a new
attachment.  Mutt supports this from the compose menu.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>print=&lt;command&gt;</term>
<listitem>
<para>
This flag specifies the command to use to print a specific MIME type.
Mutt supports this from the attachment and compose menus.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>edit=&lt;command&gt;</term>
<listitem>
<para>
This flag specifies the command to use to edit a specific MIME type.
Mutt supports this from the compose menu, and also uses it to compose
new attachments.  Mutt will default to the defined <link
linkend="editor">$editor</link> for text attachments.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>nametemplate=&lt;template&gt;</term>
<listitem>
<para>
This field specifies the format for the file denoted by
<literal>%s</literal> in the command fields.  Certain programs will
require a certain file extension, for instance, to correctly view a
file.  For instance, lynx will only interpret a file as
<literal>text/html</literal> if the file ends in
<literal>.html</literal>.  So, you would specify lynx as a
<literal>text/html</literal> viewer with a line in the mailcap file
like:
</para>

<screen>
text/html; lynx %s; nametemplate=%s.html
</screen>

</listitem>
</varlistentry>
<varlistentry>
<term>test=&lt;command&gt;</term>
<listitem>
<para>
This field specifies a command to run to test whether this mailcap entry
should be used.  The command is defined with the command expansion rules
defined in the next section.  If the command returns 0, then the test
passed, and Mutt uses this entry.  If the command returns non-zero, then
the test failed, and Mutt continues searching for the right entry.  Note
that the content-type must match before Mutt performs the test.  For
example:
</para>

<screen>
text/html; firefox -remote 'openURL(%s)' ; test=RunningX
text/html; lynx %s
</screen>

<para>
In this example, Mutt will run the program <literal>RunningX</literal>
which will return 0 if the X Window manager is running, and non-zero if
it isn't.  If <literal>RunningX</literal> returns 0, then Mutt will run
firefox to display the <literal>text/html</literal> object.  If RunningX
doesn't return 0, then Mutt will go on to the next entry and use lynx to
display the <literal>text/html</literal> object.
</para>
</listitem>
</varlistentry>
</variablelist>

</sect3>

<sect3 id="mailcap-search-order">
<title>Search Order</title>

<para>
When searching for an entry in the mailcap file, Mutt will search for
the most useful entry for its purpose.  For instance, if you are
attempting to print an <literal>image/gif</literal>, and you have the
following entries in your mailcap file, Mutt will search for an entry
with the print command:
</para>

<screen>
image/*;        xv %s
image/gif;      ; print= anytopnm %s | pnmtops | lpr; \
                nametemplate=%s.gif
</screen>

<para>
Mutt will skip the <literal>image/*</literal> entry and use the
<literal>image/gif</literal> entry with the print command.
</para>

<para>
In addition, you can use this with <link
linkend="auto-view"><command>auto_view</command></link> to denote two
commands for viewing an attachment, one to be viewed automatically, the
other to be viewed interactively from the attachment menu using the
<literal>&lt;view-mailcap&gt;</literal> function (bound to
<quote>m</quote> by default). In addition, you can then use the test
feature to determine which viewer to use interactively depending on your
environment.
</para>

<screen>
text/html;      firefox -remote 'openURL(%s)' ; test=RunningX
text/html;      lynx %s; nametemplate=%s.html
text/html;      lynx -dump %s; nametemplate=%s.html; copiousoutput
</screen>

<para>
For <link linkend="auto-view"><command>auto_view</command></link>, Mutt
will choose the third entry because of the
<literal>copiousoutput</literal> tag.  For interactive viewing, Mutt
will run the program <literal>RunningX</literal> to determine if it
should use the first entry.  If the program returns non-zero, Mutt will
use the second entry for interactive viewing. The last entry is for
inline display in the pager and the
<literal>&lt;view-attach&gt;</literal> function in the attachment menu.
</para>

<para>
Entries with the <literal>copiousoutput</literal> tag should always be
specified as the last one per type. For non-interactive use, the last
entry will then actually be the first matching one with the tag set.
For non-interactive use, only <literal>copiousoutput</literal>-tagged
entries are considered. For interactive use, Mutt ignores this tag and
treats all entries equally. Therefore, if not specified last, all
following entries without this tag would never be considered for
<literal>&lt;view-attach&gt;</literal> because the
<literal>copiousoutput</literal> before them matched already.
</para>

</sect3>

<sect3 id="mailcap-command-expansion">
<title>Command Expansion</title>

<para>
The various commands defined in the mailcap files are passed to the
<literal>/bin/sh</literal> shell using the <literal>system(3)</literal>
function.  Before the command is passed to <literal>/bin/sh
-c</literal>, it is parsed to expand various special parameters with
information from Mutt.  The keywords Mutt expands are:
</para>

<variablelist>

<varlistentry>
<term>%s</term>
<listitem>
<para>
As seen in the basic mailcap section, this variable is expanded to a
filename specified by the calling program.  This file contains the body
of the message to view/print/edit or where the composing program should
place the results of composition.  In addition, the use of this keyword
causes Mutt to not pass the body of the message to the view/print/edit
program on stdin.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>%t</term>
<listitem>
<para>
Mutt will expand <literal>%t</literal> to the text representation of the
content type of the message in the same form as the first parameter of
the mailcap definition line, i.e. <literal>text/html</literal> or
<literal>image/gif</literal>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>%{&lt;parameter&gt;}</term>
<listitem>
<para>
Mutt will expand this to the value of the specified parameter from the
Content-Type: line of the mail message.  For instance, if your mail
message contains:
</para>

<screen>
Content-Type: text/plain; charset=iso-8859-1
</screen>

<para>
then Mutt will expand <literal>%{charset}</literal> to
<quote>iso-8859-1</quote>.  The default metamail mailcap file uses this
feature to test the charset to spawn an xterm using the right charset to
view the message.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>\%</term>
<listitem>
<para>
This will be replaced by a literal <literal>%</literal>.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>
Mutt does not currently support the <literal>%F</literal> and
<literal>%n</literal> keywords specified in RFC 1524.  The main purpose
of these parameters is for multipart messages, which is handled
internally by Mutt.
</para>

</sect3>

</sect2>

<sect2 id="mailcap-example">
<title>Example Mailcap Files</title>

<para>
This mailcap file is fairly simple and standard:
</para>

<screen>
<emphasis role="comment"># I'm always running X :)</emphasis>
video/*;        xanim %s &gt; /dev/null
image/*;        xv %s &gt; /dev/null

<emphasis role="comment"># I'm always running firefox (if my computer had more memory, maybe)</emphasis>
text/html;      firefox -remote 'openURL(%s)'
</screen>

<para>
This mailcap file shows quite a number of examples:
</para>

<screen>
<emphasis role="comment"># Use xanim to view all videos   Xanim produces a header on startup,
# send that to /dev/null so I don't see it</emphasis>
video/*;        xanim %s &gt; /dev/null

<emphasis role="comment"># Send html to a running firefox by remote</emphasis>
text/html;      firefox -remote 'openURL(%s)'; test=RunningFirefox

<emphasis role="comment"># If I'm not running firefox but I am running X, start firefox on the
# object</emphasis>
text/html;      firefox %s; test=RunningX

<emphasis role="comment"># Else use lynx to view it as text</emphasis>
text/html;      lynx %s

<emphasis role="comment"># This version would convert the text/html to text/plain</emphasis>
text/html;      lynx -dump %s; copiousoutput

<emphasis role="comment"># I use enscript to print text in two columns to a page</emphasis>
text/*;         more %s; print=enscript -2Gr %s

<emphasis role="comment"># Firefox adds a flag to tell itself to view jpegs internally</emphasis>
image/jpeg;xv %s; x-mozilla-flags=internal

<emphasis role="comment"># Use xv to view images if I'm running X</emphasis>
<emphasis role="comment"># In addition, this uses the \ to extend the line and set my editor</emphasis>
<emphasis role="comment"># for images</emphasis>
image/*;xv %s; test=RunningX; \
        edit=xpaint %s

<emphasis role="comment"># Convert images to text using the netpbm tools</emphasis>
image/*;  (anytopnm %s | pnmscale -xysize 80 46 | ppmtopgm | pgmtopbm |
pbmtoascii -1x2 ) 2&gt;&amp;1 ; copiousoutput

<emphasis role="comment"># Send excel spreadsheets to my NT box</emphasis>
application/ms-excel; open.pl %s
</screen>

</sect2>

</sect1>

<sect1 id="auto-view">
<title>MIME Autoview</title>

<para>
Usage:
</para>

<cmdsynopsis>
<command>auto_view</command>
<arg choice="plain">
<replaceable>mimetype</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>

<command>unauto_view</command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
In addition to explicitly telling Mutt to view an attachment with the
MIME viewer defined in the mailcap file from the attachments menu, Mutt
has support for automatically viewing MIME attachments while in the
pager.
</para>

<para>
For this to work, you must define a viewer in the mailcap file which
uses the <literal>copiousoutput</literal> option to denote that it is
non-interactive.  Usually, you also use the entry to convert the
attachment to a text representation which you can view in the pager.
</para>

<para>
You then use the <command>auto_view</command> configuration command to
list the content-types that you wish to view automatically.  For
instance, if you set it to:
</para>

<screen>
auto_view text/html application/x-gunzip \
  application/postscript image/gif application/x-tar-gz
</screen>

<para>
...Mutt would try to find corresponding entries for rendering
attachments of these types as text. A corresponding mailcap could look
like:
</para>

<screen>
text/html;      lynx -dump %s; copiousoutput; nametemplate=%s.html
image/*;        anytopnm %s | pnmscale -xsize 80 -ysize 50 | ppmtopgm | \
                pgmtopbm | pbmtoascii ; copiousoutput
application/x-gunzip;   gzcat; copiousoutput
application/x-tar-gz; gunzip -c %s | tar -tf - ; copiousoutput
application/postscript; ps2ascii %s; copiousoutput
</screen>

<para>
<command>unauto_view</command> can be used to remove previous entries
from the <command>auto_view</command> list.  This can be used with <link
linkend="message-hook"><command>message-hook</command></link> to
autoview messages based on size, etc.
<quote><command>unauto_view</command> *</quote> will remove all previous
entries.
</para>

</sect1>

<sect1 id="alternative-order">
<title>MIME Multipart/Alternative</title>

<para>
The <literal>multipart/alternative</literal> container type only has
child MIME parts which represent the same content in an alternative
way. This is often used to send HTML messages which contain an
alternative plain text representation.
</para>

<para>
Mutt has some heuristics for determining which attachment of a
<literal>multipart/alternative</literal> type to display:
</para>

<orderedlist>
<listitem>
<para>
First, Mutt will check the <command>alternative_order</command> list to
determine if one of the available types is preferred.  It consists of a
number of MIME types in order, including support for implicit and
explicit wildcards. For example:
</para>

<screen>
alternative_order text/enriched text/plain text \
  application/postscript image/*
</screen>
</listitem>
<listitem>
<para>
Next, Mutt will check if any of the types have a defined <link
linkend="auto-view"><command>auto_view</command></link>, and use that.
</para>
</listitem>
<listitem>
<para>
Failing that, Mutt will look for any text type.
</para>
</listitem>
<listitem>
<para>
As a last attempt, Mutt will look for any type it knows how to handle.
</para>
</listitem>
</orderedlist>

<para>
To remove a MIME type from the <command>alternative_order</command>
list, use the <command>unalternative_order</command> command.
</para>

<para>
Generating <literal>multipart/alternative</literal> content is supported
via the
<link linkend="send-multipart-alternative">$send_multipart_alternative</link>
quadoption and
<link linkend="send-multipart-alternative-filter">$send_multipart_alternative_filter</link>
filter script.  The composed <literal>text/plain</literal> content
will be piped to the filter script's stdin.  The output from the
filter script should be the generated mime type of the content, a
blank line, and the content.  For example:
</para>
<screen>
text/html

&lt;html&gt;
&lt;body&gt;
Content in html format
&lt;/body&gt;
&lt;/html&gt;
</screen>

<para>
A preview of the alternative can be viewed in the compose menu using the functions
<literal>&lt;view-alt&gt;</literal>,
<literal>&lt;view-alt-text&gt;</literal> and
<literal>&lt;view-alt-mailcap&gt;</literal>, bound to
&quot;v&quot;, &quot;Esc v&quot; and &quot;V&quot; by default.
</para>

</sect1>

<sect1 id="attachments">
<title>Attachment Searching and Counting</title>

<para>
If you ever lose track of attachments in your mailboxes, Mutt's
attachment-counting and -searching support might be for you.  You can
make your message index display the number of qualifying attachments in
each message, or search for messages by attachment count.  You also can
configure what kinds of attachments qualify for this feature with the
<command>attachments</command> and <command>unattachments</command>
commands.
</para>

<para>
In order to provide this information, Mutt needs to fully MIME-parse all
messages affected first. This can slow down operation especially for
remote mail folders such as IMAP because all messages have to be
downloaded first regardless whether the user really wants to view them
or not though using <xref linkend="body-caching"/> usually means to
download the message just once.
</para>

<para>
By default, Mutt will not search inside
<literal>multipart/alternative</literal> containers.  This can be
changed via the <link
linkend="count-alternatives">$count_alternatives</link> configuration
variable.
</para>

<para>
The syntax is:
</para>

<cmdsynopsis>
<command>attachments</command>
<arg choice="plain">
<replaceable>{ + | - }disposition</replaceable>
</arg>
<arg choice="plain">
<replaceable>mime-type</replaceable>
</arg>

<command>unattachments</command>
<arg choice="plain">
<replaceable>{ + | - }disposition</replaceable>
</arg>
<arg choice="plain">
<replaceable>mime-type</replaceable>
</arg>

<command>attachments</command>
<arg choice="plain">
<option>?</option>
</arg>

<command>unattachments</command>
<arg choice="plain">
<option>*</option>
</arg>
</cmdsynopsis>

<para>
<emphasis>disposition</emphasis> is the attachment's Content-Disposition
type &mdash; either <literal>inline</literal> or
<literal>attachment</literal>.  You can abbreviate this to
<literal>I</literal> or <literal>A</literal>.
</para>

<para>
Disposition is prefixed by either a <quote>+</quote> symbol or a
<quote>-</quote> symbol.  If it's a <quote>+</quote>, you're saying that
you want to allow this disposition and MIME type to qualify.  If it's a
<quote>-</quote>, you're saying that this disposition and MIME type is
an exception to previous <quote>+</quote> rules.  There are examples
below of how this is useful.
</para>

<para>
<emphasis>mime-type</emphasis> is the MIME type of the attachment you
want the command to affect.  A MIME type is always of the format
<literal>major/minor</literal>, where <literal>major</literal> describes
the broad category of document you're looking at, and
<literal>minor</literal> describes the specific type within that
category.  The major part of mime-type must be literal text (or the
special token <quote><literal>*</literal></quote>), but the minor part
may be a regular expression.  (Therefore,
<quote><literal>*/.*</literal></quote> matches any MIME type.)
</para>

<para>
The MIME types you give to the <command>attachments</command> directive
are a kind of pattern.  When you use the <command>attachments</command>
directive, the patterns you specify are added to a list.  When you use
<command>unattachments</command>, the pattern is removed from the list.
The patterns are not expanded and matched to specific MIME types at this
time &mdash; they're just text in a list.  They're only matched when
actually evaluating a message.
</para>

<para>
Some examples might help to illustrate.  The examples that are not
commented out define the default configuration of the lists.
</para>

<example id="ex-attach-count">
<title>Attachment counting</title>
<screen>
<emphasis role="comment">
# Removing a pattern from a list removes that pattern literally. It
# does not remove any type matching the pattern.
#
#  attachments   +A */.*
#  attachments   +A image/jpeg
#  unattachments +A */.*
#
# This leaves "attached" image/jpeg files on the allowed attachments
# list. It does not remove all items, as you might expect, because the
# second */.* is not a matching expression at this time.
#
# Remember: "unattachments" only undoes what "attachments" has done!
# It does not trigger any matching on actual messages.

# Qualify any MIME part with an "attachment" disposition, EXCEPT for
# text/x-vcard and application/pgp parts. (PGP parts are already known
# to mutt, and can be searched for with ~g, ~G, and ~k.)
#
# I've added x-pkcs7 to this, since it functions (for S/MIME)
# analogously to PGP signature attachments. S/MIME isn't supported
# in a stock mutt build, but we can still treat it specially here.
#
</emphasis>
attachments   +A */.*
attachments   -A text/x-vcard application/pgp.*
attachments   -A application/x-pkcs7-.*

<emphasis role="comment">
# Discount all MIME parts with an "inline" disposition, unless they're
# text/plain. (Why inline a text/plain part unless it's external to the
# message flow?)
</emphasis>
attachments   +I text/plain

<emphasis role="comment">
# These two lines make Mutt qualify MIME containers.  (So, for example,
# a message/rfc822 forward will count as an attachment.)  The first
# line is unnecessary if you already have "attach-allow */.*", of
# course.  These are off by default!  The MIME elements contained
# within a message/* or multipart/* are still examined, even if the
# containers themselves don't qualify.

#attachments  +A message/.* multipart/.*
#attachments  +I message/.* multipart/.*
</emphasis>

<emphasis role="comment">## You probably don't really care to know about deleted attachments.</emphasis>
attachments   -A message/external-body
attachments   -I message/external-body
</screen>
</example>

<para>
Entering the command <quote><command>attachments</command> ?</quote> as
a command will list your current settings in Muttrc format, so that it
can be pasted elsewhere.
</para>

<para>
Entering the command <quote><command>unattachments</command> *</quote> as
a command will Clear all attachment settings.
</para>
</sect1>

<sect1 id="mime-lookup">
<title>MIME Lookup</title>

<para>
Usage:
</para>

<cmdsynopsis>
<command>mime_lookup</command>
<arg choice="plain">
<replaceable>mimetype</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>

<command>unmime_lookup</command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
Mutt's <command>mime_lookup</command> list specifies a list of MIME
types that should <emphasis>not</emphasis> be treated according to their
mailcap entry.  This option is designed to deal with binary types such
as <literal>application/octet-stream</literal>.  When an attachment's
MIME type is listed in <command>mime_lookup</command>, then the
extension of the filename will be compared to the list of extensions in
the <literal>mime.types</literal> file.  The MIME type associated with
this extension will then be used to process the attachment according to
the rules in the mailcap file and according to any other configuration
options (such as <command>auto_view</command>) specified.  Common usage
would be:
</para>

<screen>
mime_lookup application/octet-stream application/X-Lotus-Manuscript
</screen>

<para>
In addition, the <literal>unmime_lookup</literal> command may be used to
disable this feature for any particular MIME type if it had been set,
for example, in a global <literal>.muttrc</literal>.
</para>

</sect1>

</chapter>

<chapter id="optionalfeatures">
<title>Optional Features</title>

<sect1 id="optionalfeatures-notes">
<title>General Notes</title>

<sect2 id="compile-time-features">
<title>Enabling/Disabling Features</title>

<para>
Mutt supports several of optional features which can be enabled or
disabled at compile-time by giving the <emphasis>configure</emphasis>
script certain arguments. These are listed in the <quote>Optional
features</quote> section of the <emphasis>configure --help</emphasis>
output.
</para>

<para>
Which features are enabled or disabled can later be determined from the
output of <literal>mutt -v</literal>. If a compile option starts with
<quote>+</quote> it is enabled and disabled if prefixed with
<quote>-</quote>. For example, if Mutt was compiled using GnuTLS for
encrypted communication instead of OpenSSL, <literal>mutt -v</literal>
would contain:
</para>

<screen>
-USE_SSL_OPENSSL +USE_SSL_GNUTLS</screen>

</sect2>

<sect2 id="url-syntax">
<title>URL Syntax</title>

<para>
Mutt optionally supports the IMAP, POP3 and SMTP protocols which require
to access servers using URLs. The canonical syntax for specifying URLs
in Mutt is (an item enclosed in <literal>[]</literal> means it is
optional and may be omitted):
</para>

<screen>
proto[s]://[username[:password]@]server[:port][/path]
</screen>

<para>
<emphasis>proto</emphasis> is the communication protocol:
<literal>imap</literal> for IMAP, <literal>pop</literal> for POP3 and
<literal>smtp</literal> for SMTP. If <quote>s</quote> for <quote>secure
communication</quote> is appended, Mutt will attempt to establish an
encrypted communication using SSL or TLS.
</para>

<para>
Since all protocols supported by Mutt support/require authentication,
login credentials may be specified in the URL. This has the advantage
that multiple IMAP, POP3 or SMTP servers may be specified (which isn't
possible using, for example, <link
linkend="imap-user">$imap_user</link>). The username may contain the
<quote>@</quote> symbol being used by many mail systems as part of the
login name. The special characters <quote>/</quote>
(<literal>%2F</literal>), <quote>:</quote> (<literal>%3A</literal>) and
<quote>%</quote> (<literal>%25</literal>) have to be URL-encoded in
usernames using the <literal>%</literal>-notation.
</para>

<para>
A password can be given, too but is not recommended if the URL is
specified in a configuration file on disk.
</para>

<para>
If no port number is given, Mutt will use the system's default for the
given protocol (usually consulting <literal>/etc/services</literal>).
</para>

<para>
The optional path is only relevant for IMAP and ignored elsewhere.
</para>

<example id="ex-url">
<title>URLs</title>
<screen>
pops://host/
imaps://user@host/INBOX/Sent
smtp://user@host:587/
</screen>
</example>

</sect2>

</sect1>

<sect1 id="ssl">
<title>SSL/TLS Support</title>

<para>
If Mutt is compiled with IMAP, POP3 and/or SMTP support, it can also be
compiled with support for SSL or TLS using either OpenSSL or GnuTLS ( by
running the <emphasis>configure</emphasis> script with the
<emphasis>--enable-ssl=...</emphasis> option for OpenSSL or
<emphasis>--enable-gnutls=...</emphasis> for GnuTLS). Mutt can then
attempt to encrypt communication with remote servers if these protocols
are suffixed with <quote>s</quote> for <quote>secure
communication</quote>.
</para>

</sect1>

<sect1 id="pop">
<title>POP3 Support</title>

<para>
If Mutt is compiled with POP3 support (by running the
<emphasis>configure</emphasis> script with the
<emphasis>--enable-pop</emphasis> flag), it has the ability to work with
mailboxes located on a remote POP3 server and fetch mail for local
browsing.
</para>

<para>
Remote POP3 servers can be accessed using URLs with the
<literal>pop</literal> protocol for unencrypted and
<literal>pops</literal> for encrypted communication, see <xref
linkend="url-syntax"/> for details.
</para>

<para>
Polling for new mail is more expensive over POP3 than locally. For this
reason the frequency at which Mutt will check for mail remotely can be
controlled by the <link
linkend="pop-checkinterval">$pop_checkinterval</link> variable, which
defaults to every 60 seconds.
</para>

<para>
POP is read-only which doesn't allow for some features like editing
messages or changing flags. However, using <xref
linkend="header-caching"/> and <xref linkend="body-caching"/> Mutt
simulates the new/old/read flags as well as flagged and replied.  Mutt
applies some logic on top of remote messages but cannot change them so
that modifications of flags are lost when messages are downloaded from
the POP server (either by Mutt or other tools).
</para>

<anchor id="fetch-mail"/>
<para>
Another way to access your POP3 mail is the
<literal>&lt;fetch-mail&gt;</literal> function (default: G).  It allows
to connect to <link linkend="pop-host">$pop_host</link>, fetch all your
new mail and place it in the local <link
linkend="spoolfile">$spoolfile</link>.  After this point, Mutt runs
exactly as if the mail had always been local.
</para>

<note>
<para>
If you only need to fetch all messages to a local mailbox you should
consider using a specialized program, such as
<literal>fetchmail(1)</literal>, <literal>getmail(1)</literal> or
similar.
</para>
</note>

</sect1>

<sect1 id="imap">
<title>IMAP Support</title>

<para>
If Mutt was compiled with IMAP support (by running the
<emphasis>configure</emphasis> script with the
<emphasis>--enable-imap</emphasis> flag), it has the ability to work
with folders located on a remote IMAP server.
</para>

<para>
You can access the remote inbox by selecting the folder by its URL (see
<xref linkend="url-syntax"/> for details) using the
<literal>imap</literal> or <literal>imaps</literal> protocol.
Alternatively, a pine-compatible notation is also supported, i.e.
<literal>{[username@]imapserver[:port][/ssl]}path/to/folder</literal>
</para>

<para>
Note that not all servers use <quote>/</quote> as the hierarchy
separator.  Mutt should correctly notice which separator is being used
by the server and convert paths accordingly.
</para>

<para>
When browsing folders on an IMAP server, you can toggle whether to look
at only the folders you are subscribed to, or all folders with the
<emphasis>toggle-subscribed</emphasis> command.  See also the <link
linkend="imap-list-subscribed">$imap_list_subscribed</link> variable.
</para>

<para>
Polling for new mail on an IMAP server can cause noticeable delays. So,
you'll want to carefully tune the <link
linkend="mail-check">$mail_check</link> and <link
linkend="timeout">$timeout</link> variables. Reasonable values are:
</para>

<screen>
set mail_check=90
set timeout=15
</screen>

<para>
with relatively good results even over slow modem lines.
</para>

<note>
<para>
Note that if you are using mbox as the mail store on UW servers prior to
v12.250, the server has been reported to disconnect a client if another
client selects the same folder.
</para>
</note>

<sect2 id="imap-browser">
<title>The IMAP Folder Browser</title>

<para>
As of version 1.2, Mutt supports browsing mailboxes on an IMAP
server. This is mostly the same as the local file browser, with the
following differences:
</para>

<itemizedlist>
<listitem>

<para>
In lieu of file permissions, Mutt displays the string
<quote>IMAP</quote>, possibly followed by the symbol <quote>+</quote>,
indicating that the entry contains both messages and subfolders. On
Cyrus-like servers folders will often contain both messages and
subfolders.  A mailbox name with a trailing delimiter (usually
<quote>/</quote> or <quote>.</quote>) indicates subfolders.
</para>
</listitem>
<listitem>

<para>
For the case where an entry can contain both messages and subfolders,
the selection key (bound to <literal>enter</literal> by default) will
choose to descend into the subfolder view. If you wish to view the
messages in that folder, you must use <literal>view-file</literal>
instead (bound to <literal>space</literal> by default).
</para>
</listitem>
<listitem>

<para>
You can create, delete and rename mailboxes with the
<literal>&lt;create-mailbox&gt;</literal>,
<literal>&lt;delete-mailbox&gt;</literal>, and
<literal>&lt;rename-mailbox&gt;</literal> commands (default bindings:
<literal>C</literal>, <literal>d</literal> and <literal>r</literal>,
respectively). You may also <literal>&lt;subscribe&gt;</literal> and
<literal>&lt;unsubscribe&gt;</literal> to mailboxes (normally these are
bound to <literal>s</literal> and <literal>u</literal>, respectively).
</para>
</listitem>

</itemizedlist>

</sect2>

<sect2 id="imap-authentication">
<title>Authentication</title>

<para>
Mutt supports four authentication methods with IMAP servers: SASL,
GSSAPI, CRAM-MD5, and LOGIN (there is a patch by Grant Edwards to add
NTLM authentication for you poor exchange users out there, but it has
yet to be integrated into the main tree). There is also support for the
pseudo-protocol ANONYMOUS, which allows you to log in to a public IMAP
server without having an account. To use ANONYMOUS, simply make your
username blank or <quote>anonymous</quote>.
</para>

<para>
SASL is a special super-authenticator, which selects among several
protocols (including GSSAPI, CRAM-MD5, ANONYMOUS, and DIGEST-MD5) the
most secure method available on your host and the server. Using some of
these methods (including DIGEST-MD5 and possibly GSSAPI), your entire
session will be encrypted and invisible to those teeming network
snoops. It is the best option if you have it. To use it, you must have
the Cyrus SASL library installed on your system and compile Mutt with
the <emphasis>--with-sasl</emphasis> flag.
</para>

<para>
Mutt will try whichever methods are compiled in and available on the
server, in the following order: SASL, ANONYMOUS, GSSAPI, CRAM-MD5,
LOGIN.
</para>

<para>
There are a few variables which control authentication:
</para>

<itemizedlist>
<listitem>

<para>
<link linkend="imap-user">$imap_user</link> - controls the username
under which you request authentication on the IMAP server, for all
authenticators. This is overridden by an explicit username in the
mailbox path (i.e. by using a mailbox name of the form
<literal>{user@host}</literal>).
</para>
</listitem>
<listitem>

<para>
<link linkend="imap-pass">$imap_pass</link> - a password which you may
preset, used by all authentication methods where a password is needed.
</para>
</listitem>
<listitem>

<para>
<link linkend="imap-authenticators">$imap_authenticators</link> - a
colon-delimited list of IMAP authentication methods to try, in the order
you wish to try them. If specified, this overrides Mutt's default
(attempt everything, in the order listed above).
</para>
</listitem>

</itemizedlist>

</sect2>

</sect1>

<sect1 id="smtp">
<title>SMTP Support</title>

<para>
Besides supporting traditional mail delivery through a
sendmail-compatible program, Mutt supports delivery through SMTP if it
was configured and built with <literal>--enable-smtp</literal>.
</para>

<para>
If the configuration variable <link linkend="smtp-url">$smtp_url</link>
is set, Mutt will contact the given SMTP server to deliver messages; if
it is unset, Mutt will use the program specified by <link
linkend="sendmail">$sendmail</link>.
</para>

<para>
For details on the URL syntax, please see <xref linkend="url-syntax"/>.
</para>

<para>
The built-in SMTP support supports encryption (the
<literal>smtps</literal> protocol using SSL or TLS) as well as SMTP
authentication using SASL. The authentication mechanisms for SASL are
specified in <link
linkend="smtp-authenticators">$smtp_authenticators</link> defaulting to
an empty list which makes Mutt try all available methods from
most-secure to least-secure.
</para>

</sect1>

<sect1 id="oauth">
<title>OAUTHBEARER Support</title>

<para>
Preliminary OAUTH support for IMAP, POP, and SMTP is provided via
external scripts.
</para>

<para>
At least for Gmail, you can use the <literal>oauth2.py</literal>
script from Google's gmail-oauth2-tools: <ulink
url="https://github.com/google/gmail-oauth2-tools/blob/master/python/oauth2.py"
>https://github.com/google/gmail-oauth2-tools/blob/master/python/oauth2.py</ulink>
</para>

<para>
You'll need to get your own oauth client credentials for Gmail here:
<ulink url="https://console.developers.google.com/apis/credentials"
>https://console.developers.google.com/apis/credentials</ulink>
</para>

<para>
Then, you'd use <literal>oauth2.py</literal> with
<literal>--generate_oauth2_token</literal> to get a refresh token, and
configure mutt with:
</para>

<screen>
set imap_authenticators="oauthbearer"
set imap_oauth_refresh_command="/path/to/oauth2.py --quiet --user=[email_address]\
    --client_id=[client_id] --client_secret=[client_secret]\
    --refresh_token=[refresh_token]"
</screen>

<para>
Substitute pop or smtp for imap in the above example to configure for those.
</para>
</sect1>

<sect1 id="account-hook">
<title>Managing Multiple Accounts</title>

<para>
Usage:
</para>

<cmdsynopsis>
<command>account-hook</command>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>

<para>
If you happen to have accounts on multiple IMAP, POP and/or SMTP
servers, you may find managing all the authentication settings
inconvenient and error-prone. The <link
linkend="account-hook"><command>account-hook</command></link> command
may help. This hook works like <link
linkend="folder-hook"><command>folder-hook</command></link> but is
invoked whenever Mutt needs to access a remote mailbox (including inside
the folder browser), not just when you open the mailbox. This includes
(for example) polling for new mail, storing Fcc messages and saving
messages to a folder. As a consequence, <link
linkend="account-hook"><command>account-hook</command></link> should
only be used to set connection-related settings such as passwords or
tunnel commands but not settings such as sender address or name (because
in general it should be considered unpredictable which <link
linkend="account-hook"><command>account-hook</command></link> was last
used).
</para>

<para>
Some examples:
</para>

<screen>
account-hook . 'unset imap_user; unset imap_pass; unset tunnel'
account-hook imap://host1/ 'set imap_user=me1 imap_pass=foo'
account-hook imap://host2/ 'set tunnel="ssh host2 /usr/libexec/imapd"'
account-hook smtp://user@host3/ 'set tunnel="ssh host3 /usr/libexec/smtpd"'
</screen>

<para>
To manage multiple accounts with, for example, different values of <link
linkend="record">$record</link> or sender addresses, <link
linkend="folder-hook"><command>folder-hook</command></link> has to be be
used together with the <link
linkend="mailboxes"><command>mailboxes</command></link> command.
</para>

<example id="ex-multiaccount">
<title>Managing multiple accounts</title>
<screen>
mailboxes imap://user@host1/INBOX
folder-hook imap://user@host1/ 'set folder=imap://host1/ ; set record=+INBOX/Sent'

mailboxes imap://user@host2/INBOX
folder-hook imap://user@host2/ 'set folder=imap://host2/ ; set record=+INBOX/Sent'
</screen>
</example>

<para>
In example <xref linkend="ex-multiaccount"/> the folders are defined
using <link linkend="mailboxes"><command>mailboxes</command></link> so
Mutt polls them for new mail. Each <link
linkend="folder-hook"><command>folder-hook</command></link> triggers
when one mailbox below each IMAP account is opened and sets <link
linkend="folder">$folder</link> to the account's root folder. Next, it
sets <link linkend="record">$record</link> to the
<emphasis>INBOX/Sent</emphasis> folder below the newly set <link
linkend="folder">$folder</link>. Please notice that the value the
<quote>+</quote> <link linkend="shortcuts">mailbox shortcut</link>
refers to depends on the <emphasis>current</emphasis> value of <link
linkend="folder">$folder</link> and therefore has to be set separately
per account. Setting other values like <link linkend="from">$from</link>
or <link linkend="signature">$signature</link> is analogous to setting
<link linkend="record">$record</link>.
</para>

</sect1>

<sect1 id="caching">
<title>Local Caching</title>

<para>
Mutt contains two types of local caching: <emphasis>(1)</emphasis> the
so-called <quote>header caching</quote> and <emphasis>(2)</emphasis> the
so-called <quote>body caching</quote> which are both described in this
section.
</para>

<para>
Header caching is optional as it depends on external libraries, body
caching is always enabled if Mutt is compiled with POP and/or IMAP
support as these use it (body caching requires no external library).
</para>

<sect2 id="header-caching">
<title>Header Caching</title>

<para>
Mutt provides optional support for caching message headers for the
following types of folders: IMAP, POP, Maildir and MH. Header caching
greatly speeds up opening large folders because for remote folders,
headers usually only need to be downloaded once. For Maildir and MH,
reading the headers from a single file is much faster than looking at
possibly thousands of single files (since Maildir and MH use one file
per message.)
</para>

<para>
Header caching can be enabled via the configure script and the
<emphasis>--enable-hcache</emphasis> option. It's not turned on by
default because external database libraries are required: one of
tokyocabinet, kyotocabinet, lmdb, qdbm, gdbm or bdb must be present.
</para>

<para>
If enabled, <link linkend="header-cache">$header_cache</link> can be
used to either point to a file or a directory. If set to point to a
file, one database file for all folders will be used (which may result
in lower performance), but one file per folder if it points to a
directory.
</para>

</sect2>

<sect2 id="body-caching">
<title>Body Caching</title>

<para>
Both cache methods can be combined using the same directory for storage
(and for IMAP/POP even provide meaningful file names) which simplifies
manual maintenance tasks.
</para>

<para>
In addition to caching message headers only, Mutt can also cache whole
message bodies. This results in faster display of messages for POP and
IMAP folders because messages usually have to be downloaded only once.
</para>

<para>
For configuration, the variable <link linkend="message-cachedir"
>$message_cachedir</link> must point to a directory. There, Mutt will
create a hierarchy of subdirectories named like the account and mailbox
path the cache is for.
</para>

</sect2>

<sect2 id="cache-dirs">
<title>Cache Directories</title>

<para>
For using both, header and body caching, <link
linkend="header-cache">$header_cache</link> and <link
linkend="message-cachedir" >$message_cachedir</link> can be safely set
to the same value.
</para>

<para>
In a header or body cache directory, Mutt creates a directory hierarchy
named like: <literal>proto:user@hostname</literal> where
<literal>proto</literal> is either <quote>pop</quote> or
<quote>imap.</quote> Within there, for each folder, Mutt stores messages
in single files and header caches in files with the
<quote>.hcache</quote> extension.  All files can be removed as needed if
the consumed disk space becomes an issue as Mutt will silently fetch
missing items again. Pathnames are always stored in UTF-8 encoding.
</para>

<para>
For Maildir and MH, the header cache files are named after the MD5
checksum of the path.
</para>

</sect2>

<sect2 id="maint-cache">
<title>Maintenance</title>

<para>
Mutt does not (yet) support maintenance features for header cache
database files so that files have to be removed in case they grow too
big. It depends on the database library used for header caching whether
disk space freed by removing messages is re-used.
</para>

<para>
For body caches, Mutt can keep the local cache in sync with the remote
mailbox if the <link
linkend="message-cache-clean">$message_cache_clean</link> variable is
set. Cleaning means to remove messages from the cache which are no
longer present in the mailbox which only happens when other mail clients
or instances of Mutt using a different body cache location delete
messages (Mutt itself removes deleted messages from the cache when
syncing a mailbox). As cleaning can take a noticeable amount of time, it
should not be set in general but only occasionally.
</para>

</sect2>

</sect1>

<sect1 id="exact-address">
<title>Exact Address Generation</title>

<para>
Mutt supports the <quote>Name &lt;user@host&gt;</quote> address syntax
for reading and writing messages, the older <quote>user@host
(Name)</quote> syntax is only supported when reading messages. The
<emphasis>--enable-exact-address</emphasis> switch can be given to
configure to build it with write-support for the latter
syntax. <literal>EXACT_ADDRESS</literal> in the output of <literal>mutt
-v</literal> indicates whether it's supported.
</para>

</sect1>

<sect1 id="sending-mixmaster">
<title>Sending Anonymous Messages via Mixmaster</title>

<para>
You may also have compiled Mutt to co-operate with Mixmaster, an
anonymous remailer.  Mixmaster permits you to send your messages
anonymously using a chain of remailers. Mixmaster support in Mutt is for
mixmaster version 2.04 or later.
</para>

<para>
To use it, you'll have to obey certain restrictions.  Most important,
you cannot use the <literal>Cc</literal> and <literal>Bcc</literal>
headers.  To tell Mutt to use mixmaster, you have to select a remailer
chain, using the mix function on the compose menu.
</para>

<para>
The chain selection screen is divided into two parts.  In the (larger)
upper part, you get a list of remailers you may use.  In the lower part,
you see the currently selected chain of remailers.
</para>

<para>
You can navigate in the chain using the
<literal>&lt;chain-prev&gt;</literal> and
<literal>&lt;chain-next&gt;</literal> functions, which are by default
bound to the left and right arrows and to the <literal>h</literal> and
<literal>l</literal> keys (think vi keyboard bindings).  To insert a
remailer at the current chain position, use the
<literal>&lt;insert&gt;</literal> function.  To append a remailer behind
the current chain position, use <literal>&lt;select-entry&gt;</literal>
or <literal>&lt;append&gt;</literal>.  You can also delete entries from
the chain, using the corresponding function.  Finally, to abandon your
changes, leave the menu, or <literal>&lt;accept&gt;</literal> them
pressing (by default) the <literal>Return</literal> key.
</para>

<para>
Note that different remailers do have different capabilities, indicated
in the %c entry of the remailer menu lines (see <link
linkend="mix-entry-format">$mix_entry_format</link>).  Most important is
the <quote>middleman</quote> capability, indicated by a capital
<quote>M</quote>: This means that the remailer in question cannot be
used as the final element of a chain, but will only forward messages to
other mixmaster remailers.  For details on the other capabilities,
please have a look at the mixmaster documentation.
</para>

</sect1>

<sect1 id="sidebar">
  <title>Sidebar</title>
  <subtitle>Overview of mailboxes</subtitle>

  <sect2 id="sidebar-intro">
    <title>Introduction</title>

    <para>
      The Sidebar shows a list of all your mailboxes.  The list can be
      turned on and off, it can be themed and the list style can be
      configured.
    </para>
  </sect2>

  <sect2 id="sidebar-variables">
    <title>Variables</title>

    <table id="table-sidebar-variables">
      <title>Sidebar Variables</title>
      <tgroup cols="3">
	<thead>
	  <row>
	    <entry>Name</entry>
	    <entry>Type</entry>
	    <entry>Default</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><literal>sidebar_delim_chars</literal></entry>
	    <entry>string</entry>
	    <entry><literal>/.</literal></entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_divider_char</literal></entry>
	    <entry>string</entry>
	    <entry><literal>|</literal></entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_folder_indent</literal></entry>
	    <entry>boolean</entry>
	    <entry><literal>no</literal></entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_format</literal></entry>
	    <entry>string</entry>
	    <entry><literal>%B%*  %n</literal></entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_indent_string</literal></entry>
	    <entry>string</entry>
	    <entry><literal>&nbsp;&nbsp;</literal> (two spaces)</entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_new_mail_only</literal></entry>
	    <entry>boolean</entry>
	    <entry><literal>no</literal></entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_next_new_wrap</literal></entry>
	    <entry>boolean</entry>
	    <entry><literal>no</literal></entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_short_path</literal></entry>
	    <entry>boolean</entry>
	    <entry><literal>no</literal></entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_sort_method</literal></entry>
	    <entry>enum</entry>
	    <entry><literal>unsorted</literal></entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_visible</literal></entry>
	    <entry>boolean</entry>
	    <entry><literal>no</literal></entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_width</literal></entry>
	    <entry>number</entry>
	    <entry><literal>20</literal></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </sect2>

  <sect2 id="sidebar-functions">
    <title>Functions</title>

    <para>
      Sidebar adds the following functions to Mutt.
      By default, none of them are bound to keys.
    </para>

    <table id="table-sidebar-functions">
      <title>Sidebar Functions</title>
      <tgroup cols="3">
	<thead>
	  <row>
	    <entry>Menus</entry>
	    <entry>Function</entry>
	    <entry>Description</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>index,pager</entry>
	    <entry><literal>&lt;sidebar-next&gt;</literal></entry>
	    <entry>Move the highlight to next mailbox</entry>
	  </row>
	  <row>
	    <entry>index,pager</entry>
	    <entry><literal>&lt;sidebar-next-new&gt;</literal></entry>
	    <entry>Move the highlight to next mailbox with new mail</entry>
	  </row>
	  <row>
	    <entry>index,pager</entry>
	    <entry><literal>&lt;sidebar-open&gt;</literal></entry>
	    <entry>Open highlighted mailbox</entry>
	  </row>
	  <row>
	    <entry>index,pager</entry>
	    <entry><literal>&lt;sidebar-page-down&gt;</literal></entry>
	    <entry>Scroll the Sidebar down 1 page</entry>
	  </row>
	  <row>
	    <entry>index,pager</entry>
	    <entry><literal>&lt;sidebar-page-up&gt;</literal></entry>
	    <entry>Scroll the Sidebar up 1 page</entry>
	  </row>
	  <row>
	    <entry>index,pager</entry>
	    <entry><literal>&lt;sidebar-prev&gt;</literal></entry>
	    <entry>Move the highlight to previous mailbox</entry>
	  </row>
	  <row>
	    <entry>index,pager</entry>
	    <entry><literal>&lt;sidebar-prev-new&gt;</literal></entry>
	    <entry>Move the highlight to previous mailbox with new mail</entry>
	  </row>
	  <row>
	    <entry>index,pager</entry>
	    <entry><literal>&lt;sidebar-toggle-visible&gt;</literal></entry>
	    <entry>Make the Sidebar (in)visible</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </sect2>

  <sect2 id="sidebar-whitelist">
    <title>Commands</title>
    <cmdsynopsis>
      <command>sidebar_whitelist</command>
      <arg choice="plain">
	<replaceable class="parameter">mailbox</replaceable>
      </arg>
      <arg choice="opt" rep="repeat">
	<replaceable class="parameter">mailbox</replaceable>
      </arg>

      <command>unsidebar_whitelist</command>
      <group choice="req">
      <arg choice="plain">
	<replaceable class="parameter">*</replaceable>
      </arg>
      <arg choice="plain" rep="repeat">
	<replaceable class="parameter">mailbox</replaceable>
      </arg>
      </group>
    </cmdsynopsis>

    <para>
      This command specifies mailboxes that will always be displayed
      in the sidebar, even if <link
      linkend="sidebar-new-mail-only">$sidebar_new_mail_only</link>
      is set and the mailbox does not contain new mail.
    </para>

    <para>
      The <quote>unsidebar_whitelist</quote> command is used to remove a mailbox from
      the list of whitelisted mailboxes. Use <quote>unsidebar_whitelist *</quote>
      to remove all mailboxes.
    </para>
  </sect2>

  <sect2 id="sidebar-colors">
    <title>Colors</title>

    <table id="table-sidebar-colors">
      <title>Sidebar Colors</title>
      <tgroup cols="3">
	<thead>
	  <row>
	    <entry>Name</entry>
	    <entry>Default Color</entry>
	    <entry>Description</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><literal>sidebar_divider</literal></entry>
	    <entry>default</entry>
	    <entry>The dividing line between the Sidebar and the Index/Pager panels</entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_flagged</literal></entry>
	    <entry>default</entry>
	    <entry>Mailboxes containing flagged mail</entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_highlight</literal></entry>
	    <entry>underline</entry>
	    <entry>Cursor to select a mailbox</entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_indicator</literal></entry>
	    <entry>mutt <literal>indicator</literal></entry>
	    <entry>The mailbox open in the Index panel</entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_new</literal></entry>
	    <entry>default</entry>
	    <entry>Mailboxes containing new mail</entry>
	  </row>
	  <row>
	    <entry><literal>sidebar_spoolfile</literal></entry>
	    <entry>default</entry>
	    <entry>Mailbox that receives incoming mail</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para>
    If the <literal>sidebar_indicator</literal> color isn't set, then the default Mutt
    indicator color will be used (the color used in the index panel).
    </para>
  </sect2>

  <sect2 id="sidebar-sort">
    <title>Sort</title>

    <table id="table-sidebar-sort">
      <title>Sidebar Sort</title>
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry>Sort</entry>
	    <entry>Description</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><literal>alpha</literal></entry>
	    <entry>Alphabetically by path</entry>
	  </row>
	  <row>
	    <entry><literal>count</literal></entry>
	    <entry>Total number of messages</entry>
	  </row>
	  <row>
	    <entry><literal>flagged</literal></entry>
	    <entry>Number of flagged messages</entry>
	  </row>
	  <row>
	    <entry><literal>name</literal></entry>
	    <entry>Alphabetically by path</entry>
	  </row>
	  <row>
	    <entry><literal>new</literal></entry>
	    <entry>Number of unread messages</entry>
	  </row>
	  <row>
	    <entry><literal>path</literal></entry>
	    <entry>Alphabetically by path</entry>
	  </row>
	  <row>
	    <entry><literal>unread</literal></entry>
	    <entry>Number of unread messages</entry>
	  </row>
	  <row>
	    <entry><literal>unsorted</literal></entry>
	    <entry>Do not resort the paths</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </sect2>


  <sect2 id="sidebar-see-also">
    <title>See Also</title>

    <itemizedlist>
      <listitem><para><link linkend="regexp">Regular Expressions</link></para></listitem>
      <listitem><para><link linkend="patterns">Patterns</link></para></listitem>
      <listitem><para><link linkend="color">Color command</link></para></listitem>
    </itemizedlist>
  </sect2>
</sect1>

<sect1 id="compress">
  <title>Compressed Folders Feature</title>
  <subtitle>Read from/write to compressed mailboxes</subtitle>

  <sect2 id="compress-intro">
    <title>Introduction</title>

    <para>
      The Compressed Folder patch allows Mutt to read mailbox files that are
      compressed.  But it isn't limited to compressed files.  It works well
      with encrypted files, too.  In fact, if you can create a program/script
      to convert to and from your format, then Mutt can read it.
    </para>

    <para>
      The patch adds three hooks to Mutt: <literal>open-hook</literal>,
      <literal>close-hook</literal> and <literal>append-hook</literal>.  They
      define commands to: uncompress a file; compress a file; append
      messages to an already compressed file.
    </para>

    <para>
      There are some examples of both compressed and encrypted files,
      later.  For now, the documentation will just concentrate on
      compressed files.
    </para>

  </sect2>

  <sect2 id="compress-commands">
    <title>Commands</title>
    <cmdsynopsis>
      <command>open-hook</command>
      <arg choice="plain">
        <replaceable class="parameter">pattern</replaceable>
      </arg>
      <arg choice="plain">
        <replaceable class="parameter">shell-command</replaceable>
      </arg>
      <command>close-hook</command>
      <arg choice="plain">
        <replaceable class="parameter">pattern</replaceable>
      </arg>
      <arg choice="plain">
        <replaceable class="parameter">shell-command</replaceable>
      </arg>
      <command>append-hook</command>
      <arg choice="plain">
        <replaceable class="parameter">pattern</replaceable>
      </arg>
      <arg choice="plain">
        <replaceable class="parameter">shell-command</replaceable>
      </arg>
    </cmdsynopsis>

    <para>
      The shell-command must contain two placeholders for filenames:
      <literal>%f</literal> and <literal>%t</literal>.  These represent
      <quote>from</quote> and <quote>to</quote> filenames.  These placeholders
      should be placed inside single-quotes to prevent unintended shell
      expansions.
    </para>

    <para>
      If you need the exact string <quote>%f</quote> or <quote>%t</quote> in your
      command, simply double up the <quote>%</quote> character, e.g.
      <quote>%%f</quote> or <quote>%%t</quote>.
    </para>

    <table id="table-compress-optional">
      <title>Not all Hooks are Required</title>
      <tgroup cols="5">
        <thead>
          <row>
            <entry>Open</entry>
            <entry>Close</entry>
            <entry>Append</entry>
            <entry>Effect</entry>
            <entry>Useful if</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Open</entry>
            <entry>-</entry>
            <entry>-</entry>
            <entry>Folder is readonly</entry>
            <entry>The folder is just a backup</entry>
          </row>
          <row>
            <entry>Open</entry>
            <entry>Close</entry>
            <entry>-</entry>
            <entry>Folder is read/write, but the entire folder must be
              written if anything is changed</entry>
            <entry>Your compression format doesn't support appending</entry>
          </row>
          <row>
            <entry>Open</entry>
            <entry>Close</entry>
            <entry>Append</entry>
            <entry>Folder is read/write and emails can be efficiently added
              to the end</entry>
            <entry>Your compression format supports appending</entry>
          </row>
          <row>
            <entry>Open</entry>
            <entry>-</entry>
            <entry>Append</entry>
            <entry>Folder is readonly, but can be appended to</entry>
            <entry>You want to store emails, but never change them</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <note>
      <para>The command:</para>
      <itemizedlist>
        <listitem><para>should return a non-zero exit status on failure</para></listitem>
        <listitem><para>should not delete any files</para></listitem>
      </itemizedlist>
    </note>

    <sect3 id="open-hook">
      <title>Read from compressed mailbox</title>

      <screen>open-hook regexp shell-command</screen>

      <para>
        If Mutt is unable to open a file, it then looks for
        <literal>open-hook</literal> that matches the filename.
      </para>

      <para>
        If your compression program doesn't have a well-defined extension,
        then you can use <literal>.</literal> as the regexp.
      </para>

      <example id="compress-open-hook-example">
        <title>Example of open-hook</title>

        <screen>open-hook '\.gz$' &quot;gzip -cd '%f' &gt; '%t'&quot;</screen>

        <itemizedlist>
          <listitem><para>Mutt finds a file, <quote>example.gz</quote>,
              that it can't read</para></listitem>
          <listitem><para>Mutt has an <literal>open-hook</literal>
              whose regexp matches the filename:
              <literal>\.gz$</literal></para></listitem>
          <listitem><para>Mutt uses the command <literal>gzip -cd</literal>
              to create a temporary file that it <emphasis>can</emphasis>
              read</para></listitem>
        </itemizedlist>
      </example>
    </sect3>

    <sect3 id="close-hook">
      <title>Write to a compressed mailbox</title>

      <screen>close-hook regexp shell-command</screen>

      <para>
        When Mutt has finished with a compressed mail folder, it will look
        for a matching <literal>close-hook</literal> to recompress the file.
        This hook is <link linkend="table-compress-optional">optional</link>.
      </para>

      <note>
        <para>
          If the folder has not been modified, the
          <literal>close-hook</literal> will not be called.
        </para>
      </note>

      <example id="compress-close-hook-example">
        <title>Example of close-hook</title>

        <screen>close-hook '\.gz$' &quot;gzip -c '%t' &gt; '%f'&quot;</screen>

        <itemizedlist>
          <listitem><para>Mutt has finished with a folder, <quote>example.gz</quote>,
              that it opened with <literal>open-hook</literal></para></listitem>
          <listitem><para>The folder has been modified</para></listitem>
          <listitem><para>Mutt has a <literal>close-hook</literal> whose regexp
              matches the filename: <literal>\.gz$</literal></para></listitem>
          <listitem><para>Mutt uses the command <literal>gzip -c</literal>
              to create a new compressed file</para></listitem>
        </itemizedlist>
      </example>
    </sect3>

    <sect3 id="append-hook">
      <title>Append to a compressed mailbox</title>

      <screen>append-hook regexp shell-command</screen>

      <para>
        When Mutt wants to append an email to a compressed mail folder, it
        will look for a matching <literal>append-hook</literal>.
        This hook is <link linkend="table-compress-optional">optional</link>.
      </para>

      <para>
        Using the <literal>append-hook</literal> will save time, but
        Mutt won't be able to determine the type of the mail folder
        inside the compressed file.
      </para>

      <para>
        Mutt will <emphasis>assume</emphasis> the type to be that of
        the <literal>$mbox_type</literal> variable.  Mutt also uses
        this type for temporary files.
      </para>

      <para>
        Mutt will only use the <literal>append-hook</literal> for existing files.
        The <literal>close-hook</literal> will be used for empty, or missing files.
      </para>

      <note>
        <para>
          If your command writes to stdout, it is vital that you use
          <literal>&gt;&gt;</literal> in the <quote>append-hook</quote>.
          If not, data will be lost.
        </para>
      </note>

      <example id="compress-append-hook-example">
        <title>Example of append-hook</title>

        <screen>append-hook '\.gz$' &quot;gzip -c '%t' &gt;&gt; '%f'&quot;</screen>

        <itemizedlist>
          <listitem><para>Mutt wants to append an email to a folder, <quote>example.gz</quote>,
              that it opened with <literal>open-hook</literal></para></listitem>
          <listitem><para>Mutt has an <literal>append-hook</literal> whose regexp matches
              the filename: <literal>\.gz$</literal></para></listitem>
          <listitem><para>Mutt knows the mailbox type from the <literal>$mbox</literal>
              variable</para></listitem>
          <listitem><para>Mutt uses the command <literal>gzip -c</literal>
              to append to an existing compressed file</para></listitem>
        </itemizedlist>
      </example>

    </sect3>

    <sect3 id="compress-empty">
      <title>Empty Files</title>

      <para>
        Mutt assumes that an empty file is not compressed.  In this
        situation, unset <link linkend="save-empty">$save_empty</link>, so
        that the compressed file will be removed if you delete all of the
        messages.
      </para>
    </sect3>

    <sect3 id="compress-security">
      <title>Security</title>

      <para>
        Encrypted files are decrypted into temporary files which are
        stored in the <link linkend="tmpdir">$tmpdir</link> directory.
        This could be a security risk.
      </para>
    </sect3>
  </sect2>
</sect1>

<sect1 id="autocryptdoc">
  <title>Autocrypt</title>

  <para>
    Mutt can be compiled with Autocrypt support by running
    <literal>configure</literal> with the
    <literal>--enable-autocrypt</literal> flag.  Autocrypt provides
    easy to use, passive protection against data collection.  Keys are
    distributed via an <literal>Autocrypt:</literal> header added to
    emails.  It does <emphasis>not</emphasis> protect against active
    adversaries, and so should not be considered a substitute for
    normal encryption via your keyring, using key signing and the web
    of trust to verify identities.  With an understanding of these
    limitations, Autocrypt still provides an easy way to minimize
    cleartext emails sent between common correspondants, without
    having to explicitly exchange keys.  More information can be found
    at <ulink
    url="https://autocrypt.org/">https://autocrypt.org/</ulink>.
  </para>

  <sect2 id="autocryptdoc-requirements">
    <title>Requirements</title>
    <para>
      Autocrypt requires support for ECC cryptography, and Mutt by
      default will generate ECC keys.  Therefore GnuPG 2.1 or greater
      is required.  Additionally, Mutt's Autocrypt implementation uses
      GPGME and requires at least version 1.8.0.
    </para>
    <para>
      Account and peer information is stored in a sqlite3 database, and
      so Mutt must be configured with the <literal>--with-sqlite3</literal>
      flag when autocrypt is enabled.
    </para>
    <para>
      It is highly recommended Mutt be configured
      <literal>--with-idn</literal> or
      <literal>--with-idn2</literal> so that Autocrypt can properly
      deal with international domain names.
    </para>
    <para>
      While Mutt uses GPGME for Autocrypt, normal keyring operations
      can still be performed via classic mode (i.e. with <link
      linkend="crypt-use-gpgme">$crypt_use_gpgme</link> unset).
      However, to avoid unnecessary prompts, it is recommended gpg not
      be configured in <literal>loopback pinentry</literal> mode, and
      that <link linkend="pgp-use-gpg-agent">$pgp_use_gpg_agent</link>
      remain set (the default).
    </para>
  </sect2>

  <sect2 id="autocryptdoc-init">
    <title>First Run</title>
    <para>
      To enable Autocrypt, set <link
      linkend="autocrypt">$autocrypt</link>, and if desired change the
      value of <link linkend="autocrypt-dir">$autocrypt_dir</link> in
      your muttrc.  The first time Mutt is run after that, you will be
      prompted to create <link
      linkend="autocrypt-dir">$autocrypt_dir</link>.  Mutt will then
      automatically create an sqlite3 database and gpg keyring in that
      directory.  Note since these files should be considered private,
      Mutt will create this directory with mode
      <literal>700</literal>.  If you create the directory manually,
      you should do the same.
    </para>
    <para>
      Mutt recommends keeping the <link
      linkend="autocrypt-dir">$autocrypt_dir</link> directory set
      differently from your GnuPG keyring directory
      (e.g. <literal>~/.gnupg</literal>).  Keys are automatically
      imported into the keyring from <literal>Autocrypt:</literal>
      headers.  Compared to standard <quote>web of trust</quote> keys,
      Autocrypt keys are somewhat ephemeral, and the autocrypt
      database is used to track when keys change or fall out of use.
      Having these keys mixed in with your normal keyring will make it
      more difficult to use features such as <link
      linkend="crypt-opportunistic-encrypt">$crypt_opportunistic_encrypt</link>
      and Autocrypt at the same time.
    </para>
    <para>
      The <link linkend="autocrypt-dir">$autocrypt_dir</link> variable
      is not designed to be changed while Mutt is running.  The
      database is created (if necessary) and connected to during
      startup.  Changing the variable can result in a situation where
      Mutt is looking in one place for the database and a different
      place for the GPG keyring, resulting in strange behavior.
    </para>
    <para>
      Once the directory, keyring, and database are created, Mutt will
      ask whether you would like to create an account.  In order to
      use Autocrypt, each sending address needs an account.  As a
      convenience you can create an account during the first run.  If
      you would like to add additional accounts later, this can be
      done via the <literal>&lt;autocrypt-acct-menu&gt;</literal>
      function in the index, by default bound to <literal>A</literal>.
    </para>
    <para>
      Account creation will first ask you for an email address.  Next,
      it will ask whether you want to create a new key or select an
      existing key.  (Note key selection takes place from the <link
      linkend="autocrypt-dir">$autocrypt_dir</link> keyring, which
      will normally be empty during first run).  Finally, it will ask
      whether this address should prefer encryption or not.  Autocrypt
      1.1 allows automatically enabling encryption if
      <emphasis>both</emphasis> sender and receiver have set
      <quote>prefer encryption</quote>.  Otherwise, you will need to
      manually enable autocrypt encryption in the compose menu.  For
      more details, see the compose menu section below.
    </para>
    <para>
      After optionally creating an account, Mutt will prompt you to
      scan mailboxes for Autocrypt headers.  This step occurs because
      header cached messages are not re-scanned for Autocrypt headers.
      Scanning during this step will temporarily disable the header
      cache while opening each mailbox.  If you wish to do this
      manually later, you can simulate the same thing by unsetting
      <link linkend="header-cache">$header_cache</link> and opening a
      mailbox.
    </para>
    <para>
      A final technical note: the first run process takes place
      between reading the muttrc and opening the initial mailbox.
      Some muttrc files will <link linkend="push">push</link> macros
      to be run after opening the mailbox.  To prevent this from
      interfering with the first run prompts, Mutt disables all macros
      during the first run.
    </para>
  </sect2>

  <sect2 id="autocryptdoc-compose">
    <title>Compose Menu</title>
    <para>
      When enabled, Autocrypt will add a line to the compose menu with
      two fields: <literal>Autocrypt:</literal> and
      <literal>Recommendation:</literal>.
    </para>
    <para>
      The <literal>Autocrypt:</literal> field shows whether the
      message will be encrypted by Autocrypt when sent.  It has two
      values: <literal>Encrypt</literal> and <literal>Off</literal>.
      <literal>Encrypt</literal> can be enabled using the
      <literal>&lt;autocrypt-menu&gt;</literal> function, by default
      bound to <literal>o</literal>.
    </para>
    <para>
      The <literal>Recommendation:</literal> field shows the output of
      the Autocrypt recommendation engine.  This can have one of five
      values:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>Off</literal> means the engine is disabled.  This
          can happen if the From address doesn't have an autocrypt
          account, or if the account has been manually disabled.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>No</literal> means one or more recipients are
          missing an autocrypt key, or the key found is unusable
          (i.e. expired, revoked, disabled, invalid, or not usable for
          encryption.)
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>Discouraged</literal> means a key was found for
          every recipient, but the engine is not confident the message
          will be decryptable by the recipient.  This can happen if
          the key hasn't been used recently (compared to their last
          seen email).
        </para>
        <para>
          It can also happen if the key wasn't seen first-hand from
          the sender.  Autocrypt has a feature where recipient keys
          can be included in group-encrypted emails.  This allows you
          to reply to a conversation where you don't have a key
          first-hand from one of the other recipients.  However, those
          keys are not trusted as much as from first-hand emails, so
          the engine warns you with a <literal>Discouraged</literal>
          status.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>Available</literal> means a key was found for every
          recipient, and the engine believes all keys are recent and
          seen from the recipient first hand.  However, either you or
          one of the recipients chose not to specify <quote>prefer
          encryption</quote>.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>Yes</literal> is the same as
          <literal>Available</literal>, with the addition that you and
          all recipients have specified <quote>prefer
          encryption</quote>.  This value will automatically enable
          encryption, unless you have manually switched it off or
          enabled regular encryption or signing via the
          <literal>&lt;pgp-menu&gt;</literal>.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      As mentioned above the <literal>&lt;autocrypt-menu&gt;</literal>
      function, by default bound to <literal>o</literal>, can be used
      to change the <literal>Encrypt:</literal> field value.
      <literal>(e)ncrypt</literal> will toggle encryption on.
      <literal>(c)lear</literal> will toggle encryption off.  If
      either of these are chosen, the field will remain in that state
      despite what the <literal>Recommendation:</literal> field shows.
      Lastly, <literal>(a)utomatic</literal> will set the value based
      on the recommendation engine's output.
    </para>
    <para>
      Autocrypt encryption defers to normal encryption or signing.
      <emphasis>Anything</emphasis> that enables normal encryption or
      signing will cause autocrypt encryption to turn off.  The only
      exception is when replying to an autocrypt-encrypted email
      (i.e. an email decrypted from the <link
      linkend="autocrypt-dir">$autocrypt_dir</link> keyring).  Then,
      if <link linkend="autocrypt-reply">$autocrypt_reply</link> is
      <emphasis>set</emphasis>, autocrypt mode will be forced on,
      overriding the settings
      <link linkend="crypt-autosign">$crypt_autosign</link>,
      <link linkend="crypt-autoencrypt">$crypt_autoencrypt</link>,
      <link linkend="crypt-replyencrypt">$crypt_replyencrypt</link>,
      <link linkend="crypt-replysign">$crypt_replysign</link>,
      <link linkend="crypt-replysignencrypted">$crypt_replysignencrypted</link>, and
      <link linkend="crypt-opportunistic-encrypt">$crypt_opportunistic_encrypt</link>.
    </para>
    <para>
      When postponing a message, autocrypt will respect <link
      linkend="postpone-encrypt">$postpone_encrypt</link>, but will
      use the autocrypt account key to encrypt the message.  Be sure
      to set <link linkend="postpone-encrypt">$postpone_encrypt</link>
      to ensure postponed messages marked for autocrypt encryption are
      encrypted.
    </para>
  </sect2>

  <sect2 id="autocryptdoc-acctmgmt">
    <title>Account Management</title>
    <para>
      The Autocrypt Account Menu is available from the index via
      <literal>&lt;autocrypt-acct-menu&gt;</literal>, by default bound
      to <literal>A</literal>.  See <link
      linkend="autocrypt-account-map">Autocrypt Account Menu</link> for the
      list of functions and their default keybindings.
    </para>
    <para>
      In this menu, you can create new accounts, delete accounts,
      toggle an account active/inactive, and toggle the <quote>prefer
      encryption</quote> flag for an account.
    </para>
    <para>
      Deleting an account only removes the account from the database.
      The GPG key is kept, to ensure you still have the ability to
      read past encrypted emails.
    </para>
    <para>
      The Autocrypt 1.1 <quote>Setup Message</quote> feature is not
      available yet, but will be added in the future.
    </para>
  </sect2>

  <sect2 id="autocryptdoc-keyrings">
    <title>Alternative Key and Keyring Strategies</title>
    <para>
      Mutt by default partitions Autocrypt from normal keyring
      encryption/signing.  It does this by using a separate GPG
      keyring (in <link linkend="autocrypt-dir">$autocrypt_dir</link>)
      and creating a new ECC key in that keyring for accounts.  There
      are good reasons for doing this by default.  It keeps random
      keys found inside email headers out of your normal keyring.  ECC
      keys are compact and better suited for email headers.  Autocrypt
      key selection is completely different from <quote>web of
      trust</quote> key selection, based on last-seen rules as opposed
      to trust and validity.  It also allows Mutt to distinguish
      Autocrypt encrypted emails from regular encrypted emails, and
      set the mode appropriately when replying to each type of email.
    </para>
    <para>
      Still, some users may want to use an existing key from their
      normal keyring for Autocrypt too.  There are two ways this can
      be accomplished.  The <emphasis>recommended</emphasis> way is to
      set <link linkend="autocrypt-dir">$autocrypt_dir</link> to your
      normal keyring directory (e.g. <literal>~/.gnupg</literal>).
      During account creation, choosing <quote>(s)elect existing GPG
      key</quote> will then list and allow selecting your existing key
      for the new account.
    </para>
    <para>
     An alternative is to copy your key over to the Autocrypt keyring,
     but there is a severe downside.  Mutt <emphasis>first</emphasis>
     tries to decrypt messages using the Autocrypt keyring, and if
     that fails tries the normal keyring second.  This means all
     encrypted emails to that key will be decrypted, and have
     signatures verified from, the Autocrypt keyring.  Keys signatures
     and web of trust from your normal keyring will no longer show up
     in signatures when decrypting.
    </para>
    <para>
      For that reason, if you want to use an existing key from your
      normal keyring, it is recommended to just set <link
      linkend="autocrypt-dir">$autocrypt_dir</link> to
      <literal>~/.gnupg</literal>.  This allows <quote>web of
      trust</quote> to show an appropriate signature message for
      verified messages.  Autocrypt header keys will be imported into
      your keyring, but if you don't want them mixed you should
      strongly consider using a separate autocrypt key and keyring
      instead.
    </para>
    <para>
      Both methods have a couple additional caveats:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Replying to an Autocrypt decrypted message by default forces
          Autocrypt mode on.  By sharing the same key, all replies
          will then start in Autocrypt mode, even if a message wasn't
          sent by one of your Autocrypt peers.  <link
          linkend="autocrypt-reply">$autocrypt_reply</link> can be
          <emphasis>unset</emphasis> to allow manual control of the
          mode when replying.
        </para>
      </listitem>
      <listitem>
        <para>
          When Mutt creates an account from a gpg key, it exports the
          public key, base64 encodes it, and stores that value in the
          sqlite3 database.  The value is then used in the Autocrypt
          header added to outgoing emails.  The ECC keys Mutt creates
          don't change, but if you use external keys that expire, when
          you resign to extend the expiration you will need to
          recreate the Autocrypt account using the <link
          linkend="autocryptdoc-acctmgmt">account menu</link>.
          Otherwise the Autocrypt header will contain the old expired
          exported keydata.
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
</sect1>
</chapter>

<chapter id="security">
<title>Security Considerations</title>

<para>
First of all, Mutt contains no security holes included by intention but
may contain unknown security holes. As a consequence, please run Mutt
only with as few permissions as possible. Especially, do not run Mutt as
the super user.
</para>

<para>
When configuring Mutt, there're some points to note about secure setups
so please read this chapter carefully.
</para>

<sect1 id="security-passwords">
<title>Passwords</title>

<para>
Although Mutt can be told the various passwords for accounts, please
never store passwords in configuration files. Besides the fact that the
system's operator can always read them, you could forget to mask it out
when reporting a bug or asking for help via a mailing list. Even worse,
your mail including your password could be archived by internet search
engines, mail-to-news gateways etc. It may already be too late before
you notice your mistake.
</para>

</sect1>

<sect1 id="security-tempfiles">
<title>Temporary Files</title>

<para>
Mutt uses many temporary files for viewing messages, verifying digital
signatures, etc. As long as being used, these files are visible by other
users and maybe even readable in case of misconfiguration.  Also, a
different location for these files may be desired which can be changed
via the <link linkend="tmpdir">$tmpdir</link> variable.
</para>

</sect1>

<sect1 id="security-leaks">
<title>Information Leaks</title>

<sect2 id="security-leaks-mid">
<title>Message-Id: headers</title>

<para>
Message-Id: headers contain a local part that is to be created in a
unique fashion. In order to do so, Mutt will <quote>leak</quote> some
information to the outside world when sending messages: the generation
of this header includes a step counter which is increased (and rotated)
with every message sent. Other parts include the date, time, PID of mutt,
and <link linkend="hostname">$hostname</link>.
In a longer running mutt session, others can
make assumptions about your mailing habits depending on the number of
messages sent. If this is not desired, the header can be manually
provided using <link linkend="edit-headers">$edit_headers</link> (though
not recommended).
</para>

</sect2>

<sect2 id="security-leaks-mailto">
<title><literal>mailto:</literal>-style Links</title>

<para>
As Mutt be can be set up to be the mail client to handle
<literal>mailto:</literal> style links in websites, there're security
considerations, too. Arbitrary header fields can be embedded in these
links which could override existing header fields or attach arbitrary
files using <link linkend="attach-header">the Attach:
pseudoheader</link>. This may be problematic if the <link
linkend="edit-headers">$edit-headers</link> variable is
<emphasis>unset</emphasis>, i.e. the user doesn't want to see header
fields while editing the message and doesn't pay enough attention to the
compose menu's listing of attachments.
</para>

<para>
For example, following a link like
</para>

<screen>
mailto:joe@host?Attach=~/.gnupg/secring.gpg</screen>

<para>
will send out the user's private gnupg keyring to
<literal>joe@host</literal> if the user doesn't follow the information
on screen carefully enough.
</para>

<para>
To prevent these issues, Mutt by default only accepts the
<literal>Subject</literal> and <literal>Body</literal> headers.
Allowed headers can be adjusted with the
<link linkend="mailto-allow"><command>mailto_allow</command></link> and
<link linkend="mailto-allow"><command>unmailto_allow</command></link> commands.
</para>

</sect2>

</sect1>

<sect1 id="security-external">
<title>External Applications</title>

<para>
Mutt in many places has to rely on external applications or for
convenience supports mechanisms involving external applications.
</para>

<para>
One of these is the <literal>mailcap</literal> mechanism as defined by
RfC1524. Details about a secure use of the mailcap mechanisms is given
in <xref linkend="secure-mailcap"/>.
</para>

<para>
Besides the mailcap mechanism, Mutt uses a number of other external
utilities for operation, for example to provide crypto support, in
backtick expansion in configuration files or format string filters.  The
same security considerations apply for these as for tools involved via
mailcap.
</para>

</sect1>

</chapter>


<chapter id="tuning">
<title>Performance Tuning</title>

<sect1 id="tuning-mailboxes">
<title>Reading and Writing Mailboxes</title>

<para>
Mutt's performance when reading mailboxes can be improved in two ways:
</para>

<orderedlist>

<listitem>
<para>
For remote folders (IMAP and POP) as well as folders using one-file-per
message storage (Maildir and MH), Mutt's performance can be greatly
improved using <link linkend="header-caching">header caching</link>.
using a single database per folder.
</para>
</listitem>

<listitem>
<para>
Mutt provides the <link linkend="read-inc">$read_inc</link> and <link
linkend="write-inc">$write_inc</link> variables to specify at which rate
to update progress counters. If these values are too low, Mutt may spend
more time on updating the progress counter than it spends on actually
reading/writing folders.
</para>

<para>
For example, when opening a maildir folder with a few thousand messages,
the default value for <link linkend="read-inc">$read_inc</link> may be
too low. It can be tuned on on a folder-basis using <link
linkend="folder-hook"><command>folder-hook</command>s</link>:
</para>

<screen>
<emphasis role="comment"># use very high $read_inc to speed up reading hcache'd maildirs</emphasis>
folder-hook . 'set read_inc=1000'
<emphasis role="comment"># use lower value for reading slower remote IMAP folders</emphasis>
folder-hook ^imap 'set read_inc=100'
<emphasis role="comment"># use even lower value for reading even slower remote POP folders</emphasis>
folder-hook ^pop 'set read_inc=1'</screen>

</listitem>
</orderedlist>

<para>
These settings work on a per-message basis. However, as messages may
greatly differ in size and certain operations are much faster than
others, even per-folder settings of the increment variables may not be
desirable as they produce either too few or too much progress updates.
Thus, Mutt allows to limit the number of progress updates per second
it'll actually send to the terminal using the <link
linkend="time-inc">$time_inc</link> variable.
</para>

</sect1>

<sect1 id="tuning-messages">
<title>Reading Messages from Remote Folders</title>

<para>
Reading messages from remote folders such as IMAP an POP can be slow
especially for large mailboxes since Mutt only caches a very limited
number of recently viewed messages (usually 10) per session (so that it
will be gone for the next session.)
</para>

<para>
To improve performance and permanently cache whole messages, please
refer to Mutt's so-called <link linkend="body-caching">body
caching</link> for details.
</para>

</sect1>

<sect1 id="tuning-search">
<title>Searching and Limiting</title>

<para>
When searching mailboxes either via a search or a limit action, for some
patterns Mutt distinguishes between regular expression and string
searches. For regular expressions, patterns are prefixed with
<quote>~</quote> and with <quote>=</quote> for string searches.
</para>

<para>
Even though a regular expression search is fast, it's several times
slower than a pure string search which is noticeable especially on large
folders. As a consequence, a string search should be used instead of a
regular expression search if the user already knows enough about the
search pattern.
</para>

<para>
For example, when limiting a large folder to all messages sent to or by
an author, it's much faster to search for the initial part of an e-mail
address via <literal>=Luser@</literal> instead of
<literal>~Luser@</literal>. This is especially true for searching
message bodies since a larger amount of input has to be searched.
</para>

<para>
As for regular expressions, a lower case string search pattern makes
Mutt perform a case-insensitive search except for IMAP (because for IMAP
Mutt performs server-side searches which don't support
case-insensitivity).
</para>

</sect1>

</chapter>

<chapter id="reference">
<title>Reference</title>

<sect1 id="commandline">
<title>Command-Line Options</title>

<para>
Running <literal>mutt</literal> with no arguments will make Mutt attempt
to read your spool mailbox.  However, it is possible to read other
mailboxes and to send messages from the command line as well.
</para>

<table id="tab-commandline-options">
<title>Command line options</title>
<tgroup cols="2">
<thead>
<row><entry>Option</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>-A</entry><entry>expand an alias</entry></row>
<row><entry>-a</entry><entry>attach a file to a message</entry></row>
<row><entry>-b</entry><entry>specify a blind carbon-copy (BCC) address</entry></row>
<row><entry>-c</entry><entry>specify a carbon-copy (Cc) address</entry></row>
<row><entry>-d</entry><entry>log debugging output to ~/.muttdebug0 if mutt was compiled with +DEBUG; it can range from 1-5 and affects verbosity (a value of 2 is recommended)</entry></row>
<row><entry>-D</entry><entry>print the value of all Mutt variables to stdout</entry></row>
<row><entry>-E</entry><entry>edit the draft (-H) or include (-i) file</entry></row>
<row><entry>-e</entry><entry>specify a config command to be run after initialization files are read</entry></row>
<row><entry>-f</entry><entry>specify a mailbox to load</entry></row>
<row><entry>-F</entry><entry>specify an alternate file to read initialization commands</entry></row>
<row><entry>-h</entry><entry>print help on command line options</entry></row>
<row><entry>-H</entry><entry>specify a draft file from which to read a header and body</entry></row>
<row><entry>-i</entry><entry>specify a file to include in a message composition</entry></row>
<row><entry>-m</entry><entry>specify a default mailbox type</entry></row>
<row><entry>-n</entry><entry>do not read the system Muttrc</entry></row>
<row><entry>-p</entry><entry>recall a postponed message</entry></row>
<row><entry>-Q</entry><entry>query a configuration variable</entry></row>
<row><entry>-R</entry><entry>open mailbox in read-only mode</entry></row>
<row><entry>-s</entry><entry>specify a subject (enclose in quotes if it contains spaces)</entry></row>
<row><entry>-v</entry><entry>show version number and compile-time definitions</entry></row>
<row><entry>-x</entry><entry>simulate the mailx(1) compose mode</entry></row>
<row><entry>-y</entry><entry>show a menu containing the files specified by the <command>mailboxes</command> command</entry></row>
<row><entry>-z</entry><entry>exit immediately if there are no messages in the mailbox</entry></row>
<row><entry>-Z</entry><entry>open the first folder with new message, exit immediately if none</entry></row>
</tbody>
</tgroup>
</table>

<para>
To read messages in a mailbox
</para>

<cmdsynopsis>
<command>mutt</command>
<arg choice="opt"><option>-nz</option></arg>
<arg choice="opt"><option>-F</option>
<replaceable>muttrc</replaceable>
</arg>
<arg choice="opt"><option>-m</option>
<replaceable>type</replaceable>
</arg>
<arg choice="opt"><option>-f</option>
<replaceable>mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
To compose a new message
</para>

<cmdsynopsis>
<command>mutt</command>
<arg choice="opt"><option>-En</option></arg>
<arg choice="opt"><option>-F</option>
<replaceable>muttrc</replaceable>
</arg>
<arg choice="opt"><option>-c</option>
<replaceable>address</replaceable>
</arg>
<arg choice="opt"><option>-Hi</option>
<replaceable>filename</replaceable>
</arg>
<arg choice="opt"><option>-s</option>
<replaceable>subject</replaceable>
</arg>
<arg choice="opt">
<option>-a</option>
<replaceable>file</replaceable>
<arg choice="opt" rep="repeat"/>
--
</arg>
<group choice="plain" rep="repeat">
<arg choice="plain">
<replaceable>address</replaceable>
</arg>
<arg choice="plain">
<replaceable>mailto_url</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
Mutt also supports a <quote>batch</quote> mode to send prepared
messages.  Simply redirect input from the file you wish to send.  For
example,
</para>

<screen>
mutt -s "data set for run #2" professor@bigschool.edu &lt; ~/run2.dat</screen>

<para>
will send a message to
<literal>&lt;professor@bigschool.edu&gt;</literal> with a subject of
<quote>data set for run #2</quote>.  In the body of the message will be
the contents of the file <quote>~/run2.dat</quote>.
</para>

<para>
An include file passed with <literal>-i</literal> will be used as the
body of the message.  When combined with <literal>-E</literal>, the
include file will be directly edited during message composition.  The
file will be modified regardless of whether the message is sent or
aborted.
</para>

<para>
A draft file passed with <literal>-H</literal> will be used as the
initial header and body for the message.  Multipart messages can be
used as a draft file.  When combined with <literal>-E</literal>, the
draft file will be updated to the final state of the message after
composition, regardless of whether the message is sent, aborted, or
even postponed.  Note that if the message is sent encrypted or signed,
the draft file will be saved that way too.
</para>

<para>
All files passed with <literal>-a</literal> <emphasis>file</emphasis>
will be attached as a MIME part to the message. To attach a single or
several files, use <quote>--</quote> to separate files and recipient
addresses:
</para>

<screen>
mutt -a image.png -- some@one.org</screen>

<para>
or
</para>

<screen>
mutt -a *.png -- some@one.org</screen>

<note>
<para>
The <literal>-a</literal> option must be last in the option list.
</para>
</note>

<para>
In addition to accepting a list of email addresses, Mutt also accepts a URL with
the <literal>mailto:</literal> schema as specified in RFC2368.  This is useful
when configuring a web browser to launch Mutt when clicking on mailto links.
</para>

<screen>
mutt mailto:some@one.org?subject=test&amp;cc=other@one.org</screen>

</sect1>

<sect1 id="commands">
<title>Configuration Commands</title>

<para>
The following are the commands understood by Mutt:
</para>

<itemizedlist>

<listitem>
<cmdsynopsis>
<command><link linkend="account-hook">account-hook</link></command>
<arg choice="plain">
<replaceable>regexp</replaceable>
<replaceable>command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="alias">alias</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">address</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">address</replaceable>
</arg>

<command><link linkend="alias">unalias</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">key</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="alternates">alternates</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<arg choice="plain">
<replaceable>regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>regexp</replaceable>
</arg>

<command><link linkend="alternates">unalternates</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>regexp</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="alternative-order">alternative_order</link></command>
<arg choice="plain">
<replaceable>mimetype</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>

<command><link linkend="alternative-order">unalternative_order</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="attachments">attachments</link></command>
<arg choice="plain">
<replaceable>{ + | - }disposition</replaceable>
</arg>
<arg choice="plain">
<replaceable>mime-type</replaceable>
</arg>

<command><link linkend="attachments">unattachments</link></command>
<arg choice="plain">
<replaceable>{ + | - }disposition</replaceable>
</arg>
<arg choice="plain">
<replaceable>mime-type</replaceable>
</arg>

<command><link linkend="attachments">attachments</link></command>
<arg choice="plain"><option>?</option></arg>

<command><link linkend="attachments">unattachments</link></command>
<arg choice="plain"><option>*</option></arg>

</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="auto-view">auto_view</link></command>
<arg choice="plain">
<replaceable>mimetype</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>

<command><link linkend="auto-view">unauto_view</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="bind">bind</link></command>
<arg choice="plain">
<replaceable class="parameter">map</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">function</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="charset-hook">charset-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">alias</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">charset</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="charset-hook">iconv-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">charset</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">local-charset</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="color">color</link></command>
<arg choice="plain">
<replaceable class="parameter">object</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>

<command><link linkend="color">color</link></command>
<group choice="req">
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>

<command><link linkend="color">color</link></command>
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>

<command><link linkend="color">color</link></command>
<arg choice="plain">
<option>compose</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">composeobject</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>

<command><link linkend="color">uncolor</link></command>
<group choice="req">
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="crypt-hook">crypt-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">keyid</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="echo">echo</link></command>
<arg choice="plain">
<replaceable class="parameter">message</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="exec">exec</link></command>
<arg choice="plain">
<replaceable class="parameter">function</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">function</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="fcc-hook">fcc-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="fcc-save-hook">fcc-save-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="folder-hook">folder-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">[!]regexp</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="addrgroup">group</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain" rep="repeat">
<option>-rx</option>
<replaceable class="parameter">expr</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-addr</option>
<replaceable class="parameter">expr</replaceable>
</arg>
</group>

<command><link linkend="addrgroup">ungroup</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-rx</option>
<replaceable class="parameter">expr</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-addr</option>
<replaceable class="parameter">expr</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="hdr-order">hdr_order</link></command>
<arg choice="plain">
<replaceable class="parameter">header</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">header</replaceable>
</arg>

<command><link linkend="hdr-order">unhdr_order</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>header</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="ignore">ignore</link></command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>

<command><link linkend="ignore">unignore</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="index-format-hook">index-format-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">format-string</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="lists">lists</link></command>
<arg>
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>

<command><link linkend="lists">unlists</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>regexp</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="macro">macro</link></command>
<arg choice="plain">
<replaceable class="parameter">menu</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">sequence</replaceable>
</arg>
<arg choice="opt">
<replaceable class="parameter">description</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mailboxes">mailboxes</link></command>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>

<command><link linkend="mailboxes">unmailboxes</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mailto-allow">mailto_allow</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">header-field</replaceable>
</arg>
</group>

<command><link linkend="mailto-allow">unmailto_allow</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">header-field</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mbox-hook">mbox-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">[!]regexp</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="message-hook">message-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mime-lookup">mime_lookup</link></command>
<arg choice="plain">
<replaceable>mimetype</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>

<command><link linkend="mime-lookup">unmime_lookup</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mono">mono</link></command>
<arg choice="plain">
<replaceable class="parameter">object</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>

<command><link linkend="mono">mono</link></command>
<group choice="req">
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>

<command><link linkend="mono">mono</link></command>
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>

<command><link linkend="mono">mono</link></command>
<arg choice="plain">
<option>compose</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">composeobject</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>

<command><link linkend="mono">unmono</link></command>
<group choice="req">
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="my-hdr">my_hdr</link></command>
<arg choice="plain">
<replaceable class="parameter">string</replaceable>
</arg>

<command><link linkend="my-hdr">unmy_hdr</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">field</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="push">push</link></command>
<arg choice="plain">
<replaceable class="parameter">string</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="save-hook">save-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="score-command">score</link></command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">value</replaceable>
</arg>

<command><link linkend="score-command">unscore</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="reply-hook">reply-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="send-hook">send-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="send2-hook">send2-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">[!]pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="set">set</link></command>
<group choice="req">
<arg choice="plain">
<group choice="opt">
<arg choice="plain"><option>no</option></arg>
<arg choice="plain"><option>inv</option></arg>
</group>
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">variable=value</replaceable>
</arg>
</group>
<arg choice="opt" rep="repeat"></arg>

<command><link linkend="set">toggle</link></command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>

<command><link linkend="set">unset</link></command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>

<command><link linkend="set">reset</link></command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
  <cmdsynopsis>
    <command><link linkend="setenv">setenv</link></command>
    <arg choice="plain">
      <replaceable class="parameter">[?]variable</replaceable>
    </arg>
    <arg choice="opt">
      <replaceable class="parameter">value</replaceable>
    </arg>

    <command><link linkend="setenv">unsetenv</link></command>
    <arg choice="plain">
      <replaceable class="parameter">variable</replaceable>
    </arg>
  </cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="sidebar-whitelist">sidebar_whitelist</link></command>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>

<command><link linkend="sidebar-whitelist">unsidebar_whitelist</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="source">source</link></command>
<arg choice="plain">
<replaceable class="parameter">filename</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="spam">spam</link></command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">format</replaceable>
</arg>

<command><link linkend="spam">nospam</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="display-munging">subjectrx</link></command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">replacement</replaceable>
</arg>

<command><link linkend="display-munging">unsubjectrx</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="subscribe">subscribe</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>

<command><link linkend="subscribe">unsubscribe</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="unhook">unhook</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">hook-type</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

</itemizedlist>

</sect1>

<sect1 id="variables">
<title>Configuration Variables</title>
