diff -urN ./PATCHES ../mutt-2.2.5new/PATCHES
--- ./PATCHES	2020-06-25 06:41:42.000000000 +0900
+++ ../mutt-2.2.5new/PATCHES	2022-05-22 18:57:56.120010000 +0900
@@ -0,0 +1 @@
+patch-2.2.5.tt.wcwidth+cjk_width.1
diff -urN ./configure ../mutt-2.2.5new/configure
--- ./configure	2022-05-17 02:21:02.000000000 +0900
+++ ../mutt-2.2.5new/configure	2022-05-22 17:23:20.940770000 +0900
@@ -881,6 +881,7 @@
 with_libiconv_prefix
 with_libintl_prefix
 with_idn
+enable_cjk_ambiguous_width
 with_idn2
 with_wc_funcs
 enable_doc
@@ -1555,6 +1556,9 @@
   --disable-rpath         do not hardcode runtime library paths
   --disable-doc           Do not build the documentation
   --disable-full-doc      Omit disabled variables
+  -enable-cjk-ambiguous-width
+                          Enable East Asian Ambiguous characters support
+                          (using own wcwidth)
 
 Optional Packages:
   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
@@ -15220,6 +15224,21 @@
 
     INTLLIBS="$LIBINTL"
 
+
+# Check whether --enable-cjk-ambiguous-width was given.
+if test "${enable_cjk_ambiguous_width+set}" = set; then :
+  enableval=$enable_cjk_ambiguous_width;  if test "x$enableval" = "xyes" ; then
+               cjk_width=yes
+          fi
+
+fi
+
+if test "x$cjk_width" = "xyes" ; then
+
+$as_echo "#define USE_CJK_WIDTH 1" >>confdefs.h
+
+       MUTT_LIB_OBJECTS="$MUTT_LIB_OBJECTS wcwidth.o"
+fi
 
 
 
diff -urN ./configure.ac ../mutt-2.2.5new/configure.ac
--- ./configure.ac	2022-05-12 01:57:07.000000000 +0900
+++ ../mutt-2.2.5new/configure.ac	2022-05-22 17:23:20.941978000 +0900
@@ -1499,6 +1499,16 @@
 
 dnl -- locales --
 
+AC_ARG_ENABLE(cjk-ambiguous-width, AC_HELP_STRING([--enable-cjk-ambiguous-width], [ Enable East Asian Ambiguous characters support (using own wcwidth)]),
+        [ if test "x$enableval" = "xyes" ; then
+               cjk_width=yes
+          fi
+       ])
+if test "x$cjk_width" = "xyes" ; then
+       AC_DEFINE(USE_CJK_WIDTH,1,[ Define if you want to support East Asian Ambiguous class. ])
+       MUTT_LIB_OBJECTS="$MUTT_LIB_OBJECTS wcwidth.o"
+fi
+
 AC_CHECK_HEADERS(wchar.h)
 
 AC_CACHE_CHECK([for wchar_t], mutt_cv_wchar_t,
@@ -1569,7 +1579,10 @@
 if test $wc_funcs = yes; then
         AC_DEFINE(HAVE_WC_FUNCS,1,[ Define if you are using the system's wchar_t functions. ])
 else
-	MUTT_LIB_OBJECTS="$MUTT_LIB_OBJECTS utf8.o wcwidth.o"
+        MUTT_LIB_OBJECTS="$MUTT_LIB_OBJECTS utf8.o"
+        if test "x$cjk_width" != "xyes"; then
+                MUTT_LIB_OBJECTS="$MUTT_LIB_OBJECTS wcwidth.o"
+        fi
 fi
 
 AC_CACHE_CHECK([for nl_langinfo and CODESET], mutt_cv_langinfo_codeset,
diff -urN ./curs_lib.c ../mutt-2.2.5new/curs_lib.c
--- ./curs_lib.c	2022-05-12 01:57:07.000000000 +0900
+++ ../mutt-2.2.5new/curs_lib.c	2022-05-22 17:23:20.943175000 +0900
@@ -1374,7 +1374,14 @@
       wc = replacement_char ();
     }
     if (arboreal && wc < MUTT_TREE_MAX)
-      w = 1; /* hack */
+    {
+#ifdef USE_CJK_WIDTH
+      if (Charset_is_utf8 && option (OPTCJKWIDTHTREECHARS) && !option (OPTASCIICHARS))
+        w = wcwidth (TreeChars[wc]);
+      else
+#endif
+        w = 1;
+    }
     else
     {
 #ifdef HAVE_ISWBLANK
@@ -1603,10 +1610,12 @@
   int w;
   size_t k, n;
   mbstate_t mbstate;
+  int arboreal;
 
   if (!s) return 0;
 
   n = mutt_strlen (s);
+  arboreal = (s[0] < MUTT_TREE_MAX) ? 1 : 0;
 
   memset (&mbstate, 0, sizeof (mbstate));
   for (w=0; n && (k = mbrtowc (&wc, s, n, &mbstate)); s += k, n -= k)
@@ -1618,9 +1627,21 @@
       k = (k == (size_t)(-1)) ? 1 : n;
       wc = replacement_char ();
     }
-    if (!IsWPrint (wc))
-      wc = '?';
-    w += wcwidth (wc);
+    if (wc < MUTT_TREE_MAX && arboreal && k == 1)
+    {
+#ifdef USE_CJK_WIDTH
+      if (Charset_is_utf8 && option (OPTCJKWIDTHTREECHARS) && !option (OPTASCIICHARS))
+        w += wcwidth (TreeChars[wc]);
+      else
+#endif
+        w++;
+    }
+    else
+    {
+      if (!IsWPrint (wc))
+        wc = '?';
+      w += wcwidth (wc);
+    }
   }
   return w;
 }
diff -urN ./globals.h ../mutt-2.2.5new/globals.h
--- ./globals.h	2022-05-12 01:57:07.000000000 +0900
+++ ../mutt-2.2.5new/globals.h	2022-05-22 17:23:20.944307000 +0900
@@ -324,9 +324,31 @@
 
 const char * const BodyTypes[] = { "x-unknown", "audio", "application", "image", "message", "model", "multipart", "text", "video" };
 const char * const BodyEncodings[] = { "x-unknown", "7bit", "8bit", "quoted-printable", "base64", "binary", "x-uuencoded" };
+#ifdef USE_CJK_WIDTH
+const wchar_t TreeChars[] =
+{
+  0xFEFF, /* not used */
+  0x2514, /* M_TREE_LLCORNER  WACS_LLCORNER */
+  0x250C, /* M_TREE_ULCORNER  WACS_ULCORNER */
+  0x251C, /* M_TREE_LTEE      WACS_LTEE */
+  0x2500, /* M_TREE_HLINE     WACS_HLINE */
+  0x2502, /* M_TREE_VLINE     WACS_VLINE */
+  0x0020, /* M_TREE_SPACE */
+  0x003E, /* M_TREE_RARROW */
+  0x002A, /* M_TREE_STAR  fake thread indicator */
+  0x0026, /* M_TREE_HIDDEN */
+  0x003D, /* M_TREE_EQUALS */
+  0x252C, /* M_TREE_TTEE      WACS_TTEE */
+  0x2534, /* M_TREE_BTEE      WACS_BTEE */
+  0x003F  /* M_TREE_MISSING */
+};
+#endif /* USE_CJK_WIDTH */
 #else
 extern const char * const Weekdays[];
 extern const char * const Months[];
+#ifdef USE_CJK_WIDTH
+extern const wchar_t TreeChars[];
+#endif /* USE_CJK_WIDTH */
 #endif
 
 #ifdef MAIN_C
diff -urN ./init.h ../mutt-2.2.5new/init.h
--- ./init.h	2022-05-12 01:57:07.000000000 +0900
+++ ../mutt-2.2.5new/init.h	2022-05-22 17:23:20.946597000 +0900
@@ -662,6 +662,31 @@
   ** this variable is \fIunset\fP, no check for new mail is performed
   ** while the mailbox is open.
   */
+#ifdef USE_CJK_WIDTH
+  { "cjk_width",	DT_BOOL, R_NONE, OPTCJKWIDTH, {.l=0} },
+  /*
+  ** .pp
+  ** When this option is set, characters in the East Asian Ambiguous (A)
+  ** category as defined in Unicode Technical Report #11 have a column
+  ** width of 2. Othrwise, they have a column width of 1.
+  ** This variant might be useful for users of CJK legacy encodings
+  ** who want to migrate to UCS without changing the traditional terminal
+  ** character-width behaviour.
+  ** .pp
+  ** \fBNote:\fP this option only affects in UTF-8 encoding.
+  */
+  { "cjk_width_tree_chars",	DT_BOOL, R_NONE, OPTCJKWIDTHTREECHARS, {.l=0} },
+  /*
+  ** .pp
+  ** If \fIset\fP,  Mutt will use the result of $cjk_width as a column 
+  ** width of WACS characters when displaying thread and attachment trees.
+  ** This variant might be useful for users of CJK legacy encodings
+  ** who want to migrate to UCS without changing the traditional terminal
+  ** character-width behaviour.
+  ** .pp
+  ** \fBNote:\fP this option only affects in UTF-8 encoding.
+  */
+#endif
   { "collapse_unread",	DT_BOOL, R_NONE, {.l=OPTCOLLAPSEUNREAD}, {.l=1} },
   /*
   ** .pp
diff -urN ./main.c ../mutt-2.2.5new/main.c
--- ./main.c	2022-05-12 01:57:07.000000000 +0900
+++ ../mutt-2.2.5new/main.c	2022-05-22 17:23:20.947497000 +0900
@@ -477,6 +477,12 @@
     "-LOCALES_HACK  "
 #endif
 
+#ifdef USE_CJK_WIDTH
+       "+USE_CJK_WIDTH  "
+#else
+       "-USE_CJK_WIDTH  "
+#endif
+
 #ifdef HAVE_WC_FUNCS
     "+HAVE_WC_FUNCS  "
 #else
diff -urN ./mbyte.c ../mutt-2.2.5new/mbyte.c
--- ./mbyte.c	2022-05-12 01:57:07.000000000 +0900
+++ ../mutt-2.2.5new/mbyte.c	2022-05-22 17:23:20.948972000 +0900
@@ -17,7 +17,7 @@
  */
 
 /*
- * Japanese support by TAKIZAWA Takashi <taki@luna.email.ne.jp>.
+ * CJK support by TAKIZAWA Takashi <taki@luna.email.ne.jp>.
  */
 
 #if HAVE_CONFIG_H
@@ -37,8 +37,8 @@
 #endif
 
 int Charset_is_utf8 = 0;
+static int charset_is_cjk = 0;
 #ifndef HAVE_WC_FUNCS
-static int charset_is_ja = 0;
 static iconv_t charset_to_utf8 = (iconv_t)(-1);
 static iconv_t charset_from_utf8 = (iconv_t)(-1);
 #endif
@@ -50,8 +50,8 @@
   mutt_canonical_charset (buffer, sizeof (buffer), charset);
 
   Charset_is_utf8 = 0;
+  charset_is_cjk = 0;
 #ifndef HAVE_WC_FUNCS
-  charset_is_ja = 0;
   if (charset_to_utf8 != (iconv_t)(-1))
   {
     iconv_close (charset_to_utf8);
@@ -66,12 +66,14 @@
 
   if (mutt_is_utf8 (buffer))
     Charset_is_utf8 = 1;
-#ifndef HAVE_WC_FUNCS
   else if (!ascii_strcasecmp(buffer, "euc-jp") || !ascii_strcasecmp(buffer, "shift_jis")
-           || !ascii_strcasecmp(buffer, "cp932") || !ascii_strcasecmp(buffer, "eucJP-ms"))
+           || !ascii_strcasecmp(buffer, "cp932") || !ascii_strcasecmp(buffer, "eucJP-ms")
+	   || !ascii_strcasecmp (buffer, "gb2312") || !ascii_strcasecmp (buffer, "gb18030")
+	   || !ascii_strcasecmp (buffer, "big5") || !ascii_strcasecmp (buffer, "euc-tw")
+	   || !ascii_strcasecmp (buffer, "euc-kr"))
   {
-    charset_is_ja = 1;
-
+    charset_is_cjk = 1;
+#ifndef HAVE_WC_FUNCS
     /* Note flags=0 to skip charset-hooks: User masters the $charset
      * name, and we are sure of our "utf-8" constant. So there is no
      * possibility of wrong name that we would want to try to correct
@@ -80,24 +82,68 @@
      */
     charset_to_utf8 = mutt_iconv_open ("utf-8", charset, 0);
     charset_from_utf8 = mutt_iconv_open (charset, "utf-8", 0);
-  }
 #endif
+  }
 
 #if defined(HAVE_BIND_TEXTDOMAIN_CODESET) && defined(ENABLE_NLS)
   bind_textdomain_codeset(PACKAGE, buffer);
 #endif
 }
 
+#if !defined(HAVE_WC_FUNCS) || defined(USE_CJK_WIDTH)
+/*
+ * For systems that don't have wcwidth() which functions correctly,
+ * we provide our own wcwidth().
+ * Furthermore, this wcwidth() enables change of character-cell width of
+ * the East Asian Ambiguous class by using $cjk_width.
+ * The function which most systems have cannot do it.
+ * Please read the comment of wcwidth.c about the East Asian Ambiguous
+ * class for details.
+ */
+int wcwidth_ucs(wchar_t ucs);
+int wcwidth_cjk(wchar_t ucs);
+
+int wcwidth (wchar_t wc)
+{
+  if (!Charset_is_utf8)
+  {
+    if (!charset_is_cjk)
+    {
+      /* 8-bit case */
+      if (!wc)
+        return 0;
+      else if ((0 <= wc && wc < 256) && IsPrint (wc))
+        return 1;
+      else
+        return -1;
+    }
+    else
+    {
+      /* CJK */
+      return wcwidth_cjk (wc);
+    }
+  }
+  else {
+#ifdef USE_CJK_WIDTH
+    if (option (OPTCJKWIDTH))
+      return wcwidth_cjk (wc);
+#endif /* USE_CJK_WIDTH */
+    return wcwidth_ucs (wc);
+  }
+}
+#endif /* !HAVE_WC_FUNCS || USE_CJK_WIDTH */
+
+
 #ifndef HAVE_WC_FUNCS
 
 /*
  * For systems that don't have them, we provide here our own
- * implementations of wcrtomb(), mbrtowc(), iswprint() and wcwidth().
+ * implementations of wcrtomb(), mbrtowc() and iswprint().
  * Instead of using the locale, as these functions normally would,
  * we use Mutt's Charset variable. We support 3 types of charset:
  * (1) For 8-bit charsets, wchar_t uses the same encoding as char.
  * (2) For UTF-8, wchar_t uses UCS.
- * (3) For stateless Japanese encodings, we use UCS and convert
+ * (3) For stateless CJK encodings, we use UCS and convert
  *     via UTF-8 using iconv.
  * Unfortunately, we can't handle non-stateless encodings.
  */
@@ -256,7 +302,7 @@
 
 int iswprint (wint_t wc)
 {
-  if (Charset_is_utf8 || charset_is_ja)
+  if (Charset_is_utf8 || charset_is_cjk)
     return ((0x20 <= wc && wc < 0x7f) || 0xa0 <= wc);
   else
     return (0 <= wc && wc < 256) ? IsPrint (wc) : 0;
@@ -264,7 +310,7 @@
 
 int iswspace (wint_t wc)
 {
-  if (Charset_is_utf8 || charset_is_ja)
+  if (Charset_is_utf8 || charset_is_cjk)
     return (9 <= wc && wc <= 13) || wc == 32;
   else
     return (0 <= wc && wc < 256) ? isspace (wc) : 0;
@@ -347,7 +393,7 @@
 
 wint_t towupper (wint_t wc)
 {
-  if (Charset_is_utf8 || charset_is_ja)
+  if (Charset_is_utf8 || charset_is_cjk)
     return towupper_ucs (wc);
   else
     return (0 <= wc && wc < 256) ? toupper (wc) : wc;
@@ -355,7 +401,7 @@
 
 wint_t towlower (wint_t wc)
 {
-  if (Charset_is_utf8 || charset_is_ja)
+  if (Charset_is_utf8 || charset_is_cjk)
     return towlower_ucs (wc);
   else
     return (0 <= wc && wc < 256) ? tolower (wc) : wc;
@@ -363,7 +409,7 @@
 
 int iswalnum (wint_t wc)
 {
-  if (Charset_is_utf8 || charset_is_ja)
+  if (Charset_is_utf8 || charset_is_cjk)
     return iswalnum_ucs (wc);
   else
     return (0 <= wc && wc < 256) ? isalnum (wc) : 0;
@@ -371,7 +417,7 @@
 
 int iswalpha (wint_t wc)
 {
-  if (Charset_is_utf8 || charset_is_ja)
+  if (Charset_is_utf8 || charset_is_cjk)
     return iswalpha_ucs (wc);
   else
     return (0 <= wc && wc < 256) ? isalpha (wc) : 0;
@@ -379,56 +425,10 @@
 
 int iswupper (wint_t wc)
 {
-  if (Charset_is_utf8 || charset_is_ja)
+  if (Charset_is_utf8 || charset_is_cjk)
     return iswupper_ucs (wc);
   else
     return (0 <= wc && wc < 256) ? isupper (wc) : 0;
-}
-
-/*
- * l10n for Japanese:
- *   Symbols, Greek and Cyrillic in JIS X 0208, Japanese Kanji
- *   Character Set, have a column width of 2.
- */
-int wcwidth_ja (wchar_t ucs)
-{
-  if (ucs >= 0x3021)
-    return -1; /* continue with the normal check */
-  /* a rough range for quick check */
-  if ((ucs >= 0x00a1 && ucs <= 0x00fe) || /* Latin-1 Supplement */
-      (ucs >= 0x0391 && ucs <= 0x0451) || /* Greek and Cyrillic */
-      (ucs >= 0x2010 && ucs <= 0x266f) || /* Symbols */
-      (ucs >= 0x3000 && ucs <= 0x3020))   /* CJK Symbols and Punctuation */
-    return 2;
-  else
-    return -1;
-}
-
-int wcwidth_ucs(wchar_t ucs);
-
-int wcwidth (wchar_t wc)
-{
-  if (!Charset_is_utf8)
-  {
-    if (!charset_is_ja)
-    {
-      /* 8-bit case */
-      if (!wc)
-	return 0;
-      else if ((0 <= wc && wc < 256) && IsPrint (wc))
-	return 1;
-      else
-	return -1;
-    }
-    else
-    {
-      /* Japanese */
-      int k = wcwidth_ja (wc);
-      if (k != -1)
-	return k;
-    }
-  }
-  return wcwidth_ucs (wc);
 }
 
 size_t utf8rtowc (wchar_t *pwc, const char *s, size_t n, mbstate_t *_ps)
diff -urN ./mbyte.h ../mutt-2.2.5new/mbyte.h
--- ./mbyte.h	2021-09-08 20:03:24.000000000 +0900
+++ ../mutt-2.2.5new/mbyte.h	2022-05-22 17:23:20.949941000 +0900
@@ -8,6 +8,12 @@
 #  ifdef HAVE_WCTYPE_H
 #   include <wctype.h>
 #  endif
+#  ifdef USE_CJK_WIDTH
+#ifdef wcwidth
+# undef wcwidth
+#endif
+int wcwidth (wchar_t wc);
+#  endif /* USE_CJK_WIDTH */
 # endif
 
 # ifndef HAVE_WC_FUNCS
@@ -32,6 +38,9 @@
 #ifdef iswupper
 # undef iswupper
 #endif
+#ifdef wcwidth
+# undef wcwidth
+#endif
 size_t wcrtomb (char *s, wchar_t wc, mbstate_t *ps);
 size_t mbrtowc (wchar_t *pwc, const char *s, size_t n, mbstate_t *ps);
 int iswprint (wint_t wc);
@@ -43,7 +52,6 @@
 wint_t towlower (wint_t wc);
 int wcwidth (wchar_t wc);
 # endif /* !HAVE_WC_FUNCS */
-
 
 void mutt_set_charset (char *charset);
 extern int Charset_is_utf8;
diff -urN ./mutt.h ../mutt-2.2.5new/mutt.h
--- ./mutt.h	2022-05-12 01:57:07.000000000 +0900
+++ ../mutt-2.2.5new/mutt.h	2022-05-22 17:23:20.951326000 +0900
@@ -413,6 +413,10 @@
   OPTBROWSERSTICKYCURSOR,
   OPTCHECKMBOXSIZE,
   OPTCHECKNEW,
+#ifdef USE_CJK_WIDTH
+  OPTCJKWIDTH,
+  OPTCJKWIDTHTREECHARS,
+#endif /* USE_CJK_WIDTH */
   OPTCOLLAPSEUNREAD,
   OPTCOMPOSECONFIRMDETACH,
   OPTCONFIRMAPPEND,
diff -urN ./wcwidth.c ../mutt-2.2.5new/wcwidth.c
--- ./wcwidth.c	2022-05-12 01:57:07.000000000 +0900
+++ ../mutt-2.2.5new/wcwidth.c	2022-05-22 17:23:20.952535000 +0900
@@ -5,6 +5,51 @@
  * http://www.opengroup.org/onlinepubs/007904975/functions/wcwidth.html
  * http://www.opengroup.org/onlinepubs/007904975/functions/wcswidth.html
  *
+ * In fixed-width output devices, Latin characters all occupy a single
+ * "cell" position of equal width, whereas ideographic CJK characters
+ * occupy two such cells. Interoperability between terminal-line
+ * applications and (teletype-style) character terminals using the
+ * UTF-8 encoding requires agreement on which character should advance
+ * the cursor by how many cell positions. No established formal
+ * standards exist at present on which Unicode character shall occupy
+ * how many cell positions on character terminals. These routines are
+ * a first attempt of defining such behavior based on simple rules
+ * applied to data provided by the Unicode Consortium.
+ *
+ * For some graphical characters, the Unicode standard explicitly
+ * defines a character-cell width via the definition of the East Asian
+ * FullWidth (F), Wide (W), Half-width (H), and Narrow (Na) classes.
+ * In all these cases, there is no ambiguity about which width a
+ * terminal shall use. For characters in the East Asian Ambiguous (A)
+ * class, the width choice depends purely on a preference of backward
+ * compatibility with either historic CJK or Western practice.
+ * Choosing single-width for these characters is easy to justify as
+ * the appropriate long-term solution, as the CJK practice of
+ * displaying these characters as double-width comes from historic
+ * implementation simplicity (8-bit encoded characters were displayed
+ * single-width and 16-bit ones double-width, even for Greek,
+ * Cyrillic, etc.) and not any typographic considerations.
+ *
+ * Much less clear is the choice of width for the Not East Asian
+ * (Neutral) class. Existing practice does not dictate a width for any
+ * of these characters. It would nevertheless make sense
+ * typographically to allocate two character cells to characters such
+ * as for instance EM SPACE or VOLUME INTEGRAL, which cannot be
+ * represented adequately with a single-width glyph. The following
+ * routines at present merely assign a single-cell width to all
+ * neutral characters, in the interest of simplicity. This is not
+ * entirely satisfactory and should be reconsidered before
+ * establishing a formal standard in this area. At the moment, the
+ * decision which Not East Asian (Neutral) characters should be
+ * represented by double-width glyphs cannot yet be answered by
+ * applying a simple rule from the Unicode database content. Setting
+ * up a proper standard for the behavior of UTF-8 character terminals
+ * will require a careful analysis not only of each Unicode character,
+ * but also of each presentation form, something the author of these
+ * routines has avoided to do so far.
+ *
+ * http://www.unicode.org/unicode/reports/tr11/
+ *
  * Markus Kuhn -- 2007-05-26 (Unicode 5.0)
  *
  * Permission to use, copy, modify, and distribute this software
@@ -24,13 +69,35 @@
 # include "config.h"
 #endif
 
-#ifndef HAVE_WC_FUNCS
+#if !defined(HAVE_WC_FUNCS) || defined(USE_CJK_WIDTH)
+#include <wchar.h>
 
-#include "mutt.h"
-#include "mbyte.h"
+struct interval {
+  wchar_t first;
+  wchar_t last;
+};
 
-#include <ctype.h>
+/* auxiliary function for binary search in interval table */
+static int bisearch(wchar_t ucs, const struct interval *table, int max) {
+  int min = 0;
+  int mid;
 
+  if (ucs < table[0].first || ucs > table[max].last)
+    return 0;
+  while (max >= min) {
+    mid = (min + max) / 2;
+    if (ucs > table[mid].last)
+      min = mid + 1;
+    else if (ucs < table[mid].first)
+      max = mid - 1;
+    else
+      return 1;
+  }
+
+  return 0;
+}
+
+
 /* The following two functions define the column width of an ISO 10646
  * character as follows:
  *
@@ -67,62 +134,56 @@
 {
   /* sorted list of non-overlapping intervals of non-spacing characters */
   /* generated by "uniset +cat=Me +cat=Mn +cat=Cf -00AD +1160-11FF +200B c" */
-  static const struct interval {
-    wchar_t first;
-    wchar_t last;
-  } combining[] = {
-    { 0x0300, 0x036f }, { 0x0483, 0x0486 }, { 0x0488, 0x0489 },
-    { 0x0591, 0x05bd }, { 0x05bf, 0x05bf }, { 0x05c1, 0x05c2 },
-    { 0x05c4, 0x05c5 }, { 0x05c7, 0x05c7 }, { 0x0600, 0x0603 },
-    { 0x0610, 0x0615 }, { 0x064b, 0x065e }, { 0x0670, 0x0670 },
-    { 0x06d6, 0x06e4 }, { 0x06e7, 0x06e8 }, { 0x06ea, 0x06ed },
-    { 0x070f, 0x070f }, { 0x0711, 0x0711 }, { 0x0730, 0x074a },
-    { 0x07a6, 0x07b0 }, { 0x07eb, 0x07f3 }, { 0x0901, 0x0902 },
-    { 0x093c, 0x093c }, { 0x0941, 0x0948 }, { 0x094d, 0x094d },
+  static const struct interval combining[] = {
+    { 0x0300, 0x036F }, { 0x0483, 0x0486 }, { 0x0488, 0x0489 },
+    { 0x0591, 0x05BD }, { 0x05BF, 0x05BF }, { 0x05C1, 0x05C2 },
+    { 0x05C4, 0x05C5 }, { 0x05C7, 0x05C7 }, { 0x0600, 0x0603 },
+    { 0x0610, 0x0615 }, { 0x064B, 0x065E }, { 0x0670, 0x0670 },
+    { 0x06D6, 0x06E4 }, { 0x06E7, 0x06E8 }, { 0x06EA, 0x06ED },
+    { 0x070F, 0x070F }, { 0x0711, 0x0711 }, { 0x0730, 0x074A },
+    { 0x07A6, 0x07B0 }, { 0x07EB, 0x07F3 }, { 0x0901, 0x0902 },
+    { 0x093C, 0x093C }, { 0x0941, 0x0948 }, { 0x094D, 0x094D },
     { 0x0951, 0x0954 }, { 0x0962, 0x0963 }, { 0x0981, 0x0981 },
-    { 0x09bc, 0x09bc }, { 0x09c1, 0x09c4 }, { 0x09cd, 0x09cd },
-    { 0x09e2, 0x09e3 }, { 0x0a01, 0x0a02 }, { 0x0a3c, 0x0a3c },
-    { 0x0a41, 0x0a42 }, { 0x0a47, 0x0a48 }, { 0x0a4b, 0x0a4d },
-    { 0x0a70, 0x0a71 }, { 0x0a81, 0x0a82 }, { 0x0abc, 0x0abc },
-    { 0x0ac1, 0x0ac5 }, { 0x0ac7, 0x0ac8 }, { 0x0acd, 0x0acd },
-    { 0x0ae2, 0x0ae3 }, { 0x0b01, 0x0b01 }, { 0x0b3c, 0x0b3c },
-    { 0x0b3f, 0x0b3f }, { 0x0b41, 0x0b43 }, { 0x0b4d, 0x0b4d },
-    { 0x0b56, 0x0b56 }, { 0x0b82, 0x0b82 }, { 0x0bc0, 0x0bc0 },
-    { 0x0bcd, 0x0bcd }, { 0x0c3e, 0x0c40 }, { 0x0c46, 0x0c48 },
-    { 0x0c4a, 0x0c4d }, { 0x0c55, 0x0c56 }, { 0x0cbc, 0x0cbc },
-    { 0x0cbf, 0x0cbf }, { 0x0cc6, 0x0cc6 }, { 0x0ccc, 0x0ccd },
-    { 0x0ce2, 0x0ce3 }, { 0x0d41, 0x0d43 }, { 0x0d4d, 0x0d4d },
-    { 0x0dca, 0x0dca }, { 0x0dd2, 0x0dd4 }, { 0x0dd6, 0x0dd6 },
-    { 0x0e31, 0x0e31 }, { 0x0e34, 0x0e3a }, { 0x0e47, 0x0e4e },
-    { 0x0eb1, 0x0eb1 }, { 0x0eb4, 0x0eb9 }, { 0x0ebb, 0x0ebc },
-    { 0x0ec8, 0x0ecd }, { 0x0f18, 0x0f19 }, { 0x0f35, 0x0f35 },
-    { 0x0f37, 0x0f37 }, { 0x0f39, 0x0f39 }, { 0x0f71, 0x0f7e },
-    { 0x0f80, 0x0f84 }, { 0x0f86, 0x0f87 }, { 0x0f90, 0x0f97 },
-    { 0x0f99, 0x0fbc }, { 0x0fc6, 0x0fc6 }, { 0x102d, 0x1030 },
+    { 0x09BC, 0x09BC }, { 0x09C1, 0x09C4 }, { 0x09CD, 0x09CD },
+    { 0x09E2, 0x09E3 }, { 0x0A01, 0x0A02 }, { 0x0A3C, 0x0A3C },
+    { 0x0A41, 0x0A42 }, { 0x0A47, 0x0A48 }, { 0x0A4B, 0x0A4D },
+    { 0x0A70, 0x0A71 }, { 0x0A81, 0x0A82 }, { 0x0ABC, 0x0ABC },
+    { 0x0AC1, 0x0AC5 }, { 0x0AC7, 0x0AC8 }, { 0x0ACD, 0x0ACD },
+    { 0x0AE2, 0x0AE3 }, { 0x0B01, 0x0B01 }, { 0x0B3C, 0x0B3C },
+    { 0x0B3F, 0x0B3F }, { 0x0B41, 0x0B43 }, { 0x0B4D, 0x0B4D },
+    { 0x0B56, 0x0B56 }, { 0x0B82, 0x0B82 }, { 0x0BC0, 0x0BC0 },
+    { 0x0BCD, 0x0BCD }, { 0x0C3E, 0x0C40 }, { 0x0C46, 0x0C48 },
+    { 0x0C4A, 0x0C4D }, { 0x0C55, 0x0C56 }, { 0x0CBC, 0x0CBC },
+    { 0x0CBF, 0x0CBF }, { 0x0CC6, 0x0CC6 }, { 0x0CCC, 0x0CCD },
+    { 0x0CE2, 0x0CE3 }, { 0x0D41, 0x0D43 }, { 0x0D4D, 0x0D4D },
+    { 0x0DCA, 0x0DCA }, { 0x0DD2, 0x0DD4 }, { 0x0DD6, 0x0DD6 },
+    { 0x0E31, 0x0E31 }, { 0x0E34, 0x0E3A }, { 0x0E47, 0x0E4E },
+    { 0x0EB1, 0x0EB1 }, { 0x0EB4, 0x0EB9 }, { 0x0EBB, 0x0EBC },
+    { 0x0EC8, 0x0ECD }, { 0x0F18, 0x0F19 }, { 0x0F35, 0x0F35 },
+    { 0x0F37, 0x0F37 }, { 0x0F39, 0x0F39 }, { 0x0F71, 0x0F7E },
+    { 0x0F80, 0x0F84 }, { 0x0F86, 0x0F87 }, { 0x0F90, 0x0F97 },
+    { 0x0F99, 0x0FBC }, { 0x0FC6, 0x0FC6 }, { 0x102D, 0x1030 },
     { 0x1032, 0x1032 }, { 0x1036, 0x1037 }, { 0x1039, 0x1039 },
-    { 0x1058, 0x1059 }, { 0x1160, 0x11ff }, { 0x135f, 0x135f },
+    { 0x1058, 0x1059 }, { 0x1160, 0x11FF }, { 0x135F, 0x135F },
     { 0x1712, 0x1714 }, { 0x1732, 0x1734 }, { 0x1752, 0x1753 },
-    { 0x1772, 0x1773 }, { 0x17b4, 0x17b5 }, { 0x17b7, 0x17bd },
-    { 0x17c6, 0x17c6 }, { 0x17c9, 0x17d3 }, { 0x17dd, 0x17dd },
-    { 0x180b, 0x180d }, { 0x18a9, 0x18a9 }, { 0x1920, 0x1922 },
-    { 0x1927, 0x1928 }, { 0x1932, 0x1932 }, { 0x1939, 0x193b },
-    { 0x1a17, 0x1a18 }, { 0x1b00, 0x1b03 }, { 0x1b34, 0x1b34 },
-    { 0x1b36, 0x1b3a }, { 0x1b3c, 0x1b3c }, { 0x1b42, 0x1b42 },
-    { 0x1b6b, 0x1b73 }, { 0x1dc0, 0x1dca }, { 0x1dfe, 0x1dff },
-    { 0x200b, 0x200f }, { 0x202a, 0x202e }, { 0x2060, 0x2063 },
-    { 0x206a, 0x206f }, { 0x20d0, 0x20ef }, { 0x302a, 0x302f },
-    { 0x3099, 0x309a }, { 0xa806, 0xa806 }, { 0xa80b, 0xa80b },
-    { 0xa825, 0xa826 }, { 0xfb1e, 0xfb1e }, { 0xfe00, 0xfe0f },
-    { 0xfe20, 0xfe23 }, { 0xfeff, 0xfeff }, { 0xfff9, 0xfffb },
-    { 0x10a01, 0x10a03 }, { 0x10a05, 0x10a06 }, { 0x10a0c, 0x10a0f },
-    { 0x10a38, 0x10a3a }, { 0x10a3f, 0x10a3f }, { 0x1d167, 0x1d169 },
-    { 0x1d173, 0x1d182 }, { 0x1d185, 0x1d18b }, { 0x1d1aa, 0x1d1ad },
-    { 0x1d242, 0x1d244 }, { 0xe0001, 0xe0001 }, { 0xe0020, 0xe007f },
-    { 0xe0100, 0xe01ef }
+    { 0x1772, 0x1773 }, { 0x17B4, 0x17B5 }, { 0x17B7, 0x17BD },
+    { 0x17C6, 0x17C6 }, { 0x17C9, 0x17D3 }, { 0x17DD, 0x17DD },
+    { 0x180B, 0x180D }, { 0x18A9, 0x18A9 }, { 0x1920, 0x1922 },
+    { 0x1927, 0x1928 }, { 0x1932, 0x1932 }, { 0x1939, 0x193B },
+    { 0x1A17, 0x1A18 }, { 0x1B00, 0x1B03 }, { 0x1B34, 0x1B34 },
+    { 0x1B36, 0x1B3A }, { 0x1B3C, 0x1B3C }, { 0x1B42, 0x1B42 },
+    { 0x1B6B, 0x1B73 }, { 0x1DC0, 0x1DCA }, { 0x1DFE, 0x1DFF },
+    { 0x200B, 0x200F }, { 0x202A, 0x202E }, { 0x2060, 0x2063 },
+    { 0x206A, 0x206F }, { 0x20D0, 0x20EF }, { 0x302A, 0x302F },
+    { 0x3099, 0x309A }, { 0xA806, 0xA806 }, { 0xA80B, 0xA80B },
+    { 0xA825, 0xA826 }, { 0xFB1E, 0xFB1E }, { 0xFE00, 0xFE0F },
+    { 0xFE20, 0xFE23 }, { 0xFEFF, 0xFEFF }, { 0xFFF9, 0xFFFB },
+    { 0x10A01, 0x10A03 }, { 0x10A05, 0x10A06 }, { 0x10A0C, 0x10A0F },
+    { 0x10A38, 0x10A3A }, { 0x10A3F, 0x10A3F }, { 0x1D167, 0x1D169 },
+    { 0x1D173, 0x1D182 }, { 0x1D185, 0x1D18B }, { 0x1D1AA, 0x1D1AD },
+    { 0x1D242, 0x1D244 }, { 0xE0001, 0xE0001 }, { 0xE0020, 0xE007F },
+    { 0xE0100, 0xE01EF }
   };
-  int min = 0;
-  int max = sizeof(combining) / sizeof(struct interval) - 1;
-  int mid;
 
   /* test for 8-bit control characters */
   if (ucs == 0)
@@ -130,29 +191,17 @@
   if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0))
     return -1;
 
-  /* first quick check for Latin-1 etc. characters */
-  if (ucs < combining[0].first)
-    return 1;
-
   /* binary search in table of non-spacing characters */
-  while (max >= min)
-  {
-    mid = (min + max) / 2;
-    if (combining[mid].last < ucs)
-      min = mid + 1;
-    else if (combining[mid].first > ucs)
-      max = mid - 1;
-    else if (combining[mid].first <= ucs && combining[mid].last >= ucs)
-      return 0;
-  }
-
+  if (bisearch(ucs, combining,
+              sizeof(combining) / sizeof(struct interval) - 1))
+    return 0;
   /* if we arrive here, ucs is not a combining or C0/C1 control character */
 
   /* fast test for majority of non-wide scripts */
   if (ucs < 0x1100)
     return 1;
 
-  return 1 +
+  return 1 + 
     (ucs >= 0x1100 &&
      (ucs <= 0x115f ||                    /* Hangul Jamo init. consonants */
       ucs == 0x2329 || ucs == 0x232a ||
@@ -168,15 +217,120 @@
       (ucs >= 0x30000 && ucs <= 0x3fffd)));
 }
 
-#endif /* !HAVE_WC_FUNCS */
+#if 0 /* original */
+int wcswidth_ucs(const wchar_t *pwcs, size_t n)
+{
+  int w, width = 0;
 
+  for (;*pwcs && n-- > 0; pwcs++)
+    if ((w = wcwidth_ucs(*pwcs)) < 0)
+      return -1;
+    else
+      width += w;
+
+  return width;
+}
+#endif
+
+/*
+ * The following functions are the same as wcwidth_ucs() and
+ * wcswidth_ucs(), except that spacing characters in the East Asian
+ * Ambiguous (A) category as defined in Unicode Technical Report #11
+ * have a column width of 2. This variant might be useful for users of
+ * CJK legacy encodings who want to migrate to UCS without changing
+ * the traditional terminal character-width behaviour. It is not
+ * otherwise recommended for general use.
+ */
+/*
+ * In addition to the explanation mentioned above,
+ * several characters in the East Asian Narrow (Na) and Not East Asian
+ * (Neutral) category as defined in Unicode Technical Report #11
+ * actually have a column width of 2 in CJK legacy encodings.
+ */
+int wcwidth_cjk(wchar_t ucs)
+{
+  /* sorted list of non-overlapping intervals of East Asian Ambiguous
+   * characters, generated by "uniset +WIDTH-A -cat=Me -cat=Mn -cat=Cf c" */
+  static const struct interval ambiguous[] = {
+    { 0x00A1, 0x00A1 }, { 0x00A4, 0x00A4 }, { 0x00A7, 0x00A8 },
+    { 0x00AA, 0x00AA }, { 0x00AE, 0x00AE }, { 0x00B0, 0x00B4 },
+    { 0x00B6, 0x00BA }, { 0x00BC, 0x00BF }, { 0x00C6, 0x00C6 },
+    { 0x00D0, 0x00D0 }, { 0x00D7, 0x00D8 }, { 0x00DE, 0x00E1 },
+    { 0x00E6, 0x00E6 }, { 0x00E8, 0x00EA }, { 0x00EC, 0x00ED },
+    { 0x00F0, 0x00F0 }, { 0x00F2, 0x00F3 }, { 0x00F7, 0x00FA },
+    { 0x00FC, 0x00FC }, { 0x00FE, 0x00FE }, { 0x0101, 0x0101 },
+    { 0x0111, 0x0111 }, { 0x0113, 0x0113 }, { 0x011B, 0x011B },
+    { 0x0126, 0x0127 }, { 0x012B, 0x012B }, { 0x0131, 0x0133 },
+    { 0x0138, 0x0138 }, { 0x013F, 0x0142 }, { 0x0144, 0x0144 },
+    { 0x0148, 0x014B }, { 0x014D, 0x014D }, { 0x0152, 0x0153 },
+    { 0x0166, 0x0167 }, { 0x016B, 0x016B }, { 0x01CE, 0x01CE },
+    { 0x01D0, 0x01D0 }, { 0x01D2, 0x01D2 }, { 0x01D4, 0x01D4 },
+    { 0x01D6, 0x01D6 }, { 0x01D8, 0x01D8 }, { 0x01DA, 0x01DA },
+    { 0x01DC, 0x01DC }, { 0x0251, 0x0251 }, { 0x0261, 0x0261 },
+    { 0x02C4, 0x02C4 }, { 0x02C7, 0x02C7 }, { 0x02C9, 0x02CB },
+    { 0x02CD, 0x02CD }, { 0x02D0, 0x02D0 }, { 0x02D8, 0x02DB },
+    { 0x02DD, 0x02DD }, { 0x02DF, 0x02DF }, { 0x0391, 0x03A1 },
+    { 0x03A3, 0x03A9 }, { 0x03B1, 0x03C1 }, { 0x03C3, 0x03C9 },
+    { 0x0401, 0x0401 }, { 0x0410, 0x044F }, { 0x0451, 0x0451 },
+    { 0x2010, 0x2010 }, { 0x2013, 0x2016 }, { 0x2018, 0x2019 },
+    { 0x201C, 0x201D }, { 0x2020, 0x2022 }, { 0x2024, 0x2027 },
+    { 0x2030, 0x2030 }, { 0x2032, 0x2033 }, { 0x2035, 0x2035 },
+    { 0x203B, 0x203B }, { 0x203E, 0x203E }, { 0x2074, 0x2074 },
+    { 0x207F, 0x207F }, { 0x2081, 0x2084 }, { 0x20AC, 0x20AC },
+    { 0x2103, 0x2103 }, { 0x2105, 0x2105 }, { 0x2109, 0x2109 },
+    { 0x2113, 0x2113 }, { 0x2116, 0x2116 }, { 0x2121, 0x2122 },
+    { 0x2126, 0x2126 }, { 0x212B, 0x212B }, { 0x2153, 0x2154 },
+    { 0x215B, 0x215E }, { 0x2160, 0x216B }, { 0x2170, 0x2179 },
+    { 0x2190, 0x2199 }, { 0x21B8, 0x21B9 }, { 0x21D2, 0x21D2 },
+    { 0x21D4, 0x21D4 }, { 0x21E7, 0x21E7 }, { 0x2200, 0x2200 },
+    { 0x2202, 0x2203 }, { 0x2207, 0x2208 }, { 0x220B, 0x220B },
+    { 0x220F, 0x220F }, { 0x2211, 0x2211 }, { 0x2215, 0x2215 },
+    { 0x221A, 0x221A }, { 0x221D, 0x2220 }, { 0x2223, 0x2223 },
+    { 0x2225, 0x2225 }, { 0x2227, 0x222C }, { 0x222E, 0x222E },
+    { 0x2234, 0x2237 }, { 0x223C, 0x223D }, { 0x2248, 0x2248 },
+    { 0x224C, 0x224C }, { 0x2252, 0x2252 }, { 0x2260, 0x2261 },
+    { 0x2264, 0x2267 }, { 0x226A, 0x226B }, { 0x226E, 0x226F },
+    { 0x2282, 0x2283 }, { 0x2286, 0x2287 }, { 0x2295, 0x2295 },
+    { 0x2299, 0x2299 }, { 0x22A5, 0x22A5 }, { 0x22BF, 0x22BF },
+    { 0x2312, 0x2312 }, { 0x2460, 0x24E9 }, { 0x24EB, 0x254B },
+    { 0x2550, 0x2573 }, { 0x2580, 0x258F }, { 0x2592, 0x2595 },
+    { 0x25A0, 0x25A1 }, { 0x25A3, 0x25A9 }, { 0x25B2, 0x25B3 },
+    { 0x25B6, 0x25B7 }, { 0x25BC, 0x25BD }, { 0x25C0, 0x25C1 },
+    { 0x25C6, 0x25C8 }, { 0x25CB, 0x25CB }, { 0x25CE, 0x25D1 },
+    { 0x25E2, 0x25E5 }, { 0x25EF, 0x25EF }, { 0x2605, 0x2606 },
+    { 0x2609, 0x2609 }, { 0x260E, 0x260F }, { 0x2614, 0x2615 },
+    { 0x261C, 0x261C }, { 0x261E, 0x261E }, { 0x2640, 0x2640 },
+    { 0x2642, 0x2642 }, { 0x2660, 0x2661 }, { 0x2663, 0x2665 },
+    { 0x2667, 0x266A }, { 0x266C, 0x266D }, { 0x266F, 0x266F },
+    { 0x273D, 0x273D }, { 0x2776, 0x277F }, { 0xE000, 0xF8FF },
+    { 0xFFFD, 0xFFFD }, { 0xF0000, 0xFFFFD }, { 0x100000, 0x10FFFD }
+  };
+
+  /* For Japanese legacy encodings, the following characters are added. */
+  static const struct interval legacy_ja[] = {
+    { 0x00A2, 0x00A3 }, { 0x00A5, 0x00A6 }, { 0x00AC, 0x00AC },
+    { 0x00AF, 0x00AF }, { 0x2212, 0x2212 }
+  };
+
+  /* binary search in table of non-spacing characters */
+  if (bisearch(ucs, ambiguous,
+	       sizeof(ambiguous) / sizeof(struct interval) - 1))
+    return 2;
+  if (bisearch(ucs, legacy_ja,
+	       sizeof(legacy_ja) / sizeof(struct interval) - 1))
+     return 2;
+
+  return wcwidth_ucs(ucs);
+}
+
+
 #if 0 /* original */
-int wcswidth(const wchar_t *pwcs, size_t n)
+int wcswidth_cjk(const wchar_t *pwcs, size_t n)
 {
   int w, width = 0;
 
   for (;*pwcs && n-- > 0; pwcs++)
-    if ((w = wcwidth(*pwcs)) < 0)
+    if ((w = wcwidth_cjk(*pwcs)) < 0)
       return -1;
     else
       width += w;
@@ -184,3 +338,4 @@
   return width;
 }
 #endif
+#endif /* !HAVE_WC_FUNCS || USE_CJK_WIDTH */
