diff -urN mutt-1.6.1/PATCHES mutt-1.6.1new/PATCHES
--- mutt-1.6.1/PATCHES	2016-05-01 06:07:23.000000000 +0900
+++ mutt-1.6.1new/PATCHES	2016-08-16 22:26:40.000000000 +0900
@@ -0,0 +1 @@
+patch-1.5.22.tt.cjk_width_tree_chars.1
diff -urN mutt-1.6.1/curs_lib.c mutt-1.6.1new/curs_lib.c
--- mutt-1.6.1/curs_lib.c	2016-05-01 06:14:03.000000000 +0900
+++ mutt-1.6.1new/curs_lib.c	2016-08-16 22:26:40.000000000 +0900
@@ -795,7 +795,14 @@
       wc = replacement_char ();
     }
     if (arboreal && wc < M_TREE_MAX)
-      w = 1; /* hack */
+    {
+#ifdef USE_CJK_WIDTH
+      if (Charset_is_utf8 && option (OPTCJKWIDTHTREECHARS) && !option (OPTASCIICHARS))
+        w = wcwidth (TreeChars[wc]);
+      else
+#endif
+        w = 1;
+    }
     else
     {
 #ifdef HAVE_ISWBLANK
@@ -1024,10 +1031,12 @@
   int w;
   size_t k, n;
   mbstate_t mbstate;
+  int arboreal;
 
   if (!s) return 0;
 
   n = mutt_strlen (s);
+  arboreal = (s[0] < M_TREE_MAX) ? 1 : 0;
 
   memset (&mbstate, 0, sizeof (mbstate));
   for (w=0; n && (k = mbrtowc (&wc, s, n, &mbstate)); s += k, n -= k)
@@ -1037,9 +1046,21 @@
       k = (k == (size_t)(-1)) ? 1 : n;
       wc = replacement_char ();
     }
-    if (!IsWPrint (wc))
-      wc = '?';
-    w += wcwidth (wc);
+    if (wc < M_TREE_MAX && arboreal && k == 1)
+    {
+#ifdef USE_CJK_WIDTH
+      if (Charset_is_utf8 && option (OPTCJKWIDTHTREECHARS) && !option (OPTASCIICHARS))
+        w += wcwidth (TreeChars[wc]);
+      else
+#endif
+        w++;
+    }
+    else
+    {
+      if (!IsWPrint (wc))
+        wc = '?';
+      w += wcwidth (wc);
+    }
   }
   return w;
 }
diff -urN mutt-1.6.1/globals.h mutt-1.6.1new/globals.h
--- mutt-1.6.1/globals.h	2016-05-01 06:07:24.000000000 +0900
+++ mutt-1.6.1new/globals.h	2016-08-16 22:26:40.000000000 +0900
@@ -278,9 +278,31 @@
 
 const char * const BodyTypes[] = { "x-unknown", "audio", "application", "image", "message", "model", "multipart", "text", "video" };
 const char * const BodyEncodings[] = { "x-unknown", "7bit", "8bit", "quoted-printable", "base64", "binary", "x-uuencoded" };
+#ifdef USE_CJK_WIDTH
+const wchar_t TreeChars[] =
+{
+  0xFEFF, /* not used */
+  0x2514, /* M_TREE_LLCORNER  WACS_LLCORNER */
+  0x250C, /* M_TREE_ULCORNER  WACS_ULCORNER */
+  0x251C, /* M_TREE_LTEE      WACS_LTEE */
+  0x2500, /* M_TREE_HLINE     WACS_HLINE */
+  0x2502, /* M_TREE_VLINE     WACS_VLINE */
+  0x0020, /* M_TREE_SPACE */
+  0x003E, /* M_TREE_RARROW */
+  0x002A, /* M_TREE_STAR  fake thread indicator */
+  0x0026, /* M_TREE_HIDDEN */
+  0x003D, /* M_TREE_EQUALS */
+  0x252C, /* M_TREE_TTEE      WACS_TTEE */
+  0x2534, /* M_TREE_BTEE      WACS_BTEE */
+  0x003F  /* M_TREE_MISSING */
+};
+#endif /* USE_CJK_WIDTH */
 #else
 extern const char * const Weekdays[];
 extern const char * const Months[];
+#ifdef USE_CJK_WIDTH
+extern const wchar_t TreeChars[];
+#endif /* USE_CJK_WIDTH */
 #endif
 
 #ifdef MAIN_C
diff -urN mutt-1.6.1/init.h mutt-1.6.1new/init.h
--- mutt-1.6.1/init.h	2016-05-01 06:14:03.000000000 +0900
+++ mutt-1.6.1new/init.h	2016-08-16 22:26:40.000000000 +0900
@@ -342,6 +342,17 @@
   ** .te
   **
   */
+  { "cjk_width_tree_chars",	DT_BOOL, R_NONE, OPTCJKWIDTHTREECHARS, 0 },
+  /*
+  ** .pp
+  ** If \fIset\fP,  Mutt will use the result of $cjk_width as a column 
+  ** width of WACS characters when displaying thread and attachment trees.
+  ** This variant might be useful for users of CJK legacy encodings
+  ** who want to migrate to UCS without changing the traditional terminal
+  ** character-width behaviour.
+  ** .pp
+  ** \fBNote:\fP this option only affects in UTF-8 encoding.
+  */
 #endif
   { "charset",		DT_STR,	 R_NONE, UL &Charset, UL 0 },
   /*
diff -urN mutt-1.6.1/mutt.h.rej mutt-1.6.1new/mutt.h.rej
--- mutt-1.6.1/mutt.h.rej	1970-01-01 09:00:00.000000000 +0900
+++ mutt-1.6.1new/mutt.h.rej	2016-08-16 22:26:40.000000000 +0900
@@ -0,0 +1,16 @@
+***************
+*** 328,333 ****
+    OPTCHECKNEW,
+  #ifdef USE_CJK_WIDTH
+    OPTCJKWIDTH,
+  #endif /* USE_CJK_WIDTH */
+    OPTCOLLAPSEUNREAD,
+    OPTCONFIRMAPPEND,
+--- 328,334 ----
+    OPTCHECKNEW,
+  #ifdef USE_CJK_WIDTH
+    OPTCJKWIDTH,
++   OPTCJKWIDTHTREECHARS,
+  #endif /* USE_CJK_WIDTH */
+    OPTCOLLAPSEUNREAD,
+    OPTCONFIRMAPPEND,
